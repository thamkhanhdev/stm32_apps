
stm32h743_qspi_loader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000494  24000004  24000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .init_array   00000004  24000498  24000498  00010498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .fini_array   00000004  2400049c  2400049c  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000014  240004a0  240004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000074  240004b4  240004b4  000104b4  2**2
                  ALLOC
  5 .text         0000a6f0  24000528  24000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .Dev_info     000000c8  2400ac18  2400ac18  0002ac18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rodata       00000010  2400ace0  2400ace0  0001ace0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 ._user_heap_stack 00000600  2400acf0  2400acf0  0001acf0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002ace0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017ca3  00000000  00000000  0002ad0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002ad8  00000000  00000000  000429b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000240  00000000  00000000  00045490  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006a6a  00000000  00000000  000456d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004ae0  00000000  00000000  0004c13a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00050c1a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002a7c  00000000  00000000  00050c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000020  00000000  00000000  00053718  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

24000528 <__do_global_dtors_aux>:
24000528:	b510      	push	{r4, lr}
2400052a:	4c05      	ldr	r4, [pc, #20]	; (24000540 <__bss_end__+0x18>)
2400052c:	7823      	ldrb	r3, [r4, #0]
2400052e:	b933      	cbnz	r3, 2400053e <__do_global_dtors_aux+0x16>
24000530:	4b04      	ldr	r3, [pc, #16]	; (24000544 <__bss_end__+0x1c>)
24000532:	b113      	cbz	r3, 2400053a <__do_global_dtors_aux+0x12>
24000534:	4804      	ldr	r0, [pc, #16]	; (24000548 <__bss_end__+0x20>)
24000536:	f3af 8000 	nop.w
2400053a:	2301      	movs	r3, #1
2400053c:	7023      	strb	r3, [r4, #0]
2400053e:	bd10      	pop	{r4, pc}
24000540:	240004b4 	.word	0x240004b4
24000544:	00000000 	.word	0x00000000
24000548:	2400ac00 	.word	0x2400ac00

2400054c <frame_dummy>:
2400054c:	b508      	push	{r3, lr}
2400054e:	4b03      	ldr	r3, [pc, #12]	; (2400055c <frame_dummy+0x10>)
24000550:	b11b      	cbz	r3, 2400055a <frame_dummy+0xe>
24000552:	4903      	ldr	r1, [pc, #12]	; (24000560 <frame_dummy+0x14>)
24000554:	4803      	ldr	r0, [pc, #12]	; (24000564 <frame_dummy+0x18>)
24000556:	f3af 8000 	nop.w
2400055a:	bd08      	pop	{r3, pc}
2400055c:	00000000 	.word	0x00000000
24000560:	240004b8 	.word	0x240004b8
24000564:	2400ac00 	.word	0x2400ac00

24000568 <Init>:
 * @brief  System initialization.
 * @param  None
 * @retval  LOADER_OK = 1	: Operation succeeded
 * @retval  LOADER_FAIL = 0	: Operation failed
 */
int Init(void) {
24000568:	b580      	push	{r7, lr}
2400056a:	af00      	add	r7, sp, #0

	*(uint32_t*)0xE000EDF0=0xA05F0000; //enable interrupts in debug
2400056c:	4b18      	ldr	r3, [pc, #96]	; (240005d0 <Init+0x68>)
2400056e:	4a19      	ldr	r2, [pc, #100]	; (240005d4 <Init+0x6c>)
24000570:	601a      	str	r2, [r3, #0]

	SystemInit();
24000572:	f001 fb43 	bl	24001bfc <SystemInit>
 * change VTOR setting for other devices
 * SCB->VTOR = 0x20000000 | 0x200;
 *
 * */

	SCB->VTOR = 0x24000000 | 0x200;
24000576:	4b18      	ldr	r3, [pc, #96]	; (240005d8 <Init+0x70>)
24000578:	4a18      	ldr	r2, [pc, #96]	; (240005dc <Init+0x74>)
2400057a:	609a      	str	r2, [r3, #8]

	HAL_Init();
2400057c:	f001 fd2c 	bl	24001fd8 <HAL_Init>

    SystemClock_Config();
24000580:	f000 fb52 	bl	24000c28 <SystemClock_Config>

    MX_GPIO_Init();
24000584:	f000 fa1c 	bl	240009c0 <MX_GPIO_Init>

	__HAL_RCC_QSPI_FORCE_RESET();  //completely reset peripheral
24000588:	4b15      	ldr	r3, [pc, #84]	; (240005e0 <Init+0x78>)
2400058a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
2400058c:	4a14      	ldr	r2, [pc, #80]	; (240005e0 <Init+0x78>)
2400058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24000592:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_QSPI_RELEASE_RESET();
24000594:	4b12      	ldr	r3, [pc, #72]	; (240005e0 <Init+0x78>)
24000596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24000598:	4a11      	ldr	r2, [pc, #68]	; (240005e0 <Init+0x78>)
2400059a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
2400059e:	67d3      	str	r3, [r2, #124]	; 0x7c

	if (CSP_QUADSPI_Init() != HAL_OK)
240005a0:	f000 ff18 	bl	240013d4 <CSP_QUADSPI_Init>
240005a4:	4603      	mov	r3, r0
240005a6:	2b00      	cmp	r3, #0
240005a8:	d003      	beq.n	240005b2 <Init+0x4a>
	{
		HAL_SuspendTick();
240005aa:	f001 fe75 	bl	24002298 <HAL_SuspendTick>
		return LOADER_FAIL;
240005ae:	2300      	movs	r3, #0
240005b0:	e00b      	b.n	240005ca <Init+0x62>
	}


	if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
240005b2:	f000 ffdd 	bl	24001570 <CSP_QSPI_EnableMemoryMappedMode>
240005b6:	4603      	mov	r3, r0
240005b8:	2b00      	cmp	r3, #0
240005ba:	d003      	beq.n	240005c4 <Init+0x5c>
	{
		HAL_SuspendTick();
240005bc:	f001 fe6c 	bl	24002298 <HAL_SuspendTick>
		return LOADER_FAIL;
240005c0:	2300      	movs	r3, #0
240005c2:	e002      	b.n	240005ca <Init+0x62>
	}

		HAL_SuspendTick();
240005c4:	f001 fe68 	bl	24002298 <HAL_SuspendTick>
		return LOADER_OK;
240005c8:	2301      	movs	r3, #1
}
240005ca:	4618      	mov	r0, r3
240005cc:	bd80      	pop	{r7, pc}
240005ce:	bf00      	nop
240005d0:	e000edf0 	.word	0xe000edf0
240005d4:	a05f0000 	.word	0xa05f0000
240005d8:	e000ed00 	.word	0xe000ed00
240005dc:	24000200 	.word	0x24000200
240005e0:	58024400 	.word	0x58024400

240005e4 <Write>:
 * @param   Size   : size of data
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1		: Operation succeeded
 * @retval  LOADER_FAIL = 0	: Operation failed
 */
int Write(uint32_t Address, uint32_t Size, uint8_t* buffer) {
240005e4:	b580      	push	{r7, lr}
240005e6:	b084      	sub	sp, #16
240005e8:	af00      	add	r7, sp, #0
240005ea:	60f8      	str	r0, [r7, #12]
240005ec:	60b9      	str	r1, [r7, #8]
240005ee:	607a      	str	r2, [r7, #4]

	HAL_ResumeTick();
240005f0:	f001 fe62 	bl	240022b8 <HAL_ResumeTick>

    if( QSPI_AutoPollingMemReady() != HAL_OK)
240005f4:	f000 fd20 	bl	24001038 <QSPI_AutoPollingMemReady>
240005f8:	4603      	mov	r3, r0
240005fa:	2b00      	cmp	r3, #0
240005fc:	d003      	beq.n	24000606 <Write+0x22>
    {
        HAL_SuspendTick();
240005fe:	f001 fe4b 	bl	24002298 <HAL_SuspendTick>
        return LOADER_FAIL;
24000602:	2300      	movs	r3, #0
24000604:	e024      	b.n	24000650 <Write+0x6c>
    }

	if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
24000606:	4814      	ldr	r0, [pc, #80]	; (24000658 <Write+0x74>)
24000608:	f006 f9d7 	bl	240069ba <HAL_QSPI_Abort>
2400060c:	4603      	mov	r3, r0
2400060e:	2b00      	cmp	r3, #0
24000610:	d003      	beq.n	2400061a <Write+0x36>
	{
		HAL_SuspendTick();
24000612:	f001 fe41 	bl	24002298 <HAL_SuspendTick>
		return LOADER_FAIL;
24000616:	2300      	movs	r3, #0
24000618:	e01a      	b.n	24000650 <Write+0x6c>
	}


	if (CSP_QSPI_WriteMemory((uint8_t*) buffer, (Address & (0x0fffffff)),Size) != HAL_OK)
2400061a:	68fb      	ldr	r3, [r7, #12]
2400061c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
24000620:	68ba      	ldr	r2, [r7, #8]
24000622:	4619      	mov	r1, r3
24000624:	6878      	ldr	r0, [r7, #4]
24000626:	f001 f857 	bl	240016d8 <CSP_QSPI_WriteMemory>
2400062a:	4603      	mov	r3, r0
2400062c:	2b00      	cmp	r3, #0
2400062e:	d003      	beq.n	24000638 <Write+0x54>
	{
		HAL_SuspendTick();
24000630:	f001 fe32 	bl	24002298 <HAL_SuspendTick>
		return LOADER_FAIL;
24000634:	2300      	movs	r3, #0
24000636:	e00b      	b.n	24000650 <Write+0x6c>
	}

    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
24000638:	f000 ff9a 	bl	24001570 <CSP_QSPI_EnableMemoryMappedMode>
2400063c:	4603      	mov	r3, r0
2400063e:	2b00      	cmp	r3, #0
24000640:	d003      	beq.n	2400064a <Write+0x66>
    {
        HAL_SuspendTick();
24000642:	f001 fe29 	bl	24002298 <HAL_SuspendTick>
        return LOADER_FAIL;
24000646:	2300      	movs	r3, #0
24000648:	e002      	b.n	24000650 <Write+0x6c>
    }

	HAL_SuspendTick();
2400064a:	f001 fe25 	bl	24002298 <HAL_SuspendTick>
	return LOADER_OK;
2400064e:	2301      	movs	r3, #1
}
24000650:	4618      	mov	r0, r3
24000652:	3710      	adds	r7, #16
24000654:	46bd      	mov	sp, r7
24000656:	bd80      	pop	{r7, pc}
24000658:	240004d8 	.word	0x240004d8

2400065c <SectorErase>:
 * @param   EraseStartAddress :  erase start address
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1		: Operation succeeded
 * @retval  LOADER_FAIL = 0	: Operation failed
 */
int SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
2400065c:	b580      	push	{r7, lr}
2400065e:	b082      	sub	sp, #8
24000660:	af00      	add	r7, sp, #0
24000662:	6078      	str	r0, [r7, #4]
24000664:	6039      	str	r1, [r7, #0]

	HAL_ResumeTick();
24000666:	f001 fe27 	bl	240022b8 <HAL_ResumeTick>

    if( QSPI_AutoPollingMemReady() != HAL_OK)
2400066a:	f000 fce5 	bl	24001038 <QSPI_AutoPollingMemReady>
2400066e:	4603      	mov	r3, r0
24000670:	2b00      	cmp	r3, #0
24000672:	d003      	beq.n	2400067c <SectorErase+0x20>
    {
        HAL_SuspendTick();
24000674:	f001 fe10 	bl	24002298 <HAL_SuspendTick>
        return LOADER_FAIL;
24000678:	2300      	movs	r3, #0
2400067a:	e020      	b.n	240006be <SectorErase+0x62>
    }

	if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
2400067c:	4812      	ldr	r0, [pc, #72]	; (240006c8 <SectorErase+0x6c>)
2400067e:	f006 f99c 	bl	240069ba <HAL_QSPI_Abort>
24000682:	4603      	mov	r3, r0
24000684:	2b00      	cmp	r3, #0
24000686:	d003      	beq.n	24000690 <SectorErase+0x34>
	{
		HAL_SuspendTick();
24000688:	f001 fe06 	bl	24002298 <HAL_SuspendTick>
		return LOADER_FAIL;
2400068c:	2300      	movs	r3, #0
2400068e:	e016      	b.n	240006be <SectorErase+0x62>
	}


	if (CSP_QSPI_EraseSector(EraseStartAddress, EraseEndAddress) != HAL_OK)
24000690:	6839      	ldr	r1, [r7, #0]
24000692:	6878      	ldr	r0, [r7, #4]
24000694:	f001 f910 	bl	240018b8 <CSP_QSPI_EraseSector>
24000698:	4603      	mov	r3, r0
2400069a:	2b00      	cmp	r3, #0
2400069c:	d003      	beq.n	240006a6 <SectorErase+0x4a>
	{
		HAL_SuspendTick();
2400069e:	f001 fdfb 	bl	24002298 <HAL_SuspendTick>
		return LOADER_FAIL;
240006a2:	2300      	movs	r3, #0
240006a4:	e00b      	b.n	240006be <SectorErase+0x62>
	}

    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
240006a6:	f000 ff63 	bl	24001570 <CSP_QSPI_EnableMemoryMappedMode>
240006aa:	4603      	mov	r3, r0
240006ac:	2b00      	cmp	r3, #0
240006ae:	d003      	beq.n	240006b8 <SectorErase+0x5c>
    {
        HAL_SuspendTick();
240006b0:	f001 fdf2 	bl	24002298 <HAL_SuspendTick>
        return LOADER_FAIL;
240006b4:	2300      	movs	r3, #0
240006b6:	e002      	b.n	240006be <SectorErase+0x62>
    }

	HAL_SuspendTick();
240006b8:	f001 fdee 	bl	24002298 <HAL_SuspendTick>
	return LOADER_OK;
240006bc:	2301      	movs	r3, #1
}
240006be:	4618      	mov	r0, r3
240006c0:	3708      	adds	r7, #8
240006c2:	46bd      	mov	sp, r7
240006c4:	bd80      	pop	{r7, pc}
240006c6:	bf00      	nop
240006c8:	240004d8 	.word	0x240004d8

240006cc <MassErase>:
 *      none
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int MassErase(void) {
240006cc:	b580      	push	{r7, lr}
240006ce:	af00      	add	r7, sp, #0

	HAL_ResumeTick();
240006d0:	f001 fdf2 	bl	240022b8 <HAL_ResumeTick>

    if( QSPI_AutoPollingMemReady() != HAL_OK)
240006d4:	f000 fcb0 	bl	24001038 <QSPI_AutoPollingMemReady>
240006d8:	4603      	mov	r3, r0
240006da:	2b00      	cmp	r3, #0
240006dc:	d003      	beq.n	240006e6 <MassErase+0x1a>
    {
        HAL_SuspendTick();
240006de:	f001 fddb 	bl	24002298 <HAL_SuspendTick>
        return LOADER_FAIL;
240006e2:	2300      	movs	r3, #0
240006e4:	e01e      	b.n	24000724 <MassErase+0x58>
    }

	if(HAL_QSPI_Abort(&hqspi) != HAL_OK)
240006e6:	4810      	ldr	r0, [pc, #64]	; (24000728 <MassErase+0x5c>)
240006e8:	f006 f967 	bl	240069ba <HAL_QSPI_Abort>
240006ec:	4603      	mov	r3, r0
240006ee:	2b00      	cmp	r3, #0
240006f0:	d003      	beq.n	240006fa <MassErase+0x2e>
	{
		HAL_SuspendTick();
240006f2:	f001 fdd1 	bl	24002298 <HAL_SuspendTick>
		return LOADER_FAIL;
240006f6:	2300      	movs	r3, #0
240006f8:	e014      	b.n	24000724 <MassErase+0x58>
	}


	if (CSP_QSPI_Erase_Chip() != HAL_OK)
240006fa:	f000 fef3 	bl	240014e4 <CSP_QSPI_Erase_Chip>
240006fe:	4603      	mov	r3, r0
24000700:	2b00      	cmp	r3, #0
24000702:	d003      	beq.n	2400070c <MassErase+0x40>
	{
		 HAL_SuspendTick();
24000704:	f001 fdc8 	bl	24002298 <HAL_SuspendTick>
		return LOADER_FAIL;
24000708:	2300      	movs	r3, #0
2400070a:	e00b      	b.n	24000724 <MassErase+0x58>
	}

    if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
2400070c:	f000 ff30 	bl	24001570 <CSP_QSPI_EnableMemoryMappedMode>
24000710:	4603      	mov	r3, r0
24000712:	2b00      	cmp	r3, #0
24000714:	d003      	beq.n	2400071e <MassErase+0x52>
    {
        HAL_SuspendTick();
24000716:	f001 fdbf 	bl	24002298 <HAL_SuspendTick>
        return LOADER_FAIL;
2400071a:	2300      	movs	r3, #0
2400071c:	e002      	b.n	24000724 <MassErase+0x58>
    }

	HAL_SuspendTick();
2400071e:	f001 fdbb 	bl	24002298 <HAL_SuspendTick>
	return LOADER_OK;
24000722:	2301      	movs	r3, #1
}
24000724:	4618      	mov	r0, r3
24000726:	bd80      	pop	{r7, pc}
24000728:	240004d8 	.word	0x240004d8

2400072c <CheckSum>:
 *      InitVal       : Initial CRC value
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
2400072c:	b480      	push	{r7}
2400072e:	b089      	sub	sp, #36	; 0x24
24000730:	af00      	add	r7, sp, #0
24000732:	60f8      	str	r0, [r7, #12]
24000734:	60b9      	str	r1, [r7, #8]
24000736:	607a      	str	r2, [r7, #4]
	uint8_t missalignementAddress = StartAddress % 4;
24000738:	68fb      	ldr	r3, [r7, #12]
2400073a:	b2db      	uxtb	r3, r3
2400073c:	f003 0303 	and.w	r3, r3, #3
24000740:	77fb      	strb	r3, [r7, #31]
	uint8_t missalignementSize = Size;
24000742:	68bb      	ldr	r3, [r7, #8]
24000744:	77bb      	strb	r3, [r7, #30]
	int cnt;
	uint32_t Val;

	StartAddress -= StartAddress % 4;
24000746:	68fb      	ldr	r3, [r7, #12]
24000748:	f023 0303 	bic.w	r3, r3, #3
2400074c:	60fb      	str	r3, [r7, #12]
	Size += (Size % 4 == 0) ? 0 : 4 - (Size % 4);
2400074e:	68bb      	ldr	r3, [r7, #8]
24000750:	f003 0303 	and.w	r3, r3, #3
24000754:	2b00      	cmp	r3, #0
24000756:	d005      	beq.n	24000764 <CheckSum+0x38>
24000758:	68bb      	ldr	r3, [r7, #8]
2400075a:	f003 0303 	and.w	r3, r3, #3
2400075e:	f1c3 0304 	rsb	r3, r3, #4
24000762:	e000      	b.n	24000766 <CheckSum+0x3a>
24000764:	2300      	movs	r3, #0
24000766:	68ba      	ldr	r2, [r7, #8]
24000768:	4413      	add	r3, r2
2400076a:	60bb      	str	r3, [r7, #8]

	for (cnt = 0; cnt < Size; cnt += 4) {
2400076c:	2300      	movs	r3, #0
2400076e:	61bb      	str	r3, [r7, #24]
24000770:	e0af      	b.n	240008d2 <CheckSum+0x1a6>
		Val = *(uint32_t*) StartAddress;
24000772:	68fb      	ldr	r3, [r7, #12]
24000774:	681b      	ldr	r3, [r3, #0]
24000776:	617b      	str	r3, [r7, #20]
		if (missalignementAddress) {
24000778:	7ffb      	ldrb	r3, [r7, #31]
2400077a:	2b00      	cmp	r3, #0
2400077c:	d03e      	beq.n	240007fc <CheckSum+0xd0>
			switch (missalignementAddress) {
2400077e:	7ffb      	ldrb	r3, [r7, #31]
24000780:	2b02      	cmp	r3, #2
24000782:	d01d      	beq.n	240007c0 <CheckSum+0x94>
24000784:	2b03      	cmp	r3, #3
24000786:	d02d      	beq.n	240007e4 <CheckSum+0xb8>
24000788:	2b01      	cmp	r3, #1
2400078a:	f040 809c 	bne.w	240008c6 <CheckSum+0x19a>
			case 1:
				InitVal += (uint8_t) (Val >> 8 & 0xff);
2400078e:	697b      	ldr	r3, [r7, #20]
24000790:	0a1b      	lsrs	r3, r3, #8
24000792:	b2db      	uxtb	r3, r3
24000794:	461a      	mov	r2, r3
24000796:	687b      	ldr	r3, [r7, #4]
24000798:	4413      	add	r3, r2
2400079a:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 16 & 0xff);
2400079c:	697b      	ldr	r3, [r7, #20]
2400079e:	0c1b      	lsrs	r3, r3, #16
240007a0:	b2db      	uxtb	r3, r3
240007a2:	461a      	mov	r2, r3
240007a4:	687b      	ldr	r3, [r7, #4]
240007a6:	4413      	add	r3, r2
240007a8:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 24 & 0xff);
240007aa:	697b      	ldr	r3, [r7, #20]
240007ac:	0e1b      	lsrs	r3, r3, #24
240007ae:	b2db      	uxtb	r3, r3
240007b0:	461a      	mov	r2, r3
240007b2:	687b      	ldr	r3, [r7, #4]
240007b4:	4413      	add	r3, r2
240007b6:	607b      	str	r3, [r7, #4]
				missalignementAddress -= 1;
240007b8:	7ffb      	ldrb	r3, [r7, #31]
240007ba:	3b01      	subs	r3, #1
240007bc:	77fb      	strb	r3, [r7, #31]
				break;
240007be:	e082      	b.n	240008c6 <CheckSum+0x19a>
			case 2:
				InitVal += (uint8_t) (Val >> 16 & 0xff);
240007c0:	697b      	ldr	r3, [r7, #20]
240007c2:	0c1b      	lsrs	r3, r3, #16
240007c4:	b2db      	uxtb	r3, r3
240007c6:	461a      	mov	r2, r3
240007c8:	687b      	ldr	r3, [r7, #4]
240007ca:	4413      	add	r3, r2
240007cc:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 24 & 0xff);
240007ce:	697b      	ldr	r3, [r7, #20]
240007d0:	0e1b      	lsrs	r3, r3, #24
240007d2:	b2db      	uxtb	r3, r3
240007d4:	461a      	mov	r2, r3
240007d6:	687b      	ldr	r3, [r7, #4]
240007d8:	4413      	add	r3, r2
240007da:	607b      	str	r3, [r7, #4]
				missalignementAddress -= 2;
240007dc:	7ffb      	ldrb	r3, [r7, #31]
240007de:	3b02      	subs	r3, #2
240007e0:	77fb      	strb	r3, [r7, #31]
				break;
240007e2:	e070      	b.n	240008c6 <CheckSum+0x19a>
			case 3:
				InitVal += (uint8_t) (Val >> 24 & 0xff);
240007e4:	697b      	ldr	r3, [r7, #20]
240007e6:	0e1b      	lsrs	r3, r3, #24
240007e8:	b2db      	uxtb	r3, r3
240007ea:	461a      	mov	r2, r3
240007ec:	687b      	ldr	r3, [r7, #4]
240007ee:	4413      	add	r3, r2
240007f0:	607b      	str	r3, [r7, #4]
				missalignementAddress -= 3;
240007f2:	7ffb      	ldrb	r3, [r7, #31]
240007f4:	3b03      	subs	r3, #3
240007f6:	77fb      	strb	r3, [r7, #31]
				break;
240007f8:	bf00      	nop
240007fa:	e064      	b.n	240008c6 <CheckSum+0x19a>
			}
		} else if ((Size - missalignementSize) % 4 && (Size - cnt) <= 4) {
240007fc:	7fbb      	ldrb	r3, [r7, #30]
240007fe:	68ba      	ldr	r2, [r7, #8]
24000800:	1ad3      	subs	r3, r2, r3
24000802:	f003 0303 	and.w	r3, r3, #3
24000806:	2b00      	cmp	r3, #0
24000808:	d042      	beq.n	24000890 <CheckSum+0x164>
2400080a:	69bb      	ldr	r3, [r7, #24]
2400080c:	68ba      	ldr	r2, [r7, #8]
2400080e:	1ad3      	subs	r3, r2, r3
24000810:	2b04      	cmp	r3, #4
24000812:	d83d      	bhi.n	24000890 <CheckSum+0x164>
			switch (Size - missalignementSize) {
24000814:	7fbb      	ldrb	r3, [r7, #30]
24000816:	68ba      	ldr	r2, [r7, #8]
24000818:	1ad3      	subs	r3, r2, r3
2400081a:	2b02      	cmp	r3, #2
2400081c:	d01c      	beq.n	24000858 <CheckSum+0x12c>
2400081e:	2b03      	cmp	r3, #3
24000820:	d02b      	beq.n	2400087a <CheckSum+0x14e>
24000822:	2b01      	cmp	r3, #1
24000824:	d000      	beq.n	24000828 <CheckSum+0xfc>
			case 3:
				InitVal += (uint8_t) Val;
				missalignementSize -= 3;
				break;
			}
		} else {
24000826:	e04e      	b.n	240008c6 <CheckSum+0x19a>
				InitVal += (uint8_t) Val;
24000828:	697b      	ldr	r3, [r7, #20]
2400082a:	b2db      	uxtb	r3, r3
2400082c:	461a      	mov	r2, r3
2400082e:	687b      	ldr	r3, [r7, #4]
24000830:	4413      	add	r3, r2
24000832:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 8 & 0xff);
24000834:	697b      	ldr	r3, [r7, #20]
24000836:	0a1b      	lsrs	r3, r3, #8
24000838:	b2db      	uxtb	r3, r3
2400083a:	461a      	mov	r2, r3
2400083c:	687b      	ldr	r3, [r7, #4]
2400083e:	4413      	add	r3, r2
24000840:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 16 & 0xff);
24000842:	697b      	ldr	r3, [r7, #20]
24000844:	0c1b      	lsrs	r3, r3, #16
24000846:	b2db      	uxtb	r3, r3
24000848:	461a      	mov	r2, r3
2400084a:	687b      	ldr	r3, [r7, #4]
2400084c:	4413      	add	r3, r2
2400084e:	607b      	str	r3, [r7, #4]
				missalignementSize -= 1;
24000850:	7fbb      	ldrb	r3, [r7, #30]
24000852:	3b01      	subs	r3, #1
24000854:	77bb      	strb	r3, [r7, #30]
				break;
24000856:	e01a      	b.n	2400088e <CheckSum+0x162>
				InitVal += (uint8_t) Val;
24000858:	697b      	ldr	r3, [r7, #20]
2400085a:	b2db      	uxtb	r3, r3
2400085c:	461a      	mov	r2, r3
2400085e:	687b      	ldr	r3, [r7, #4]
24000860:	4413      	add	r3, r2
24000862:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val >> 8 & 0xff);
24000864:	697b      	ldr	r3, [r7, #20]
24000866:	0a1b      	lsrs	r3, r3, #8
24000868:	b2db      	uxtb	r3, r3
2400086a:	461a      	mov	r2, r3
2400086c:	687b      	ldr	r3, [r7, #4]
2400086e:	4413      	add	r3, r2
24000870:	607b      	str	r3, [r7, #4]
				missalignementSize -= 2;
24000872:	7fbb      	ldrb	r3, [r7, #30]
24000874:	3b02      	subs	r3, #2
24000876:	77bb      	strb	r3, [r7, #30]
				break;
24000878:	e009      	b.n	2400088e <CheckSum+0x162>
				InitVal += (uint8_t) Val;
2400087a:	697b      	ldr	r3, [r7, #20]
2400087c:	b2db      	uxtb	r3, r3
2400087e:	461a      	mov	r2, r3
24000880:	687b      	ldr	r3, [r7, #4]
24000882:	4413      	add	r3, r2
24000884:	607b      	str	r3, [r7, #4]
				missalignementSize -= 3;
24000886:	7fbb      	ldrb	r3, [r7, #30]
24000888:	3b03      	subs	r3, #3
2400088a:	77bb      	strb	r3, [r7, #30]
				break;
2400088c:	bf00      	nop
		} else {
2400088e:	e01a      	b.n	240008c6 <CheckSum+0x19a>
			InitVal += (uint8_t) Val;
24000890:	697b      	ldr	r3, [r7, #20]
24000892:	b2db      	uxtb	r3, r3
24000894:	461a      	mov	r2, r3
24000896:	687b      	ldr	r3, [r7, #4]
24000898:	4413      	add	r3, r2
2400089a:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val >> 8 & 0xff);
2400089c:	697b      	ldr	r3, [r7, #20]
2400089e:	0a1b      	lsrs	r3, r3, #8
240008a0:	b2db      	uxtb	r3, r3
240008a2:	461a      	mov	r2, r3
240008a4:	687b      	ldr	r3, [r7, #4]
240008a6:	4413      	add	r3, r2
240008a8:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val >> 16 & 0xff);
240008aa:	697b      	ldr	r3, [r7, #20]
240008ac:	0c1b      	lsrs	r3, r3, #16
240008ae:	b2db      	uxtb	r3, r3
240008b0:	461a      	mov	r2, r3
240008b2:	687b      	ldr	r3, [r7, #4]
240008b4:	4413      	add	r3, r2
240008b6:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val >> 24 & 0xff);
240008b8:	697b      	ldr	r3, [r7, #20]
240008ba:	0e1b      	lsrs	r3, r3, #24
240008bc:	b2db      	uxtb	r3, r3
240008be:	461a      	mov	r2, r3
240008c0:	687b      	ldr	r3, [r7, #4]
240008c2:	4413      	add	r3, r2
240008c4:	607b      	str	r3, [r7, #4]
		}
		StartAddress += 4;
240008c6:	68fb      	ldr	r3, [r7, #12]
240008c8:	3304      	adds	r3, #4
240008ca:	60fb      	str	r3, [r7, #12]
	for (cnt = 0; cnt < Size; cnt += 4) {
240008cc:	69bb      	ldr	r3, [r7, #24]
240008ce:	3304      	adds	r3, #4
240008d0:	61bb      	str	r3, [r7, #24]
240008d2:	69bb      	ldr	r3, [r7, #24]
240008d4:	68ba      	ldr	r2, [r7, #8]
240008d6:	429a      	cmp	r2, r3
240008d8:	f63f af4b 	bhi.w	24000772 <CheckSum+0x46>
	}

	return (InitVal);
240008dc:	687b      	ldr	r3, [r7, #4]
}
240008de:	4618      	mov	r0, r3
240008e0:	3724      	adds	r7, #36	; 0x24
240008e2:	46bd      	mov	sp, r7
240008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
240008e8:	4770      	bx	lr

240008ea <Verify>:
 * outputs   :
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size,uint32_t missalignement){
240008ea:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
240008ee:	b088      	sub	sp, #32
240008f0:	af00      	add	r7, sp, #0
240008f2:	60f8      	str	r0, [r7, #12]
240008f4:	60b9      	str	r1, [r7, #8]
240008f6:	607a      	str	r2, [r7, #4]
240008f8:	603b      	str	r3, [r7, #0]

	HAL_ResumeTick();
240008fa:	f001 fcdd 	bl	240022b8 <HAL_ResumeTick>
	uint32_t VerifiedData = 0, InitVal = 0;
240008fe:	2300      	movs	r3, #0
24000900:	61fb      	str	r3, [r7, #28]
24000902:	2300      	movs	r3, #0
24000904:	61bb      	str	r3, [r7, #24]
	uint64_t checksum;
	Size *= 4;
24000906:	687b      	ldr	r3, [r7, #4]
24000908:	009b      	lsls	r3, r3, #2
2400090a:	607b      	str	r3, [r7, #4]

	if (CSP_QSPI_EnableMemoryMappedMode() != HAL_OK)
2400090c:	f000 fe30 	bl	24001570 <CSP_QSPI_EnableMemoryMappedMode>
24000910:	4603      	mov	r3, r0
24000912:	2b00      	cmp	r3, #0
24000914:	d006      	beq.n	24000924 <Verify+0x3a>
	{
		HAL_SuspendTick();
24000916:	f001 fcbf 	bl	24002298 <HAL_SuspendTick>
		return LOADER_FAIL;
2400091a:	f04f 0b00 	mov.w	fp, #0
2400091e:	f04f 0c00 	mov.w	ip, #0
24000922:	e045      	b.n	240009b0 <Verify+0xc6>
	}

	checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
24000924:	683b      	ldr	r3, [r7, #0]
24000926:	f003 020f 	and.w	r2, r3, #15
2400092a:	68fb      	ldr	r3, [r7, #12]
2400092c:	18d0      	adds	r0, r2, r3
			Size - ((missalignement >> 16) & 0xF), InitVal);
2400092e:	683b      	ldr	r3, [r7, #0]
24000930:	0c1b      	lsrs	r3, r3, #16
24000932:	f003 030f 	and.w	r3, r3, #15
	checksum = CheckSum((uint32_t) MemoryAddr + (missalignement & 0xf),
24000936:	687a      	ldr	r2, [r7, #4]
24000938:	1ad3      	subs	r3, r2, r3
2400093a:	69ba      	ldr	r2, [r7, #24]
2400093c:	4619      	mov	r1, r3
2400093e:	f7ff fef5 	bl	2400072c <CheckSum>
24000942:	4603      	mov	r3, r0
24000944:	f04f 0400 	mov.w	r4, #0
24000948:	e9c7 3404 	strd	r3, r4, [r7, #16]
	while (Size > VerifiedData) {
2400094c:	e021      	b.n	24000992 <Verify+0xa8>
		if (*(uint8_t*) MemoryAddr++
2400094e:	68fb      	ldr	r3, [r7, #12]
24000950:	1c5a      	adds	r2, r3, #1
24000952:	60fa      	str	r2, [r7, #12]
24000954:	781a      	ldrb	r2, [r3, #0]
				!= *((uint8_t*) RAMBufferAddr + VerifiedData)){
24000956:	69f9      	ldr	r1, [r7, #28]
24000958:	68bb      	ldr	r3, [r7, #8]
2400095a:	440b      	add	r3, r1
2400095c:	781b      	ldrb	r3, [r3, #0]
		if (*(uint8_t*) MemoryAddr++
2400095e:	429a      	cmp	r2, r3
24000960:	d014      	beq.n	2400098c <Verify+0xa2>
			HAL_SuspendTick();
24000962:	f001 fc99 	bl	24002298 <HAL_SuspendTick>
			return ((checksum << 32) + (MemoryAddr + VerifiedData));
24000966:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
2400096a:	f04f 0300 	mov.w	r3, #0
2400096e:	f04f 0400 	mov.w	r4, #0
24000972:	000c      	movs	r4, r1
24000974:	2300      	movs	r3, #0
24000976:	68f9      	ldr	r1, [r7, #12]
24000978:	69fa      	ldr	r2, [r7, #28]
2400097a:	440a      	add	r2, r1
2400097c:	4611      	mov	r1, r2
2400097e:	f04f 0200 	mov.w	r2, #0
24000982:	eb13 0b01 	adds.w	fp, r3, r1
24000986:	eb44 0c02 	adc.w	ip, r4, r2
2400098a:	e011      	b.n	240009b0 <Verify+0xc6>
		}
		VerifiedData++;
2400098c:	69fb      	ldr	r3, [r7, #28]
2400098e:	3301      	adds	r3, #1
24000990:	61fb      	str	r3, [r7, #28]
	while (Size > VerifiedData) {
24000992:	687a      	ldr	r2, [r7, #4]
24000994:	69fb      	ldr	r3, [r7, #28]
24000996:	429a      	cmp	r2, r3
24000998:	d8d9      	bhi.n	2400094e <Verify+0x64>
	}

	HAL_SuspendTick();
2400099a:	f001 fc7d 	bl	24002298 <HAL_SuspendTick>
	return (checksum << 32);
2400099e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
240009a2:	f04f 0b00 	mov.w	fp, #0
240009a6:	f04f 0c00 	mov.w	ip, #0
240009aa:	468c      	mov	ip, r1
240009ac:	f04f 0b00 	mov.w	fp, #0
240009b0:	465b      	mov	r3, fp
240009b2:	4664      	mov	r4, ip
}
240009b4:	4618      	mov	r0, r3
240009b6:	4621      	mov	r1, r4
240009b8:	3720      	adds	r7, #32
240009ba:	46bd      	mov	sp, r7
240009bc:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

240009c0 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
240009c0:	b580      	push	{r7, lr}
240009c2:	b08a      	sub	sp, #40	; 0x28
240009c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
240009c6:	f107 0314 	add.w	r3, r7, #20
240009ca:	2200      	movs	r2, #0
240009cc:	601a      	str	r2, [r3, #0]
240009ce:	605a      	str	r2, [r3, #4]
240009d0:	609a      	str	r2, [r3, #8]
240009d2:	60da      	str	r2, [r3, #12]
240009d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
240009d6:	4b31      	ldr	r3, [pc, #196]	; (24000a9c <MX_GPIO_Init+0xdc>)
240009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240009dc:	4a2f      	ldr	r2, [pc, #188]	; (24000a9c <MX_GPIO_Init+0xdc>)
240009de:	f043 0310 	orr.w	r3, r3, #16
240009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
240009e6:	4b2d      	ldr	r3, [pc, #180]	; (24000a9c <MX_GPIO_Init+0xdc>)
240009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240009ec:	f003 0310 	and.w	r3, r3, #16
240009f0:	613b      	str	r3, [r7, #16]
240009f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
240009f4:	4b29      	ldr	r3, [pc, #164]	; (24000a9c <MX_GPIO_Init+0xdc>)
240009f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
240009fa:	4a28      	ldr	r2, [pc, #160]	; (24000a9c <MX_GPIO_Init+0xdc>)
240009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24000a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000a04:	4b25      	ldr	r3, [pc, #148]	; (24000a9c <MX_GPIO_Init+0xdc>)
24000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
24000a0e:	60fb      	str	r3, [r7, #12]
24000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
24000a12:	4b22      	ldr	r3, [pc, #136]	; (24000a9c <MX_GPIO_Init+0xdc>)
24000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000a18:	4a20      	ldr	r2, [pc, #128]	; (24000a9c <MX_GPIO_Init+0xdc>)
24000a1a:	f043 0301 	orr.w	r3, r3, #1
24000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000a22:	4b1e      	ldr	r3, [pc, #120]	; (24000a9c <MX_GPIO_Init+0xdc>)
24000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000a28:	f003 0301 	and.w	r3, r3, #1
24000a2c:	60bb      	str	r3, [r7, #8]
24000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
24000a30:	4b1a      	ldr	r3, [pc, #104]	; (24000a9c <MX_GPIO_Init+0xdc>)
24000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000a36:	4a19      	ldr	r2, [pc, #100]	; (24000a9c <MX_GPIO_Init+0xdc>)
24000a38:	f043 0302 	orr.w	r3, r3, #2
24000a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000a40:	4b16      	ldr	r3, [pc, #88]	; (24000a9c <MX_GPIO_Init+0xdc>)
24000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000a46:	f003 0302 	and.w	r3, r3, #2
24000a4a:	607b      	str	r3, [r7, #4]
24000a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
24000a4e:	4b13      	ldr	r3, [pc, #76]	; (24000a9c <MX_GPIO_Init+0xdc>)
24000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000a54:	4a11      	ldr	r2, [pc, #68]	; (24000a9c <MX_GPIO_Init+0xdc>)
24000a56:	f043 0308 	orr.w	r3, r3, #8
24000a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000a5e:	4b0f      	ldr	r3, [pc, #60]	; (24000a9c <MX_GPIO_Init+0xdc>)
24000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000a64:	f003 0308 	and.w	r3, r3, #8
24000a68:	603b      	str	r3, [r7, #0]
24000a6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
24000a6c:	2201      	movs	r2, #1
24000a6e:	2102      	movs	r1, #2
24000a70:	480b      	ldr	r0, [pc, #44]	; (24000aa0 <MX_GPIO_Init+0xe0>)
24000a72:	f002 fe13 	bl	2400369c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D2_Pin;
24000a76:	2302      	movs	r3, #2
24000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
24000a7a:	2301      	movs	r3, #1
24000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
24000a7e:	2300      	movs	r3, #0
24000a80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000a82:	2303      	movs	r3, #3
24000a84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
24000a86:	f107 0314 	add.w	r3, r7, #20
24000a8a:	4619      	mov	r1, r3
24000a8c:	4804      	ldr	r0, [pc, #16]	; (24000aa0 <MX_GPIO_Init+0xe0>)
24000a8e:	f002 fb33 	bl	240030f8 <HAL_GPIO_Init>

}
24000a92:	bf00      	nop
24000a94:	3728      	adds	r7, #40	; 0x28
24000a96:	46bd      	mov	sp, r7
24000a98:	bd80      	pop	{r7, pc}
24000a9a:	bf00      	nop
24000a9c:	58024400 	.word	0x58024400
24000aa0:	58020000 	.word	0x58020000

24000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
24000aa4:	b580      	push	{r7, lr}
24000aa6:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
24000aaa:	b082      	sub	sp, #8
24000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
    uint8_t buffer_test[MEMORY_SECTOR_SIZE];

    uint32_t var = 0;
24000aae:	2300      	movs	r3, #0
24000ab0:	f241 0204 	movw	r2, #4100	; 0x1004
24000ab4:	443a      	add	r2, r7
24000ab6:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
24000ab8:	f001 fa8e 	bl	24001fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
24000abc:	f000 f8b4 	bl	24000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
24000ac0:	f7ff ff7e 	bl	240009c0 <MX_GPIO_Init>
  MX_QUADSPI_Init();
24000ac4:	f000 f968 	bl	24000d98 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */

      if( HAL_ERROR == CSP_QUADSPI_Init() )
24000ac8:	f000 fc84 	bl	240013d4 <CSP_QUADSPI_Init>
24000acc:	4603      	mov	r3, r0
24000ace:	2b01      	cmp	r3, #1
24000ad0:	d110      	bne.n	24000af4 <main+0x50>
      {
         while( 1UL )
         {
             HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
24000ad2:	2201      	movs	r2, #1
24000ad4:	2102      	movs	r1, #2
24000ad6:	4852      	ldr	r0, [pc, #328]	; (24000c20 <main+0x17c>)
24000ad8:	f002 fde0 	bl	2400369c <HAL_GPIO_WritePin>
             HAL_Delay(80);
24000adc:	2050      	movs	r0, #80	; 0x50
24000ade:	f001 fbb9 	bl	24002254 <HAL_Delay>
             HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
24000ae2:	2200      	movs	r2, #0
24000ae4:	2102      	movs	r1, #2
24000ae6:	484e      	ldr	r0, [pc, #312]	; (24000c20 <main+0x17c>)
24000ae8:	f002 fdd8 	bl	2400369c <HAL_GPIO_WritePin>
             HAL_Delay(80);
24000aec:	2050      	movs	r0, #80	; 0x50
24000aee:	f001 fbb1 	bl	24002254 <HAL_Delay>
             HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
24000af2:	e7ee      	b.n	24000ad2 <main+0x2e>
         }
      }

     for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
24000af4:	2300      	movs	r3, #0
24000af6:	f241 0204 	movw	r2, #4100	; 0x1004
24000afa:	443a      	add	r2, r7
24000afc:	6013      	str	r3, [r2, #0]
24000afe:	e019      	b.n	24000b34 <main+0x90>
         buffer_test[var] = (var & 0xff);
24000b00:	f241 0304 	movw	r3, #4100	; 0x1004
24000b04:	443b      	add	r3, r7
24000b06:	681b      	ldr	r3, [r3, #0]
24000b08:	b2d9      	uxtb	r1, r3
24000b0a:	4b46      	ldr	r3, [pc, #280]	; (24000c24 <main+0x180>)
24000b0c:	f241 0208 	movw	r2, #4104	; 0x1008
24000b10:	443a      	add	r2, r7
24000b12:	4413      	add	r3, r2
24000b14:	f241 0204 	movw	r2, #4100	; 0x1004
24000b18:	443a      	add	r2, r7
24000b1a:	6812      	ldr	r2, [r2, #0]
24000b1c:	4413      	add	r3, r2
24000b1e:	460a      	mov	r2, r1
24000b20:	701a      	strb	r2, [r3, #0]
     for (var = 0; var < MEMORY_SECTOR_SIZE; var++) {
24000b22:	f241 0304 	movw	r3, #4100	; 0x1004
24000b26:	443b      	add	r3, r7
24000b28:	681b      	ldr	r3, [r3, #0]
24000b2a:	3301      	adds	r3, #1
24000b2c:	f241 0204 	movw	r2, #4100	; 0x1004
24000b30:	443a      	add	r2, r7
24000b32:	6013      	str	r3, [r2, #0]
24000b34:	f241 0304 	movw	r3, #4100	; 0x1004
24000b38:	443b      	add	r3, r7
24000b3a:	681b      	ldr	r3, [r3, #0]
24000b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24000b40:	d3de      	bcc.n	24000b00 <main+0x5c>
     }

     for (var = 0; var < SECTORS_COUNT; var++)
24000b42:	2300      	movs	r3, #0
24000b44:	f241 0204 	movw	r2, #4100	; 0x1004
24000b48:	443a      	add	r2, r7
24000b4a:	6013      	str	r3, [r2, #0]
24000b4c:	e04f      	b.n	24000bee <main+0x14a>
     {
         if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
24000b4e:	f241 0304 	movw	r3, #4100	; 0x1004
24000b52:	443b      	add	r3, r7
24000b54:	681b      	ldr	r3, [r3, #0]
24000b56:	031a      	lsls	r2, r3, #12
                 (var + 1) * MEMORY_SECTOR_SIZE - 1) != HAL_OK)
24000b58:	f241 0304 	movw	r3, #4100	; 0x1004
24000b5c:	443b      	add	r3, r7
24000b5e:	681b      	ldr	r3, [r3, #0]
24000b60:	3301      	adds	r3, #1
24000b62:	031b      	lsls	r3, r3, #12
         if (CSP_QSPI_EraseSector(var * MEMORY_SECTOR_SIZE,
24000b64:	3b01      	subs	r3, #1
24000b66:	4619      	mov	r1, r3
24000b68:	4610      	mov	r0, r2
24000b6a:	f000 fea5 	bl	240018b8 <CSP_QSPI_EraseSector>
24000b6e:	4603      	mov	r3, r0
24000b70:	2b00      	cmp	r3, #0
24000b72:	d010      	beq.n	24000b96 <main+0xf2>
         {
             while( 1UL )
             {
                 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
24000b74:	2201      	movs	r2, #1
24000b76:	2102      	movs	r1, #2
24000b78:	4829      	ldr	r0, [pc, #164]	; (24000c20 <main+0x17c>)
24000b7a:	f002 fd8f 	bl	2400369c <HAL_GPIO_WritePin>
                 HAL_Delay(80);
24000b7e:	2050      	movs	r0, #80	; 0x50
24000b80:	f001 fb68 	bl	24002254 <HAL_Delay>
                 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
24000b84:	2200      	movs	r2, #0
24000b86:	2102      	movs	r1, #2
24000b88:	4825      	ldr	r0, [pc, #148]	; (24000c20 <main+0x17c>)
24000b8a:	f002 fd87 	bl	2400369c <HAL_GPIO_WritePin>
                 HAL_Delay(80);
24000b8e:	2050      	movs	r0, #80	; 0x50
24000b90:	f001 fb60 	bl	24002254 <HAL_Delay>
                 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
24000b94:	e7ee      	b.n	24000b74 <main+0xd0>
             }
         }

         if (CSP_QSPI_WriteMemory(buffer_test, var * MEMORY_SECTOR_SIZE,
24000b96:	f241 0304 	movw	r3, #4100	; 0x1004
24000b9a:	443b      	add	r3, r7
24000b9c:	681b      	ldr	r3, [r3, #0]
24000b9e:	0319      	lsls	r1, r3, #12
24000ba0:	4b20      	ldr	r3, [pc, #128]	; (24000c24 <main+0x180>)
24000ba2:	f241 0208 	movw	r2, #4104	; 0x1008
24000ba6:	443a      	add	r2, r7
24000ba8:	4413      	add	r3, r2
24000baa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24000bae:	4618      	mov	r0, r3
24000bb0:	f000 fd92 	bl	240016d8 <CSP_QSPI_WriteMemory>
24000bb4:	4603      	mov	r3, r0
24000bb6:	2b00      	cmp	r3, #0
24000bb8:	d010      	beq.n	24000bdc <main+0x138>
                 sizeof(buffer_test)) != HAL_OK)
         {
             while( 1UL )
             {
                 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
24000bba:	2201      	movs	r2, #1
24000bbc:	2102      	movs	r1, #2
24000bbe:	4818      	ldr	r0, [pc, #96]	; (24000c20 <main+0x17c>)
24000bc0:	f002 fd6c 	bl	2400369c <HAL_GPIO_WritePin>
                 HAL_Delay(80);
24000bc4:	2050      	movs	r0, #80	; 0x50
24000bc6:	f001 fb45 	bl	24002254 <HAL_Delay>
                 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
24000bca:	2200      	movs	r2, #0
24000bcc:	2102      	movs	r1, #2
24000bce:	4814      	ldr	r0, [pc, #80]	; (24000c20 <main+0x17c>)
24000bd0:	f002 fd64 	bl	2400369c <HAL_GPIO_WritePin>
                 HAL_Delay(80);
24000bd4:	2050      	movs	r0, #80	; 0x50
24000bd6:	f001 fb3d 	bl	24002254 <HAL_Delay>
                 HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
24000bda:	e7ee      	b.n	24000bba <main+0x116>
     for (var = 0; var < SECTORS_COUNT; var++)
24000bdc:	f241 0304 	movw	r3, #4100	; 0x1004
24000be0:	443b      	add	r3, r7
24000be2:	681b      	ldr	r3, [r3, #0]
24000be4:	3301      	adds	r3, #1
24000be6:	f241 0204 	movw	r2, #4100	; 0x1004
24000bea:	443a      	add	r2, r7
24000bec:	6013      	str	r3, [r2, #0]
24000bee:	f241 0304 	movw	r3, #4100	; 0x1004
24000bf2:	443b      	add	r3, r7
24000bf4:	681b      	ldr	r3, [r3, #0]
24000bf6:	2b63      	cmp	r3, #99	; 0x63
24000bf8:	d9a9      	bls.n	24000b4e <main+0xaa>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
24000bfa:	2201      	movs	r2, #1
24000bfc:	2102      	movs	r1, #2
24000bfe:	4808      	ldr	r0, [pc, #32]	; (24000c20 <main+0x17c>)
24000c00:	f002 fd4c 	bl	2400369c <HAL_GPIO_WritePin>
      HAL_Delay(500);
24000c04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
24000c08:	f001 fb24 	bl	24002254 <HAL_Delay>
      HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
24000c0c:	2200      	movs	r2, #0
24000c0e:	2102      	movs	r1, #2
24000c10:	4803      	ldr	r0, [pc, #12]	; (24000c20 <main+0x17c>)
24000c12:	f002 fd43 	bl	2400369c <HAL_GPIO_WritePin>
      HAL_Delay(500);
24000c16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
24000c1a:	f001 fb1b 	bl	24002254 <HAL_Delay>
      HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
24000c1e:	e7ec      	b.n	24000bfa <main+0x156>
24000c20:	58020000 	.word	0x58020000
24000c24:	ffffeffc 	.word	0xffffeffc

24000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
24000c28:	b580      	push	{r7, lr}
24000c2a:	b0cc      	sub	sp, #304	; 0x130
24000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
24000c2e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24000c32:	224c      	movs	r2, #76	; 0x4c
24000c34:	2100      	movs	r1, #0
24000c36:	4618      	mov	r0, r3
24000c38:	f009 ffda 	bl	2400abf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
24000c3c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
24000c40:	2220      	movs	r2, #32
24000c42:	2100      	movs	r1, #0
24000c44:	4618      	mov	r0, r3
24000c46:	f009 ffd3 	bl	2400abf0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
24000c4a:	f107 0308 	add.w	r3, r7, #8
24000c4e:	4618      	mov	r0, r3
24000c50:	23bc      	movs	r3, #188	; 0xbc
24000c52:	461a      	mov	r2, r3
24000c54:	2100      	movs	r1, #0
24000c56:	f009 ffcb 	bl	2400abf0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
24000c5a:	2002      	movs	r0, #2
24000c5c:	f004 f8cc 	bl	24004df8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
24000c60:	1d3b      	adds	r3, r7, #4
24000c62:	2200      	movs	r2, #0
24000c64:	601a      	str	r2, [r3, #0]
24000c66:	4b46      	ldr	r3, [pc, #280]	; (24000d80 <SystemClock_Config+0x158>)
24000c68:	699b      	ldr	r3, [r3, #24]
24000c6a:	4a45      	ldr	r2, [pc, #276]	; (24000d80 <SystemClock_Config+0x158>)
24000c6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24000c70:	6193      	str	r3, [r2, #24]
24000c72:	4b43      	ldr	r3, [pc, #268]	; (24000d80 <SystemClock_Config+0x158>)
24000c74:	699b      	ldr	r3, [r3, #24]
24000c76:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
24000c7a:	1d3b      	adds	r3, r7, #4
24000c7c:	601a      	str	r2, [r3, #0]
24000c7e:	4b41      	ldr	r3, [pc, #260]	; (24000d84 <SystemClock_Config+0x15c>)
24000c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000c82:	4a40      	ldr	r2, [pc, #256]	; (24000d84 <SystemClock_Config+0x15c>)
24000c84:	f043 0301 	orr.w	r3, r3, #1
24000c88:	62d3      	str	r3, [r2, #44]	; 0x2c
24000c8a:	4b3e      	ldr	r3, [pc, #248]	; (24000d84 <SystemClock_Config+0x15c>)
24000c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24000c8e:	f003 0201 	and.w	r2, r3, #1
24000c92:	1d3b      	adds	r3, r7, #4
24000c94:	601a      	str	r2, [r3, #0]
24000c96:	1d3b      	adds	r3, r7, #4
24000c98:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
24000c9a:	bf00      	nop
24000c9c:	4b38      	ldr	r3, [pc, #224]	; (24000d80 <SystemClock_Config+0x158>)
24000c9e:	699b      	ldr	r3, [r3, #24]
24000ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24000ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24000ca8:	d1f8      	bne.n	24000c9c <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
24000caa:	2301      	movs	r3, #1
24000cac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
24000cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
24000cb4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
24000cb8:	2302      	movs	r3, #2
24000cba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
24000cbe:	2302      	movs	r3, #2
24000cc0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
24000cc4:	2305      	movs	r3, #5
24000cc6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
24000cca:	23c0      	movs	r3, #192	; 0xc0
24000ccc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
24000cd0:	2302      	movs	r3, #2
24000cd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 3;
24000cd6:	2303      	movs	r3, #3
24000cd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
24000cdc:	2302      	movs	r3, #2
24000cde:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
24000ce2:	2308      	movs	r3, #8
24000ce4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
24000ce8:	2300      	movs	r3, #0
24000cea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
24000cee:	2300      	movs	r3, #0
24000cf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
24000cf4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
24000cf8:	4618      	mov	r0, r3
24000cfa:	f006 fb1d 	bl	24007338 <HAL_RCC_OscConfig>
24000cfe:	4603      	mov	r3, r0
24000d00:	2b00      	cmp	r3, #0
24000d02:	d001      	beq.n	24000d08 <SystemClock_Config+0xe0>
  {
    Error_Handler();
24000d04:	f000 f840 	bl	24000d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
24000d08:	233f      	movs	r3, #63	; 0x3f
24000d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
24000d0e:	2303      	movs	r3, #3
24000d10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
24000d14:	2300      	movs	r3, #0
24000d16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
24000d1a:	2308      	movs	r3, #8
24000d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
24000d20:	2340      	movs	r3, #64	; 0x40
24000d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
24000d26:	2340      	movs	r3, #64	; 0x40
24000d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
24000d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
24000d30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
24000d34:	2340      	movs	r3, #64	; 0x40
24000d36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
24000d3a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
24000d3e:	2104      	movs	r1, #4
24000d40:	4618      	mov	r0, r3
24000d42:	f006 ff09 	bl	24007b58 <HAL_RCC_ClockConfig>
24000d46:	4603      	mov	r3, r0
24000d48:	2b00      	cmp	r3, #0
24000d4a:	d001      	beq.n	24000d50 <SystemClock_Config+0x128>
  {
    Error_Handler();
24000d4c:	f000 f81c 	bl	24000d88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
24000d50:	f107 0308 	add.w	r3, r7, #8
24000d54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
24000d58:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
24000d5a:	f107 0308 	add.w	r3, r7, #8
24000d5e:	2200      	movs	r2, #0
24000d60:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
24000d62:	f107 0308 	add.w	r3, r7, #8
24000d66:	4618      	mov	r0, r3
24000d68:	f007 fc50 	bl	2400860c <HAL_RCCEx_PeriphCLKConfig>
24000d6c:	4603      	mov	r3, r0
24000d6e:	2b00      	cmp	r3, #0
24000d70:	d001      	beq.n	24000d76 <SystemClock_Config+0x14e>
  {
    Error_Handler();
24000d72:	f000 f809 	bl	24000d88 <Error_Handler>
  }
}
24000d76:	bf00      	nop
24000d78:	f507 7798 	add.w	r7, r7, #304	; 0x130
24000d7c:	46bd      	mov	sp, r7
24000d7e:	bd80      	pop	{r7, pc}
24000d80:	58024800 	.word	0x58024800
24000d84:	58000400 	.word	0x58000400

24000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
24000d88:	b480      	push	{r7}
24000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
24000d8c:	bf00      	nop
24000d8e:	46bd      	mov	sp, r7
24000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
24000d94:	4770      	bx	lr
24000d96:	bf00      	nop

24000d98 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
24000d98:	b580      	push	{r7, lr}
24000d9a:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
24000d9c:	4b12      	ldr	r3, [pc, #72]	; (24000de8 <MX_QUADSPI_Init+0x50>)
24000d9e:	4a13      	ldr	r2, [pc, #76]	; (24000dec <MX_QUADSPI_Init+0x54>)
24000da0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
24000da2:	4b11      	ldr	r3, [pc, #68]	; (24000de8 <MX_QUADSPI_Init+0x50>)
24000da4:	2201      	movs	r2, #1
24000da6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 32;
24000da8:	4b0f      	ldr	r3, [pc, #60]	; (24000de8 <MX_QUADSPI_Init+0x50>)
24000daa:	2220      	movs	r2, #32
24000dac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
24000dae:	4b0e      	ldr	r3, [pc, #56]	; (24000de8 <MX_QUADSPI_Init+0x50>)
24000db0:	2200      	movs	r2, #0
24000db2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
24000db4:	4b0c      	ldr	r3, [pc, #48]	; (24000de8 <MX_QUADSPI_Init+0x50>)
24000db6:	2217      	movs	r2, #23
24000db8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
24000dba:	4b0b      	ldr	r3, [pc, #44]	; (24000de8 <MX_QUADSPI_Init+0x50>)
24000dbc:	2200      	movs	r2, #0
24000dbe:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
24000dc0:	4b09      	ldr	r3, [pc, #36]	; (24000de8 <MX_QUADSPI_Init+0x50>)
24000dc2:	2200      	movs	r2, #0
24000dc4:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
24000dc6:	4b08      	ldr	r3, [pc, #32]	; (24000de8 <MX_QUADSPI_Init+0x50>)
24000dc8:	2200      	movs	r2, #0
24000dca:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
24000dcc:	4b06      	ldr	r3, [pc, #24]	; (24000de8 <MX_QUADSPI_Init+0x50>)
24000dce:	2200      	movs	r2, #0
24000dd0:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
24000dd2:	4805      	ldr	r0, [pc, #20]	; (24000de8 <MX_QUADSPI_Init+0x50>)
24000dd4:	f004 fd28 	bl	24005828 <HAL_QSPI_Init>
24000dd8:	4603      	mov	r3, r0
24000dda:	2b00      	cmp	r3, #0
24000ddc:	d001      	beq.n	24000de2 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
24000dde:	f7ff ffd3 	bl	24000d88 <Error_Handler>
  }

}
24000de2:	bf00      	nop
24000de4:	bd80      	pop	{r7, pc}
24000de6:	bf00      	nop
24000de8:	240004d8 	.word	0x240004d8
24000dec:	52005000 	.word	0x52005000

24000df0 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
24000df0:	b580      	push	{r7, lr}
24000df2:	b08c      	sub	sp, #48	; 0x30
24000df4:	af00      	add	r7, sp, #0
24000df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
24000df8:	f107 031c 	add.w	r3, r7, #28
24000dfc:	2200      	movs	r2, #0
24000dfe:	601a      	str	r2, [r3, #0]
24000e00:	605a      	str	r2, [r3, #4]
24000e02:	609a      	str	r2, [r3, #8]
24000e04:	60da      	str	r2, [r3, #12]
24000e06:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
24000e08:	687b      	ldr	r3, [r7, #4]
24000e0a:	681b      	ldr	r3, [r3, #0]
24000e0c:	4a41      	ldr	r2, [pc, #260]	; (24000f14 <HAL_QSPI_MspInit+0x124>)
24000e0e:	4293      	cmp	r3, r2
24000e10:	d17c      	bne.n	24000f0c <HAL_QSPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
24000e12:	4b41      	ldr	r3, [pc, #260]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24000e18:	4a3f      	ldr	r2, [pc, #252]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
24000e1e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
24000e22:	4b3d      	ldr	r3, [pc, #244]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24000e28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24000e2c:	61bb      	str	r3, [r7, #24]
24000e2e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
24000e30:	4b39      	ldr	r3, [pc, #228]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000e36:	4a38      	ldr	r2, [pc, #224]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e38:	f043 0310 	orr.w	r3, r3, #16
24000e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000e40:	4b35      	ldr	r3, [pc, #212]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000e46:	f003 0310 	and.w	r3, r3, #16
24000e4a:	617b      	str	r3, [r7, #20]
24000e4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
24000e4e:	4b32      	ldr	r3, [pc, #200]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000e54:	4a30      	ldr	r2, [pc, #192]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e56:	f043 0302 	orr.w	r3, r3, #2
24000e5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000e5e:	4b2e      	ldr	r3, [pc, #184]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000e64:	f003 0302 	and.w	r3, r3, #2
24000e68:	613b      	str	r3, [r7, #16]
24000e6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
24000e6c:	4b2a      	ldr	r3, [pc, #168]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000e72:	4a29      	ldr	r2, [pc, #164]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e74:	f043 0308 	orr.w	r3, r3, #8
24000e78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24000e7c:	4b26      	ldr	r3, [pc, #152]	; (24000f18 <HAL_QSPI_MspInit+0x128>)
24000e7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24000e82:	f003 0308 	and.w	r3, r3, #8
24000e86:	60fb      	str	r3, [r7, #12]
24000e88:	68fb      	ldr	r3, [r7, #12]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
24000e8a:	2304      	movs	r3, #4
24000e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000e8e:	2302      	movs	r3, #2
24000e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000e92:	2300      	movs	r3, #0
24000e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000e96:	2303      	movs	r3, #3
24000e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24000e9a:	2309      	movs	r3, #9
24000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
24000e9e:	f107 031c 	add.w	r3, r7, #28
24000ea2:	4619      	mov	r1, r3
24000ea4:	481d      	ldr	r0, [pc, #116]	; (24000f1c <HAL_QSPI_MspInit+0x12c>)
24000ea6:	f002 f927 	bl	240030f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
24000eaa:	2304      	movs	r3, #4
24000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000eae:	2302      	movs	r3, #2
24000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000eb2:	2300      	movs	r3, #0
24000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000eb6:	2303      	movs	r3, #3
24000eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24000eba:	2309      	movs	r3, #9
24000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000ebe:	f107 031c 	add.w	r3, r7, #28
24000ec2:	4619      	mov	r1, r3
24000ec4:	4816      	ldr	r0, [pc, #88]	; (24000f20 <HAL_QSPI_MspInit+0x130>)
24000ec6:	f002 f917 	bl	240030f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
24000eca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
24000ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000ed0:	2302      	movs	r3, #2
24000ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000ed4:	2300      	movs	r3, #0
24000ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000ed8:	2303      	movs	r3, #3
24000eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
24000edc:	2309      	movs	r3, #9
24000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
24000ee0:	f107 031c 	add.w	r3, r7, #28
24000ee4:	4619      	mov	r1, r3
24000ee6:	480f      	ldr	r0, [pc, #60]	; (24000f24 <HAL_QSPI_MspInit+0x134>)
24000ee8:	f002 f906 	bl	240030f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
24000eec:	2340      	movs	r3, #64	; 0x40
24000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24000ef0:	2302      	movs	r3, #2
24000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24000ef4:	2300      	movs	r3, #0
24000ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24000ef8:	2303      	movs	r3, #3
24000efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
24000efc:	230a      	movs	r3, #10
24000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
24000f00:	f107 031c 	add.w	r3, r7, #28
24000f04:	4619      	mov	r1, r3
24000f06:	4806      	ldr	r0, [pc, #24]	; (24000f20 <HAL_QSPI_MspInit+0x130>)
24000f08:	f002 f8f6 	bl	240030f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
24000f0c:	bf00      	nop
24000f0e:	3730      	adds	r7, #48	; 0x30
24000f10:	46bd      	mov	sp, r7
24000f12:	bd80      	pop	{r7, pc}
24000f14:	52005000 	.word	0x52005000
24000f18:	58024400 	.word	0x58024400
24000f1c:	58021000 	.word	0x58021000
24000f20:	58020400 	.word	0x58020400
24000f24:	58020c00 	.word	0x58020c00

24000f28 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
24000f28:	b580      	push	{r7, lr}
24000f2a:	b082      	sub	sp, #8
24000f2c:	af00      	add	r7, sp, #0
24000f2e:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
24000f30:	687b      	ldr	r3, [r7, #4]
24000f32:	681b      	ldr	r3, [r3, #0]
24000f34:	4a0d      	ldr	r2, [pc, #52]	; (24000f6c <HAL_QSPI_MspDeInit+0x44>)
24000f36:	4293      	cmp	r3, r2
24000f38:	d114      	bne.n	24000f64 <HAL_QSPI_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
24000f3a:	4b0d      	ldr	r3, [pc, #52]	; (24000f70 <HAL_QSPI_MspDeInit+0x48>)
24000f3c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
24000f40:	4a0b      	ldr	r2, [pc, #44]	; (24000f70 <HAL_QSPI_MspDeInit+0x48>)
24000f42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
24000f46:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
24000f4a:	2104      	movs	r1, #4
24000f4c:	4809      	ldr	r0, [pc, #36]	; (24000f74 <HAL_QSPI_MspDeInit+0x4c>)
24000f4e:	f002 fa83 	bl	24003458 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
24000f52:	2144      	movs	r1, #68	; 0x44
24000f54:	4808      	ldr	r0, [pc, #32]	; (24000f78 <HAL_QSPI_MspDeInit+0x50>)
24000f56:	f002 fa7f 	bl	24003458 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13);
24000f5a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
24000f5e:	4807      	ldr	r0, [pc, #28]	; (24000f7c <HAL_QSPI_MspDeInit+0x54>)
24000f60:	f002 fa7a 	bl	24003458 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
24000f64:	bf00      	nop
24000f66:	3708      	adds	r7, #8
24000f68:	46bd      	mov	sp, r7
24000f6a:	bd80      	pop	{r7, pc}
24000f6c:	52005000 	.word	0x52005000
24000f70:	58024400 	.word	0x58024400
24000f74:	58021000 	.word	0x58021000
24000f78:	58020400 	.word	0x58020400
24000f7c:	58020c00 	.word	0x58020c00

24000f80 <QSPI_WriteEnable>:
/**
  * @brief  This function send a Write Enable and wait it is effective.
  * @retval None
  */
static uint8_t QSPI_WriteEnable(void)
{
24000f80:	b580      	push	{r7, lr}
24000f82:	b094      	sub	sp, #80	; 0x50
24000f84:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef     sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    if( QSPI_QPI_MODE == nCurrentMode )
24000f86:	4b2a      	ldr	r3, [pc, #168]	; (24001030 <QSPI_WriteEnable+0xb0>)
24000f88:	781b      	ldrb	r3, [r3, #0]
24000f8a:	2b04      	cmp	r3, #4
24000f8c:	d103      	bne.n	24000f96 <QSPI_WriteEnable+0x16>
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
24000f8e:	f44f 7340 	mov.w	r3, #768	; 0x300
24000f92:	633b      	str	r3, [r7, #48]	; 0x30
24000f94:	e002      	b.n	24000f9c <QSPI_WriteEnable+0x1c>
    }
    else
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24000f96:	f44f 7380 	mov.w	r3, #256	; 0x100
24000f9a:	633b      	str	r3, [r7, #48]	; 0x30
    }

    sCommand.Instruction       = WRITE_ENABLE_CMD;
24000f9c:	2306      	movs	r3, #6
24000f9e:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode       = QSPI_ADDRESS_NONE;
24000fa0:	2300      	movs	r3, #0
24000fa2:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24000fa4:	2300      	movs	r3, #0
24000fa6:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DataMode          = QSPI_DATA_NONE;
24000fa8:	2300      	movs	r3, #0
24000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DummyCycles       = 0U;
24000fac:	2300      	movs	r3, #0
24000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
24000fb0:	2300      	movs	r3, #0
24000fb2:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
24000fb4:	2300      	movs	r3, #0
24000fb6:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24000fb8:	2300      	movs	r3, #0
24000fba:	64fb      	str	r3, [r7, #76]	; 0x4c

    if( HAL_OK != HAL_QSPI_Command( &hqspi,
24000fbc:	f107 0318 	add.w	r3, r7, #24
24000fc0:	f241 3288 	movw	r2, #5000	; 0x1388
24000fc4:	4619      	mov	r1, r3
24000fc6:	481b      	ldr	r0, [pc, #108]	; (24001034 <QSPI_WriteEnable+0xb4>)
24000fc8:	f004 fe90 	bl	24005cec <HAL_QSPI_Command>
24000fcc:	4603      	mov	r3, r0
24000fce:	2b00      	cmp	r3, #0
24000fd0:	d001      	beq.n	24000fd6 <QSPI_WriteEnable+0x56>
                                    &sCommand,
                                    HAL_QPSI_TIMEOUT_DEFAULT_VALUE
                                  ) )
    {
        return QSPI_ERROR;
24000fd2:	2301      	movs	r3, #1
24000fd4:	e027      	b.n	24001026 <QSPI_WriteEnable+0xa6>
    }

    sConfig.Match           = MEMORY_FSR_WREN;
24000fd6:	2302      	movs	r3, #2
24000fd8:	603b      	str	r3, [r7, #0]
    sConfig.Mask            = MEMORY_FSR_WREN;
24000fda:	2302      	movs	r3, #2
24000fdc:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
24000fde:	2300      	movs	r3, #0
24000fe0:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1U;
24000fe2:	2301      	movs	r3, #1
24000fe4:	60fb      	str	r3, [r7, #12]
    sConfig.Interval        = 0x10U;
24000fe6:	2310      	movs	r3, #16
24000fe8:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
24000fea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24000fee:	617b      	str	r3, [r7, #20]

    if( QSPI_QPI_MODE == nCurrentMode )
24000ff0:	4b0f      	ldr	r3, [pc, #60]	; (24001030 <QSPI_WriteEnable+0xb0>)
24000ff2:	781b      	ldrb	r3, [r3, #0]
24000ff4:	2b04      	cmp	r3, #4
24000ff6:	d103      	bne.n	24001000 <QSPI_WriteEnable+0x80>
    {
        sCommand.DataMode       = QSPI_DATA_4_LINES;
24000ff8:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24000ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
24000ffe:	e002      	b.n	24001006 <QSPI_WriteEnable+0x86>
    }
    else
    {
        sCommand.DataMode       = QSPI_DATA_1_LINE;
24001000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24001004:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    sCommand.Instruction    = READ_STATUS_REG1_CMD;
24001006:	2305      	movs	r3, #5
24001008:	61bb      	str	r3, [r7, #24]

    if( HAL_OK != HAL_QSPI_AutoPolling( &hqspi,
2400100a:	463a      	mov	r2, r7
2400100c:	f107 0118 	add.w	r1, r7, #24
24001010:	f241 3388 	movw	r3, #5000	; 0x1388
24001014:	4807      	ldr	r0, [pc, #28]	; (24001034 <QSPI_WriteEnable+0xb4>)
24001016:	f005 fb15 	bl	24006644 <HAL_QSPI_AutoPolling>
2400101a:	4603      	mov	r3, r0
2400101c:	2b00      	cmp	r3, #0
2400101e:	d001      	beq.n	24001024 <QSPI_WriteEnable+0xa4>
                                        &sCommand,
                                        &sConfig,
                                        HAL_QPSI_TIMEOUT_DEFAULT_VALUE
                                      ) )
    {
        return QSPI_ERROR;
24001020:	2301      	movs	r3, #1
24001022:	e000      	b.n	24001026 <QSPI_WriteEnable+0xa6>
    }

    return QSPI_OK;
24001024:	2300      	movs	r3, #0
}
24001026:	4618      	mov	r0, r3
24001028:	3750      	adds	r7, #80	; 0x50
2400102a:	46bd      	mov	sp, r7
2400102c:	bd80      	pop	{r7, pc}
2400102e:	bf00      	nop
24001030:	240004a1 	.word	0x240004a1
24001034:	240004d8 	.word	0x240004d8

24001038 <QSPI_AutoPollingMemReady>:
/**
  * @brief  This function read the SR of the memory and wait the EOP.
  * @retval None
  */
uint8_t QSPI_AutoPollingMemReady(void)
{
24001038:	b580      	push	{r7, lr}
2400103a:	b094      	sub	sp, #80	; 0x50
2400103c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef     sCommand;
    QSPI_AutoPollingTypeDef sConfig;

    if( QSPI_SPI_MODE == nCurrentMode )
2400103e:	4b1f      	ldr	r3, [pc, #124]	; (240010bc <QSPI_AutoPollingMemReady+0x84>)
24001040:	781b      	ldrb	r3, [r3, #0]
24001042:	2b05      	cmp	r3, #5
24001044:	d106      	bne.n	24001054 <QSPI_AutoPollingMemReady+0x1c>
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24001046:	f44f 7380 	mov.w	r3, #256	; 0x100
2400104a:	633b      	str	r3, [r7, #48]	; 0x30
        sCommand.DataMode          = QSPI_DATA_1_LINE;
2400104c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24001050:	63fb      	str	r3, [r7, #60]	; 0x3c
24001052:	e005      	b.n	24001060 <QSPI_AutoPollingMemReady+0x28>
    }
    else
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
24001054:	f44f 7340 	mov.w	r3, #768	; 0x300
24001058:	633b      	str	r3, [r7, #48]	; 0x30
        sCommand.DataMode          = QSPI_DATA_4_LINES;
2400105a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
2400105e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Configure automatic polling mode to wait for memory ready */
    sCommand.Instruction       = READ_STATUS_REG1_CMD;
24001060:	2305      	movs	r3, #5
24001062:	61bb      	str	r3, [r7, #24]
    sCommand.AddressMode       = QSPI_ADDRESS_NONE;
24001064:	2300      	movs	r3, #0
24001066:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001068:	2300      	movs	r3, #0
2400106a:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DummyCycles       = 0U;
2400106c:	2300      	movs	r3, #0
2400106e:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
24001070:	2300      	movs	r3, #0
24001072:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
24001074:	2300      	movs	r3, #0
24001076:	64bb      	str	r3, [r7, #72]	; 0x48
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001078:	2300      	movs	r3, #0
2400107a:	64fb      	str	r3, [r7, #76]	; 0x4c

    sConfig.Match           = 0x00;
2400107c:	2300      	movs	r3, #0
2400107e:	603b      	str	r3, [r7, #0]
    sConfig.Mask            = MEMORY_FSR_BUSY;
24001080:	2301      	movs	r3, #1
24001082:	607b      	str	r3, [r7, #4]
    sConfig.MatchMode       = QSPI_MATCH_MODE_AND;
24001084:	2300      	movs	r3, #0
24001086:	613b      	str	r3, [r7, #16]
    sConfig.StatusBytesSize = 1;
24001088:	2301      	movs	r3, #1
2400108a:	60fb      	str	r3, [r7, #12]
    sConfig.Interval        = 0x10U;
2400108c:	2310      	movs	r3, #16
2400108e:	60bb      	str	r3, [r7, #8]
    sConfig.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
24001090:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24001094:	617b      	str	r3, [r7, #20]

    if( HAL_OK != HAL_QSPI_AutoPolling( &hqspi,
24001096:	463a      	mov	r2, r7
24001098:	f107 0118 	add.w	r1, r7, #24
2400109c:	f241 3388 	movw	r3, #5000	; 0x1388
240010a0:	4807      	ldr	r0, [pc, #28]	; (240010c0 <QSPI_AutoPollingMemReady+0x88>)
240010a2:	f005 facf 	bl	24006644 <HAL_QSPI_AutoPolling>
240010a6:	4603      	mov	r3, r0
240010a8:	2b00      	cmp	r3, #0
240010aa:	d001      	beq.n	240010b0 <QSPI_AutoPollingMemReady+0x78>
                                        &sCommand,
                                        &sConfig,
                                        HAL_QPSI_TIMEOUT_DEFAULT_VALUE
                                      ) )
    {
        return QSPI_ERROR;
240010ac:	2301      	movs	r3, #1
240010ae:	e000      	b.n	240010b2 <QSPI_AutoPollingMemReady+0x7a>
    }

    return QSPI_OK;
240010b0:	2300      	movs	r3, #0
}
240010b2:	4618      	mov	r0, r3
240010b4:	3750      	adds	r7, #80	; 0x50
240010b6:	46bd      	mov	sp, r7
240010b8:	bd80      	pop	{r7, pc}
240010ba:	bf00      	nop
240010bc:	240004a1 	.word	0x240004a1
240010c0:	240004d8 	.word	0x240004d8

240010c4 <QSPI_ResetMemory>:
/**
  * @brief  This function reset the QSPI memory.
  * @retval None
  */
static uint8_t QSPI_ResetMemory()
{
240010c4:	b580      	push	{r7, lr}
240010c6:	b08e      	sub	sp, #56	; 0x38
240010c8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;

    sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
240010ca:	f44f 7380 	mov.w	r3, #256	; 0x100
240010ce:	61bb      	str	r3, [r7, #24]
    sCommand.Instruction       = RESET_ENABLE_CMD;
240010d0:	2366      	movs	r3, #102	; 0x66
240010d2:	603b      	str	r3, [r7, #0]
    sCommand.AddressMode       = QSPI_ADDRESS_NONE;
240010d4:	2300      	movs	r3, #0
240010d6:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240010d8:	2300      	movs	r3, #0
240010da:	623b      	str	r3, [r7, #32]
    sCommand.DataMode          = QSPI_DATA_NONE;
240010dc:	2300      	movs	r3, #0
240010de:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles       = 0;
240010e0:	2300      	movs	r3, #0
240010e2:	617b      	str	r3, [r7, #20]
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
240010e4:	2300      	movs	r3, #0
240010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
240010e8:	2300      	movs	r3, #0
240010ea:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
240010ec:	2300      	movs	r3, #0
240010ee:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240010f0:	463b      	mov	r3, r7
240010f2:	f241 3288 	movw	r2, #5000	; 0x1388
240010f6:	4619      	mov	r1, r3
240010f8:	4820      	ldr	r0, [pc, #128]	; (2400117c <QSPI_ResetMemory+0xb8>)
240010fa:	f004 fdf7 	bl	24005cec <HAL_QSPI_Command>
240010fe:	4603      	mov	r3, r0
24001100:	2b00      	cmp	r3, #0
24001102:	d001      	beq.n	24001108 <QSPI_ResetMemory+0x44>
    {
        return QSPI_ERROR;
24001104:	2301      	movs	r3, #1
24001106:	e034      	b.n	24001172 <QSPI_ResetMemory+0xae>
    }

    sCommand.Instruction = RESET_MEMORY_CMD;
24001108:	2399      	movs	r3, #153	; 0x99
2400110a:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2400110c:	463b      	mov	r3, r7
2400110e:	f241 3288 	movw	r2, #5000	; 0x1388
24001112:	4619      	mov	r1, r3
24001114:	4819      	ldr	r0, [pc, #100]	; (2400117c <QSPI_ResetMemory+0xb8>)
24001116:	f004 fde9 	bl	24005cec <HAL_QSPI_Command>
2400111a:	4603      	mov	r3, r0
2400111c:	2b00      	cmp	r3, #0
2400111e:	d001      	beq.n	24001124 <QSPI_ResetMemory+0x60>
    {
        return QSPI_ERROR;
24001120:	2301      	movs	r3, #1
24001122:	e026      	b.n	24001172 <QSPI_ResetMemory+0xae>
    }

    sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
24001124:	f44f 7340 	mov.w	r3, #768	; 0x300
24001128:	61bb      	str	r3, [r7, #24]
    sCommand.Instruction       = RESET_ENABLE_CMD;
2400112a:	2366      	movs	r3, #102	; 0x66
2400112c:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2400112e:	463b      	mov	r3, r7
24001130:	f241 3288 	movw	r2, #5000	; 0x1388
24001134:	4619      	mov	r1, r3
24001136:	4811      	ldr	r0, [pc, #68]	; (2400117c <QSPI_ResetMemory+0xb8>)
24001138:	f004 fdd8 	bl	24005cec <HAL_QSPI_Command>
2400113c:	4603      	mov	r3, r0
2400113e:	2b00      	cmp	r3, #0
24001140:	d001      	beq.n	24001146 <QSPI_ResetMemory+0x82>
    {
        return QSPI_ERROR;
24001142:	2301      	movs	r3, #1
24001144:	e015      	b.n	24001172 <QSPI_ResetMemory+0xae>
    }

    sCommand.Instruction = RESET_MEMORY_CMD;
24001146:	2399      	movs	r3, #153	; 0x99
24001148:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2400114a:	463b      	mov	r3, r7
2400114c:	f241 3288 	movw	r2, #5000	; 0x1388
24001150:	4619      	mov	r1, r3
24001152:	480a      	ldr	r0, [pc, #40]	; (2400117c <QSPI_ResetMemory+0xb8>)
24001154:	f004 fdca 	bl	24005cec <HAL_QSPI_Command>
24001158:	4603      	mov	r3, r0
2400115a:	2b00      	cmp	r3, #0
2400115c:	d001      	beq.n	24001162 <QSPI_ResetMemory+0x9e>
    {
        return QSPI_ERROR;
2400115e:	2301      	movs	r3, #1
24001160:	e007      	b.n	24001172 <QSPI_ResetMemory+0xae>
    }

    if (QSPI_AutoPollingMemReady() != QSPI_OK)
24001162:	f7ff ff69 	bl	24001038 <QSPI_AutoPollingMemReady>
24001166:	4603      	mov	r3, r0
24001168:	2b00      	cmp	r3, #0
2400116a:	d001      	beq.n	24001170 <QSPI_ResetMemory+0xac>
    {
        return QSPI_ERROR;
2400116c:	2301      	movs	r3, #1
2400116e:	e000      	b.n	24001172 <QSPI_ResetMemory+0xae>
    }

    return QSPI_OK;
24001170:	2300      	movs	r3, #0
}
24001172:	4618      	mov	r0, r3
24001174:	3738      	adds	r7, #56	; 0x38
24001176:	46bd      	mov	sp, r7
24001178:	bd80      	pop	{r7, pc}
2400117a:	bf00      	nop
2400117c:	240004d8 	.word	0x240004d8

24001180 <QSPI_EnterQPI>:
  * @brief  This function enter the QSPI memory in QPI mode
  * @param  hqspi QSPI handle
  * @retval QSPI status
  */
static uint8_t QSPI_EnterQPI(void)
{
24001180:	b580      	push	{r7, lr}
24001182:	b090      	sub	sp, #64	; 0x40
24001184:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint8_t stareg2;

    stareg2 = QSPI_FLASH_ReadStatusReg(2U);
24001186:	2002      	movs	r0, #2
24001188:	f000 f85b 	bl	24001242 <QSPI_FLASH_ReadStatusReg>
2400118c:	4603      	mov	r3, r0
2400118e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    if((stareg2 & 0X02) == 0)
24001192:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
24001196:	f003 0302 	and.w	r3, r3, #2
2400119a:	2b00      	cmp	r3, #0
2400119c:	d10d      	bne.n	240011ba <QSPI_EnterQPI+0x3a>
    {
        QSPI_WriteEnable();
2400119e:	f7ff feef 	bl	24000f80 <QSPI_WriteEnable>
        stareg2 |= 1<<1;
240011a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
240011a6:	f043 0302 	orr.w	r3, r3, #2
240011aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        QSPI_FLASH_WriteStatusReg( 2U, stareg2 );
240011ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
240011b2:	4619      	mov	r1, r3
240011b4:	2002      	movs	r0, #2
240011b6:	f000 f8a3 	bl	24001300 <QSPI_FLASH_WriteStatusReg>
    }

    sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
240011ba:	f44f 7380 	mov.w	r3, #256	; 0x100
240011be:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction       = ENTER_QPI_MODE_CMD;
240011c0:	2338      	movs	r3, #56	; 0x38
240011c2:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode       = QSPI_ADDRESS_NONE;
240011c4:	2300      	movs	r3, #0
240011c6:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize       = QSPI_ADDRESS_8_BITS;
240011c8:	2300      	movs	r3, #0
240011ca:	613b      	str	r3, [r7, #16]
    sCommand.Address           = 0x000000;
240011cc:	2300      	movs	r3, #0
240011ce:	60bb      	str	r3, [r7, #8]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240011d0:	2300      	movs	r3, #0
240011d2:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DataMode          = QSPI_DATA_NONE;
240011d4:	2300      	movs	r3, #0
240011d6:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles       = 0;
240011d8:	2300      	movs	r3, #0
240011da:	61bb      	str	r3, [r7, #24]
    sCommand.NbData            = 0;
240011dc:	2300      	movs	r3, #0
240011de:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
240011e0:	2300      	movs	r3, #0
240011e2:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
240011e4:	2300      	movs	r3, #0
240011e6:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
240011e8:	2300      	movs	r3, #0
240011ea:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240011ec:	1d3b      	adds	r3, r7, #4
240011ee:	f241 3288 	movw	r2, #5000	; 0x1388
240011f2:	4619      	mov	r1, r3
240011f4:	480a      	ldr	r0, [pc, #40]	; (24001220 <QSPI_EnterQPI+0xa0>)
240011f6:	f004 fd79 	bl	24005cec <HAL_QSPI_Command>
240011fa:	4603      	mov	r3, r0
240011fc:	2b00      	cmp	r3, #0
240011fe:	d000      	beq.n	24001202 <QSPI_EnterQPI+0x82>
    {
        while(1)
24001200:	e7fe      	b.n	24001200 <QSPI_EnterQPI+0x80>
        {
        }
    }

    /* Configure automatic polling mode to wait the memory is ready */
    if(QSPI_AutoPollingMemReady() != QSPI_OK)
24001202:	f7ff ff19 	bl	24001038 <QSPI_AutoPollingMemReady>
24001206:	4603      	mov	r3, r0
24001208:	2b00      	cmp	r3, #0
2400120a:	d001      	beq.n	24001210 <QSPI_EnterQPI+0x90>
    {
        return QSPI_ERROR;
2400120c:	2301      	movs	r3, #1
2400120e:	e003      	b.n	24001218 <QSPI_EnterQPI+0x98>
    }

    nCurrentMode = QSPI_QPI_MODE;
24001210:	4b04      	ldr	r3, [pc, #16]	; (24001224 <QSPI_EnterQPI+0xa4>)
24001212:	2204      	movs	r2, #4
24001214:	701a      	strb	r2, [r3, #0]

    return QSPI_OK;
24001216:	2300      	movs	r3, #0
}
24001218:	4618      	mov	r0, r3
2400121a:	3740      	adds	r7, #64	; 0x40
2400121c:	46bd      	mov	sp, r7
2400121e:	bd80      	pop	{r7, pc}
24001220:	240004d8 	.word	0x240004d8
24001224:	240004a1 	.word	0x240004a1

24001228 <QSPI_Wait_Busy>:

static void QSPI_Wait_Busy(void)
{
24001228:	b580      	push	{r7, lr}
2400122a:	af00      	add	r7, sp, #0
    while((QSPI_FLASH_ReadStatusReg(1)&0x01)==0x01);
2400122c:	bf00      	nop
2400122e:	2001      	movs	r0, #1
24001230:	f000 f807 	bl	24001242 <QSPI_FLASH_ReadStatusReg>
24001234:	4603      	mov	r3, r0
24001236:	f003 0301 	and.w	r3, r3, #1
2400123a:	2b01      	cmp	r3, #1
2400123c:	d0f7      	beq.n	2400122e <QSPI_Wait_Busy+0x6>
}
2400123e:	bf00      	nop
24001240:	bd80      	pop	{r7, pc}

24001242 <QSPI_FLASH_ReadStatusReg>:
/**
  * @brief  None.
  * @retval None.
  */
static uint32_t QSPI_FLASH_ReadStatusReg(uint8_t reg)
{
24001242:	b580      	push	{r7, lr}
24001244:	b094      	sub	sp, #80	; 0x50
24001246:	af00      	add	r7, sp, #0
24001248:	4603      	mov	r3, r0
2400124a:	71fb      	strb	r3, [r7, #7]
    QSPI_CommandTypeDef sCommand;
    uint32_t Temp = 0;
2400124c:	2300      	movs	r3, #0
2400124e:	64fb      	str	r3, [r7, #76]	; 0x4c
    uint8_t pData[10];

    if(reg == 1)
24001250:	79fb      	ldrb	r3, [r7, #7]
24001252:	2b01      	cmp	r3, #1
24001254:	d102      	bne.n	2400125c <QSPI_FLASH_ReadStatusReg+0x1a>
    sCommand.Instruction       = READ_STATUS_REG1_CMD;
24001256:	2305      	movs	r3, #5
24001258:	617b      	str	r3, [r7, #20]
2400125a:	e00a      	b.n	24001272 <QSPI_FLASH_ReadStatusReg+0x30>
    else if(reg == 2)
2400125c:	79fb      	ldrb	r3, [r7, #7]
2400125e:	2b02      	cmp	r3, #2
24001260:	d102      	bne.n	24001268 <QSPI_FLASH_ReadStatusReg+0x26>
    sCommand.Instruction       = READ_STATUS_REG2_CMD;
24001262:	2335      	movs	r3, #53	; 0x35
24001264:	617b      	str	r3, [r7, #20]
24001266:	e004      	b.n	24001272 <QSPI_FLASH_ReadStatusReg+0x30>
    else if(reg == 3)
24001268:	79fb      	ldrb	r3, [r7, #7]
2400126a:	2b03      	cmp	r3, #3
2400126c:	d101      	bne.n	24001272 <QSPI_FLASH_ReadStatusReg+0x30>
    sCommand.Instruction       = READ_STATUS_REG3_CMD;
2400126e:	2315      	movs	r3, #21
24001270:	617b      	str	r3, [r7, #20]

    if( QSPI_SPI_MODE == nCurrentMode )
24001272:	4b21      	ldr	r3, [pc, #132]	; (240012f8 <QSPI_FLASH_ReadStatusReg+0xb6>)
24001274:	781b      	ldrb	r3, [r3, #0]
24001276:	2b05      	cmp	r3, #5
24001278:	d106      	bne.n	24001288 <QSPI_FLASH_ReadStatusReg+0x46>
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
2400127a:	f44f 7380 	mov.w	r3, #256	; 0x100
2400127e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sCommand.DataMode          = QSPI_DATA_1_LINE;
24001280:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24001284:	63bb      	str	r3, [r7, #56]	; 0x38
24001286:	e005      	b.n	24001294 <QSPI_FLASH_ReadStatusReg+0x52>
    }
    else
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
24001288:	f44f 7340 	mov.w	r3, #768	; 0x300
2400128c:	62fb      	str	r3, [r7, #44]	; 0x2c
        sCommand.DataMode          = QSPI_DATA_4_LINES;
2400128e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24001292:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
24001294:	f44f 6380 	mov.w	r3, #1024	; 0x400
24001298:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.AddressSize       = QSPI_ADDRESS_NONE;
2400129a:	2300      	movs	r3, #0
2400129c:	623b      	str	r3, [r7, #32]
    sCommand.Address           = 0x000000;
2400129e:	2300      	movs	r3, #0
240012a0:	61bb      	str	r3, [r7, #24]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
240012a2:	2300      	movs	r3, #0
240012a4:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DummyCycles       = 0;
240012a6:	2300      	movs	r3, #0
240012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.NbData            = 1;
240012aa:	2301      	movs	r3, #1
240012ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
240012ae:	2300      	movs	r3, #0
240012b0:	643b      	str	r3, [r7, #64]	; 0x40
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
240012b2:	2300      	movs	r3, #0
240012b4:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
240012b6:	2300      	movs	r3, #0
240012b8:	64bb      	str	r3, [r7, #72]	; 0x48

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240012ba:	f107 0314 	add.w	r3, r7, #20
240012be:	f241 3288 	movw	r2, #5000	; 0x1388
240012c2:	4619      	mov	r1, r3
240012c4:	480d      	ldr	r0, [pc, #52]	; (240012fc <QSPI_FLASH_ReadStatusReg+0xba>)
240012c6:	f004 fd11 	bl	24005cec <HAL_QSPI_Command>
240012ca:	4603      	mov	r3, r0
240012cc:	2b00      	cmp	r3, #0
240012ce:	d000      	beq.n	240012d2 <QSPI_FLASH_ReadStatusReg+0x90>
    {
        while(1)
240012d0:	e7fe      	b.n	240012d0 <QSPI_FLASH_ReadStatusReg+0x8e>
        {
        }
    }
    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240012d2:	f107 0308 	add.w	r3, r7, #8
240012d6:	f241 3288 	movw	r2, #5000	; 0x1388
240012da:	4619      	mov	r1, r3
240012dc:	4807      	ldr	r0, [pc, #28]	; (240012fc <QSPI_FLASH_ReadStatusReg+0xba>)
240012de:	f004 fe5b 	bl	24005f98 <HAL_QSPI_Receive>
240012e2:	4603      	mov	r3, r0
240012e4:	2b00      	cmp	r3, #0
240012e6:	d000      	beq.n	240012ea <QSPI_FLASH_ReadStatusReg+0xa8>
    {
        while(1)
240012e8:	e7fe      	b.n	240012e8 <QSPI_FLASH_ReadStatusReg+0xa6>
        {
        }
    }

    Temp = pData[0] ;
240012ea:	7a3b      	ldrb	r3, [r7, #8]
240012ec:	64fb      	str	r3, [r7, #76]	; 0x4c

    return Temp;
240012ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
240012f0:	4618      	mov	r0, r3
240012f2:	3750      	adds	r7, #80	; 0x50
240012f4:	46bd      	mov	sp, r7
240012f6:	bd80      	pop	{r7, pc}
240012f8:	240004a1 	.word	0x240004a1
240012fc:	240004d8 	.word	0x240004d8

24001300 <QSPI_FLASH_WriteStatusReg>:
/**
  * @brief  None.
  * @retval None.
  */
static uint32_t QSPI_FLASH_WriteStatusReg(uint8_t reg,uint8_t regvalue)
{
24001300:	b580      	push	{r7, lr}
24001302:	b090      	sub	sp, #64	; 0x40
24001304:	af00      	add	r7, sp, #0
24001306:	4603      	mov	r3, r0
24001308:	460a      	mov	r2, r1
2400130a:	71fb      	strb	r3, [r7, #7]
2400130c:	4613      	mov	r3, r2
2400130e:	71bb      	strb	r3, [r7, #6]
    QSPI_CommandTypeDef sCommand;

    if (QSPI_WriteEnable() != QSPI_OK)
24001310:	f7ff fe36 	bl	24000f80 <QSPI_WriteEnable>
24001314:	4603      	mov	r3, r0
24001316:	2b00      	cmp	r3, #0
24001318:	d001      	beq.n	2400131e <QSPI_FLASH_WriteStatusReg+0x1e>
    {
        return QSPI_ERROR;
2400131a:	2301      	movs	r3, #1
2400131c:	e052      	b.n	240013c4 <QSPI_FLASH_WriteStatusReg+0xc4>
    }

    if(reg == 1)
2400131e:	79fb      	ldrb	r3, [r7, #7]
24001320:	2b01      	cmp	r3, #1
24001322:	d102      	bne.n	2400132a <QSPI_FLASH_WriteStatusReg+0x2a>
    sCommand.Instruction       = WRITE_STATUS_REG1_CMD;
24001324:	2301      	movs	r3, #1
24001326:	60bb      	str	r3, [r7, #8]
24001328:	e00a      	b.n	24001340 <QSPI_FLASH_WriteStatusReg+0x40>
    else if(reg == 2)
2400132a:	79fb      	ldrb	r3, [r7, #7]
2400132c:	2b02      	cmp	r3, #2
2400132e:	d102      	bne.n	24001336 <QSPI_FLASH_WriteStatusReg+0x36>
    sCommand.Instruction       = WRITE_STATUS_REG2_CMD;
24001330:	2331      	movs	r3, #49	; 0x31
24001332:	60bb      	str	r3, [r7, #8]
24001334:	e004      	b.n	24001340 <QSPI_FLASH_WriteStatusReg+0x40>
    else if(reg == 3)
24001336:	79fb      	ldrb	r3, [r7, #7]
24001338:	2b03      	cmp	r3, #3
2400133a:	d101      	bne.n	24001340 <QSPI_FLASH_WriteStatusReg+0x40>
    sCommand.Instruction       = WRITE_STATUS_REG3_CMD;
2400133c:	2311      	movs	r3, #17
2400133e:	60bb      	str	r3, [r7, #8]

    if( QSPI_SPI_MODE == nCurrentMode )
24001340:	4b22      	ldr	r3, [pc, #136]	; (240013cc <QSPI_FLASH_WriteStatusReg+0xcc>)
24001342:	781b      	ldrb	r3, [r3, #0]
24001344:	2b05      	cmp	r3, #5
24001346:	d106      	bne.n	24001356 <QSPI_FLASH_WriteStatusReg+0x56>
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24001348:	f44f 7380 	mov.w	r3, #256	; 0x100
2400134c:	623b      	str	r3, [r7, #32]
        sCommand.DataMode          = QSPI_DATA_1_LINE;
2400134e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24001352:	62fb      	str	r3, [r7, #44]	; 0x2c
24001354:	e005      	b.n	24001362 <QSPI_FLASH_WriteStatusReg+0x62>
    }
    else
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
24001356:	f44f 7340 	mov.w	r3, #768	; 0x300
2400135a:	623b      	str	r3, [r7, #32]
        sCommand.DataMode          = QSPI_DATA_4_LINES;
2400135c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24001360:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    sCommand.AddressMode       = QSPI_ADDRESS_NONE;
24001362:	2300      	movs	r3, #0
24001364:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AddressSize       = QSPI_ADDRESS_8_BITS;
24001366:	2300      	movs	r3, #0
24001368:	617b      	str	r3, [r7, #20]
    sCommand.Address           = 0x000000;
2400136a:	2300      	movs	r3, #0
2400136c:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400136e:	2300      	movs	r3, #0
24001370:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DummyCycles       = 0;
24001372:	2300      	movs	r3, #0
24001374:	61fb      	str	r3, [r7, #28]
    sCommand.NbData            = 1;
24001376:	2301      	movs	r3, #1
24001378:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
2400137a:	2300      	movs	r3, #0
2400137c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
2400137e:	2300      	movs	r3, #0
24001380:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001382:	2300      	movs	r3, #0
24001384:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001386:	f107 0308 	add.w	r3, r7, #8
2400138a:	f241 3288 	movw	r2, #5000	; 0x1388
2400138e:	4619      	mov	r1, r3
24001390:	480f      	ldr	r0, [pc, #60]	; (240013d0 <QSPI_FLASH_WriteStatusReg+0xd0>)
24001392:	f004 fcab 	bl	24005cec <HAL_QSPI_Command>
24001396:	4603      	mov	r3, r0
24001398:	2b00      	cmp	r3, #0
2400139a:	d000      	beq.n	2400139e <QSPI_FLASH_WriteStatusReg+0x9e>
    {
        while(1)
2400139c:	e7fe      	b.n	2400139c <QSPI_FLASH_WriteStatusReg+0x9c>
        {
        }
    }
    if (HAL_QSPI_Transmit(&hqspi, &regvalue, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2400139e:	1dbb      	adds	r3, r7, #6
240013a0:	f241 3288 	movw	r2, #5000	; 0x1388
240013a4:	4619      	mov	r1, r3
240013a6:	480a      	ldr	r0, [pc, #40]	; (240013d0 <QSPI_FLASH_WriteStatusReg+0xd0>)
240013a8:	f004 fd64 	bl	24005e74 <HAL_QSPI_Transmit>
240013ac:	4603      	mov	r3, r0
240013ae:	2b00      	cmp	r3, #0
240013b0:	d000      	beq.n	240013b4 <QSPI_FLASH_WriteStatusReg+0xb4>
    {
        while(1)
240013b2:	e7fe      	b.n	240013b2 <QSPI_FLASH_WriteStatusReg+0xb2>
        {
        }
    }

    if (QSPI_AutoPollingMemReady() != QSPI_OK)
240013b4:	f7ff fe40 	bl	24001038 <QSPI_AutoPollingMemReady>
240013b8:	4603      	mov	r3, r0
240013ba:	2b00      	cmp	r3, #0
240013bc:	d001      	beq.n	240013c2 <QSPI_FLASH_WriteStatusReg+0xc2>
    {
        return QSPI_ERROR;
240013be:	2301      	movs	r3, #1
240013c0:	e000      	b.n	240013c4 <QSPI_FLASH_WriteStatusReg+0xc4>
    }

    return QSPI_OK;
240013c2:	2300      	movs	r3, #0
}
240013c4:	4618      	mov	r0, r3
240013c6:	3740      	adds	r7, #64	; 0x40
240013c8:	46bd      	mov	sp, r7
240013ca:	bd80      	pop	{r7, pc}
240013cc:	240004a1 	.word	0x240004a1
240013d0:	240004d8 	.word	0x240004d8

240013d4 <CSP_QUADSPI_Init>:
  * @brief  QUADSPI init function.
  * @param  None.
  * @retval None.
  */
uint8_t CSP_QUADSPI_Init(void)
{
240013d4:	b580      	push	{r7, lr}
240013d6:	b090      	sub	sp, #64	; 0x40
240013d8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint8_t u8Value;

    HAL_Delay(5);
240013da:	2005      	movs	r0, #5
240013dc:	f000 ff3a 	bl	24002254 <HAL_Delay>

    if (HAL_QSPI_DeInit(&hqspi) != HAL_OK)
240013e0:	483c      	ldr	r0, [pc, #240]	; (240014d4 <CSP_QUADSPI_Init+0x100>)
240013e2:	f004 fa95 	bl	24005910 <HAL_QSPI_DeInit>
240013e6:	4603      	mov	r3, r0
240013e8:	2b00      	cmp	r3, #0
240013ea:	d000      	beq.n	240013ee <CSP_QUADSPI_Init+0x1a>
    {
        while(1);
240013ec:	e7fe      	b.n	240013ec <CSP_QUADSPI_Init+0x18>
    }

    HAL_Delay(5);
240013ee:	2005      	movs	r0, #5
240013f0:	f000 ff30 	bl	24002254 <HAL_Delay>

    MX_QUADSPI_Init();
240013f4:	f7ff fcd0 	bl	24000d98 <MX_QUADSPI_Init>

    /* QSPI memory reset */
    if (QSPI_ResetMemory() != QSPI_OK)
240013f8:	f7ff fe64 	bl	240010c4 <QSPI_ResetMemory>
240013fc:	4603      	mov	r3, r0
240013fe:	2b00      	cmp	r3, #0
24001400:	d000      	beq.n	24001404 <CSP_QUADSPI_Init+0x30>
    {
        while(1);
24001402:	e7fe      	b.n	24001402 <CSP_QUADSPI_Init+0x2e>
    }

    HAL_Delay(5);
24001404:	2005      	movs	r0, #5
24001406:	f000 ff25 	bl	24002254 <HAL_Delay>

    u32DeviceID = QSPI_FLASH_ReadDeviceID();
2400140a:	f000 fb5b 	bl	24001ac4 <QSPI_FLASH_ReadDeviceID>
2400140e:	4602      	mov	r2, r0
24001410:	4b31      	ldr	r3, [pc, #196]	; (240014d8 <CSP_QUADSPI_Init+0x104>)
24001412:	601a      	str	r2, [r3, #0]
    if( u32DeviceID != 0xEF17UL )
24001414:	4b30      	ldr	r3, [pc, #192]	; (240014d8 <CSP_QUADSPI_Init+0x104>)
24001416:	681b      	ldr	r3, [r3, #0]
24001418:	f64e 7217 	movw	r2, #61207	; 0xef17
2400141c:	4293      	cmp	r3, r2
2400141e:	d000      	beq.n	24001422 <CSP_QUADSPI_Init+0x4e>
    {
        while(1);
24001420:	e7fe      	b.n	24001420 <CSP_QUADSPI_Init+0x4c>
    }

    u32Id = QSPI_FLASH_ReadID();
24001422:	f000 fb08 	bl	24001a36 <QSPI_FLASH_ReadID>
24001426:	4602      	mov	r2, r0
24001428:	4b2c      	ldr	r3, [pc, #176]	; (240014dc <CSP_QUADSPI_Init+0x108>)
2400142a:	601a      	str	r2, [r3, #0]
    if( u32Id != 0xEF4018UL )
2400142c:	4b2b      	ldr	r3, [pc, #172]	; (240014dc <CSP_QUADSPI_Init+0x108>)
2400142e:	681b      	ldr	r3, [r3, #0]
24001430:	4a2b      	ldr	r2, [pc, #172]	; (240014e0 <CSP_QUADSPI_Init+0x10c>)
24001432:	4293      	cmp	r3, r2
24001434:	d000      	beq.n	24001438 <CSP_QUADSPI_Init+0x64>
    {
        while(1);
24001436:	e7fe      	b.n	24001436 <CSP_QUADSPI_Init+0x62>
    }


    if (QSPI_AutoPollingMemReady() != HAL_OK)
24001438:	f7ff fdfe 	bl	24001038 <QSPI_AutoPollingMemReady>
2400143c:	4603      	mov	r3, r0
2400143e:	2b00      	cmp	r3, #0
24001440:	d000      	beq.n	24001444 <CSP_QUADSPI_Init+0x70>
    {
        while(1);
24001442:	e7fe      	b.n	24001442 <CSP_QUADSPI_Init+0x6e>
    }

    /* Enter QSPI memory in QSPI mode */
    if( QSPI_OK != QSPI_EnterQPI() )
24001444:	f7ff fe9c 	bl	24001180 <QSPI_EnterQPI>
24001448:	4603      	mov	r3, r0
2400144a:	2b00      	cmp	r3, #0
2400144c:	d000      	beq.n	24001450 <CSP_QUADSPI_Init+0x7c>
    {
        while(1);
2400144e:	e7fe      	b.n	2400144e <CSP_QUADSPI_Init+0x7a>
    }

    if (QSPI_WriteEnable() != QSPI_OK)
24001450:	f7ff fd96 	bl	24000f80 <QSPI_WriteEnable>
24001454:	4603      	mov	r3, r0
24001456:	2b00      	cmp	r3, #0
24001458:	d000      	beq.n	2400145c <CSP_QUADSPI_Init+0x88>
    {
        while(1);
2400145a:	e7fe      	b.n	2400145a <CSP_QUADSPI_Init+0x86>
    }

    /* Only use in QPI mode */
    sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
2400145c:	f44f 7340 	mov.w	r3, #768	; 0x300
24001460:	623b      	str	r3, [r7, #32]
    sCommand.Instruction       = SET_READ_PARAM_CMD;
24001462:	23c0      	movs	r3, #192	; 0xc0
24001464:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode       = QSPI_ADDRESS_NONE;
24001466:	2300      	movs	r3, #0
24001468:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AddressSize       = QSPI_ADDRESS_8_BITS;
2400146a:	2300      	movs	r3, #0
2400146c:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400146e:	2300      	movs	r3, #0
24001470:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode          = QSPI_DATA_4_LINES;
24001472:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24001476:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles       = 0U;
24001478:	2300      	movs	r3, #0
2400147a:	61fb      	str	r3, [r7, #28]
    sCommand.NbData            = 1U;
2400147c:	2301      	movs	r3, #1
2400147e:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
24001480:	2300      	movs	r3, #0
24001482:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
24001484:	2300      	movs	r3, #0
24001486:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001488:	2300      	movs	r3, #0
2400148a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* u8Value = (DummyClock(8)/2 -1)<<4 | ((WrapLenth(8)/8 - 1)&0x03); */
    u8Value = 0x30U;
2400148c:	2330      	movs	r3, #48	; 0x30
2400148e:	71fb      	strb	r3, [r7, #7]

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001490:	f107 0308 	add.w	r3, r7, #8
24001494:	f241 3288 	movw	r2, #5000	; 0x1388
24001498:	4619      	mov	r1, r3
2400149a:	480e      	ldr	r0, [pc, #56]	; (240014d4 <CSP_QUADSPI_Init+0x100>)
2400149c:	f004 fc26 	bl	24005cec <HAL_QSPI_Command>
240014a0:	4603      	mov	r3, r0
240014a2:	2b00      	cmp	r3, #0
240014a4:	d000      	beq.n	240014a8 <CSP_QUADSPI_Init+0xd4>
    {
        while(1);
240014a6:	e7fe      	b.n	240014a6 <CSP_QUADSPI_Init+0xd2>
    }

    if (HAL_QSPI_Transmit(&hqspi, &u8Value, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240014a8:	1dfb      	adds	r3, r7, #7
240014aa:	f241 3288 	movw	r2, #5000	; 0x1388
240014ae:	4619      	mov	r1, r3
240014b0:	4808      	ldr	r0, [pc, #32]	; (240014d4 <CSP_QUADSPI_Init+0x100>)
240014b2:	f004 fcdf 	bl	24005e74 <HAL_QSPI_Transmit>
240014b6:	4603      	mov	r3, r0
240014b8:	2b00      	cmp	r3, #0
240014ba:	d000      	beq.n	240014be <CSP_QUADSPI_Init+0xea>
    {
        while(1);
240014bc:	e7fe      	b.n	240014bc <CSP_QUADSPI_Init+0xe8>
    }

    if (QSPI_AutoPollingMemReady() != QSPI_OK)
240014be:	f7ff fdbb 	bl	24001038 <QSPI_AutoPollingMemReady>
240014c2:	4603      	mov	r3, r0
240014c4:	2b00      	cmp	r3, #0
240014c6:	d000      	beq.n	240014ca <CSP_QUADSPI_Init+0xf6>
    {
        while(1);
240014c8:	e7fe      	b.n	240014c8 <CSP_QUADSPI_Init+0xf4>
    }


    return HAL_OK;
240014ca:	2300      	movs	r3, #0
}
240014cc:	4618      	mov	r0, r3
240014ce:	3740      	adds	r7, #64	; 0x40
240014d0:	46bd      	mov	sp, r7
240014d2:	bd80      	pop	{r7, pc}
240014d4:	240004d8 	.word	0x240004d8
240014d8:	240004d0 	.word	0x240004d0
240014dc:	240004d4 	.word	0x240004d4
240014e0:	00ef4018 	.word	0x00ef4018

240014e4 <CSP_QSPI_Erase_Chip>:
/**
  * @brief  None
  * @retval None
  */
uint8_t CSP_QSPI_Erase_Chip(void)
{
240014e4:	b580      	push	{r7, lr}
240014e6:	b08e      	sub	sp, #56	; 0x38
240014e8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;

    if( QSPI_OK!= QSPI_WriteEnable() )
240014ea:	f7ff fd49 	bl	24000f80 <QSPI_WriteEnable>
240014ee:	4603      	mov	r3, r0
240014f0:	2b00      	cmp	r3, #0
240014f2:	d001      	beq.n	240014f8 <CSP_QSPI_Erase_Chip+0x14>
    {
        return QSPI_ERROR;
240014f4:	2301      	movs	r3, #1
240014f6:	e032      	b.n	2400155e <CSP_QSPI_Erase_Chip+0x7a>
    }

    QSPI_Wait_Busy();
240014f8:	f7ff fe96 	bl	24001228 <QSPI_Wait_Busy>

    if( QSPI_SPI_MODE == nCurrentMode )
240014fc:	4b1a      	ldr	r3, [pc, #104]	; (24001568 <CSP_QSPI_Erase_Chip+0x84>)
240014fe:	781b      	ldrb	r3, [r3, #0]
24001500:	2b05      	cmp	r3, #5
24001502:	d103      	bne.n	2400150c <CSP_QSPI_Erase_Chip+0x28>
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24001504:	f44f 7380 	mov.w	r3, #256	; 0x100
24001508:	61bb      	str	r3, [r7, #24]
2400150a:	e002      	b.n	24001512 <CSP_QSPI_Erase_Chip+0x2e>
    }
    else
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
2400150c:	f44f 7340 	mov.w	r3, #768	; 0x300
24001510:	61bb      	str	r3, [r7, #24]
    }

    sCommand.Instruction       = CHIP_ERASE_CMD;
24001512:	23c7      	movs	r3, #199	; 0xc7
24001514:	603b      	str	r3, [r7, #0]
    sCommand.AddressMode       = QSPI_ADDRESS_NONE;
24001516:	2300      	movs	r3, #0
24001518:	61fb      	str	r3, [r7, #28]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400151a:	2300      	movs	r3, #0
2400151c:	623b      	str	r3, [r7, #32]
    sCommand.DataMode          = QSPI_DATA_NONE;
2400151e:	2300      	movs	r3, #0
24001520:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles       = 0U;
24001522:	2300      	movs	r3, #0
24001524:	617b      	str	r3, [r7, #20]
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
24001526:	2300      	movs	r3, #0
24001528:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
2400152a:	2300      	movs	r3, #0
2400152c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
2400152e:	2300      	movs	r3, #0
24001530:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001532:	463b      	mov	r3, r7
24001534:	f241 3288 	movw	r2, #5000	; 0x1388
24001538:	4619      	mov	r1, r3
2400153a:	480c      	ldr	r0, [pc, #48]	; (2400156c <CSP_QSPI_Erase_Chip+0x88>)
2400153c:	f004 fbd6 	bl	24005cec <HAL_QSPI_Command>
24001540:	4603      	mov	r3, r0
24001542:	2b00      	cmp	r3, #0
24001544:	d001      	beq.n	2400154a <CSP_QSPI_Erase_Chip+0x66>
    {
        return QSPI_ERROR;
24001546:	2301      	movs	r3, #1
24001548:	e009      	b.n	2400155e <CSP_QSPI_Erase_Chip+0x7a>
    }

    QSPI_Wait_Busy();
2400154a:	f7ff fe6d 	bl	24001228 <QSPI_Wait_Busy>

    if (QSPI_AutoPollingMemReady() != QSPI_OK)
2400154e:	f7ff fd73 	bl	24001038 <QSPI_AutoPollingMemReady>
24001552:	4603      	mov	r3, r0
24001554:	2b00      	cmp	r3, #0
24001556:	d001      	beq.n	2400155c <CSP_QSPI_Erase_Chip+0x78>
    {
        return QSPI_ERROR;
24001558:	2301      	movs	r3, #1
2400155a:	e000      	b.n	2400155e <CSP_QSPI_Erase_Chip+0x7a>
    }
    return QSPI_OK;
2400155c:	2300      	movs	r3, #0
}
2400155e:	4618      	mov	r0, r3
24001560:	3738      	adds	r7, #56	; 0x38
24001562:	46bd      	mov	sp, r7
24001564:	bd80      	pop	{r7, pc}
24001566:	bf00      	nop
24001568:	240004a1 	.word	0x240004a1
2400156c:	240004d8 	.word	0x240004d8

24001570 <CSP_QSPI_EnableMemoryMappedMode>:
  * @brief  Configure the QSPI in memory-mapped mode   QPI/SPI && DTR(DDR)/Normal Mode
  * @param  DTRMode: w25qxx_DTRMode DTR mode ,w25qxx_NormalMode Normal mode
  * @retval QSPI memory status
  */
uint8_t CSP_QSPI_EnableMemoryMappedMode(void)
{
24001570:	b580      	push	{r7, lr}
24001572:	b090      	sub	sp, #64	; 0x40
24001574:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef      sCommand;
    QSPI_MemoryMappedTypeDef sMemMappedCfg;

    if( QSPI_QPI_MODE == nCurrentMode )
24001576:	4b28      	ldr	r3, [pc, #160]	; (24001618 <CSP_QSPI_EnableMemoryMappedMode+0xa8>)
24001578:	781b      	ldrb	r3, [r3, #0]
2400157a:	2b04      	cmp	r3, #4
2400157c:	d103      	bne.n	24001586 <CSP_QSPI_EnableMemoryMappedMode+0x16>
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
2400157e:	f44f 7340 	mov.w	r3, #768	; 0x300
24001582:	623b      	str	r3, [r7, #32]
24001584:	e002      	b.n	2400158c <CSP_QSPI_EnableMemoryMappedMode+0x1c>
    }
    else
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24001586:	f44f 7380 	mov.w	r3, #256	; 0x100
2400158a:	623b      	str	r3, [r7, #32]
    }

    /* Enable Memory-Mapped mode */
    sCommand.AddressMode        = QSPI_ADDRESS_4_LINES;
2400158c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24001590:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.Address            = 0U;
24001592:	2300      	movs	r3, #0
24001594:	60fb      	str	r3, [r7, #12]
    sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
24001596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400159a:	617b      	str	r3, [r7, #20]
    sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_4_LINES;
2400159c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
240015a0:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.AlternateBytes     = 0xEF;
240015a2:	23ef      	movs	r3, #239	; 0xef
240015a4:	613b      	str	r3, [r7, #16]
    sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
240015a6:	2300      	movs	r3, #0
240015a8:	61bb      	str	r3, [r7, #24]
    sCommand.DataMode           = QSPI_DATA_4_LINES;
240015aa:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
240015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
240015b0:	2300      	movs	r3, #0
240015b2:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode           = QSPI_SIOO_INST_ONLY_FIRST_CMD;
240015b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
240015b8:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( QSPI_DTR_MODE == nDTRMode )
240015ba:	4b18      	ldr	r3, [pc, #96]	; (2400161c <CSP_QSPI_EnableMemoryMappedMode+0xac>)
240015bc:	781b      	ldrb	r3, [r3, #0]
240015be:	2b06      	cmp	r3, #6
240015c0:	d107      	bne.n	240015d2 <CSP_QSPI_EnableMemoryMappedMode+0x62>
    {
        sCommand.Instruction     = QUAD_INOUT_FAST_READ_DTR_CMD;
240015c2:	23ed      	movs	r3, #237	; 0xed
240015c4:	60bb      	str	r3, [r7, #8]
        sCommand.DummyCycles     = DUMMY_CYCLES_READ_QUAD_DTR;
240015c6:	2304      	movs	r3, #4
240015c8:	61fb      	str	r3, [r7, #28]
        sCommand.DdrMode         = QSPI_DDR_MODE_ENABLE;
240015ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
240015ce:	637b      	str	r3, [r7, #52]	; 0x34
240015d0:	e00c      	b.n	240015ec <CSP_QSPI_EnableMemoryMappedMode+0x7c>
    }
    else
    {
        sCommand.Instruction     = QUAD_INOUT_FAST_READ_CMD_4BYTE;
240015d2:	23eb      	movs	r3, #235	; 0xeb
240015d4:	60bb      	str	r3, [r7, #8]

        if( QSPI_QPI_MODE == nCurrentMode )
240015d6:	4b10      	ldr	r3, [pc, #64]	; (24001618 <CSP_QSPI_EnableMemoryMappedMode+0xa8>)
240015d8:	781b      	ldrb	r3, [r3, #0]
240015da:	2b04      	cmp	r3, #4
240015dc:	d102      	bne.n	240015e4 <CSP_QSPI_EnableMemoryMappedMode+0x74>
        {
            sCommand.DummyCycles   = DUMMY_CYCLES_READ_QUAD;
240015de:	2306      	movs	r3, #6
240015e0:	61fb      	str	r3, [r7, #28]
240015e2:	e001      	b.n	240015e8 <CSP_QSPI_EnableMemoryMappedMode+0x78>
        }
        else
        {
            sCommand.DummyCycles   = DUMMY_CYCLES_READ_QUAD-2;
240015e4:	2304      	movs	r3, #4
240015e6:	61fb      	str	r3, [r7, #28]
        }

        sCommand.DdrMode         = QSPI_DDR_MODE_DISABLE;
240015e8:	2300      	movs	r3, #0
240015ea:	637b      	str	r3, [r7, #52]	; 0x34
    }

    sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
240015ec:	2300      	movs	r3, #0
240015ee:	607b      	str	r3, [r7, #4]
    sMemMappedCfg.TimeOutPeriod = 0U;
240015f0:	2300      	movs	r3, #0
240015f2:	603b      	str	r3, [r7, #0]

    /* Configure the memory mapped mode */
    if( HAL_QSPI_MemoryMapped(&hqspi, &sCommand, &sMemMappedCfg) != HAL_OK)
240015f4:	463a      	mov	r2, r7
240015f6:	f107 0308 	add.w	r3, r7, #8
240015fa:	4619      	mov	r1, r3
240015fc:	4808      	ldr	r0, [pc, #32]	; (24001620 <CSP_QSPI_EnableMemoryMappedMode+0xb0>)
240015fe:	f005 f910 	bl	24006822 <HAL_QSPI_MemoryMapped>
24001602:	4603      	mov	r3, r0
24001604:	2b00      	cmp	r3, #0
24001606:	d001      	beq.n	2400160c <CSP_QSPI_EnableMemoryMappedMode+0x9c>
    {
        return QSPI_ERROR;
24001608:	2301      	movs	r3, #1
2400160a:	e000      	b.n	2400160e <CSP_QSPI_EnableMemoryMappedMode+0x9e>
    }

    return QSPI_OK;
2400160c:	2300      	movs	r3, #0
}
2400160e:	4618      	mov	r0, r3
24001610:	3740      	adds	r7, #64	; 0x40
24001612:	46bd      	mov	sp, r7
24001614:	bd80      	pop	{r7, pc}
24001616:	bf00      	nop
24001618:	240004a1 	.word	0x240004a1
2400161c:	240004a0 	.word	0x240004a0
24001620:	240004d8 	.word	0x240004d8

24001624 <CSP_QSPI_Read>:
/**
  * @brief  None.
  * @retval None.
  */
uint8_t CSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
24001624:	b580      	push	{r7, lr}
24001626:	b092      	sub	sp, #72	; 0x48
24001628:	af00      	add	r7, sp, #0
2400162a:	60f8      	str	r0, [r7, #12]
2400162c:	60b9      	str	r1, [r7, #8]
2400162e:	607a      	str	r2, [r7, #4]
    QSPI_CommandTypeDef sCommand;

    if(Size == 0)
24001630:	687b      	ldr	r3, [r7, #4]
24001632:	2b00      	cmp	r3, #0
24001634:	d101      	bne.n	2400163a <CSP_QSPI_Read+0x16>
    {
        return QSPI_OK;
24001636:	2300      	movs	r3, #0
24001638:	e045      	b.n	240016c6 <CSP_QSPI_Read+0xa2>
    }

    if( QSPI_QPI_MODE == nCurrentMode)
2400163a:	4b25      	ldr	r3, [pc, #148]	; (240016d0 <CSP_QSPI_Read+0xac>)
2400163c:	781b      	ldrb	r3, [r3, #0]
2400163e:	2b04      	cmp	r3, #4
24001640:	d107      	bne.n	24001652 <CSP_QSPI_Read+0x2e>
    {
        sCommand.Instruction     = QUAD_INOUT_FAST_READ_CMD_4BYTE;
24001642:	23eb      	movs	r3, #235	; 0xeb
24001644:	613b      	str	r3, [r7, #16]
        sCommand.InstructionMode = QSPI_INSTRUCTION_4_LINES;
24001646:	f44f 7340 	mov.w	r3, #768	; 0x300
2400164a:	62bb      	str	r3, [r7, #40]	; 0x28
        sCommand.DummyCycles     = DUMMY_CYCLES_READ_QUAD;
2400164c:	2306      	movs	r3, #6
2400164e:	627b      	str	r3, [r7, #36]	; 0x24
24001650:	e006      	b.n	24001660 <CSP_QSPI_Read+0x3c>
    }
    else
    {
        sCommand.Instruction     = QUAD_INOUT_FAST_READ_CMD_4BYTE;
24001652:	23eb      	movs	r3, #235	; 0xeb
24001654:	613b      	str	r3, [r7, #16]
        sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
24001656:	f44f 7380 	mov.w	r3, #256	; 0x100
2400165a:	62bb      	str	r3, [r7, #40]	; 0x28
        sCommand.DummyCycles     = DUMMY_CYCLES_READ_QUAD-2;
2400165c:	2304      	movs	r3, #4
2400165e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    sCommand.Address           = ReadAddr;
24001660:	68bb      	ldr	r3, [r7, #8]
24001662:	617b      	str	r3, [r7, #20]
    sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
24001664:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24001668:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
2400166a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400166e:	61fb      	str	r3, [r7, #28]

    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
24001670:	f44f 4340 	mov.w	r3, #49152	; 0xc000
24001674:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.AlternateBytes    = 0xFF;
24001676:	23ff      	movs	r3, #255	; 0xff
24001678:	61bb      	str	r3, [r7, #24]
    sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
2400167a:	2300      	movs	r3, #0
2400167c:	623b      	str	r3, [r7, #32]

    sCommand.DataMode          = QSPI_DATA_4_LINES;
2400167e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24001682:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.NbData            = Size;
24001684:	687b      	ldr	r3, [r7, #4]
24001686:	63bb      	str	r3, [r7, #56]	; 0x38

    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
24001688:	2300      	movs	r3, #0
2400168a:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
2400168c:	2300      	movs	r3, #0
2400168e:	643b      	str	r3, [r7, #64]	; 0x40
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001690:	2300      	movs	r3, #0
24001692:	647b      	str	r3, [r7, #68]	; 0x44

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001694:	f107 0310 	add.w	r3, r7, #16
24001698:	f241 3288 	movw	r2, #5000	; 0x1388
2400169c:	4619      	mov	r1, r3
2400169e:	480d      	ldr	r0, [pc, #52]	; (240016d4 <CSP_QSPI_Read+0xb0>)
240016a0:	f004 fb24 	bl	24005cec <HAL_QSPI_Command>
240016a4:	4603      	mov	r3, r0
240016a6:	2b00      	cmp	r3, #0
240016a8:	d001      	beq.n	240016ae <CSP_QSPI_Read+0x8a>
    {
        return QSPI_ERROR;
240016aa:	2301      	movs	r3, #1
240016ac:	e00b      	b.n	240016c6 <CSP_QSPI_Read+0xa2>
    }

    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240016ae:	f241 3288 	movw	r2, #5000	; 0x1388
240016b2:	68f9      	ldr	r1, [r7, #12]
240016b4:	4807      	ldr	r0, [pc, #28]	; (240016d4 <CSP_QSPI_Read+0xb0>)
240016b6:	f004 fc6f 	bl	24005f98 <HAL_QSPI_Receive>
240016ba:	4603      	mov	r3, r0
240016bc:	2b00      	cmp	r3, #0
240016be:	d001      	beq.n	240016c4 <CSP_QSPI_Read+0xa0>
    {
        return QSPI_ERROR;
240016c0:	2301      	movs	r3, #1
240016c2:	e000      	b.n	240016c6 <CSP_QSPI_Read+0xa2>
    }

    return QSPI_OK;
240016c4:	2300      	movs	r3, #0
}
240016c6:	4618      	mov	r0, r3
240016c8:	3748      	adds	r7, #72	; 0x48
240016ca:	46bd      	mov	sp, r7
240016cc:	bd80      	pop	{r7, pc}
240016ce:	bf00      	nop
240016d0:	240004a1 	.word	0x240004a1
240016d4:	240004d8 	.word	0x240004d8

240016d8 <CSP_QSPI_WriteMemory>:
  * @param  WriteAddr Write start address
  * @param  Size Size of data to write.
  * @retval QSPI memory status
  */
uint8_t CSP_QSPI_WriteMemory(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
240016d8:	b580      	push	{r7, lr}
240016da:	b096      	sub	sp, #88	; 0x58
240016dc:	af00      	add	r7, sp, #0
240016de:	60f8      	str	r0, [r7, #12]
240016e0:	60b9      	str	r1, [r7, #8]
240016e2:	607a      	str	r2, [r7, #4]
    QSPI_CommandTypeDef sCommand;
    uint32_t u32EndAddr, u32CurrSize, u32CurrAddr;

    if(Size == 0)
240016e4:	687b      	ldr	r3, [r7, #4]
240016e6:	2b00      	cmp	r3, #0
240016e8:	d101      	bne.n	240016ee <CSP_QSPI_WriteMemory+0x16>
    {
        return QSPI_OK;
240016ea:	2300      	movs	r3, #0
240016ec:	e08c      	b.n	24001808 <CSP_QSPI_WriteMemory+0x130>
    }

    u32CurrAddr = 0;
240016ee:	2300      	movs	r3, #0
240016f0:	653b      	str	r3, [r7, #80]	; 0x50

    while (u32CurrAddr <= WriteAddr)
240016f2:	e003      	b.n	240016fc <CSP_QSPI_WriteMemory+0x24>
    {
        u32CurrAddr += MEMORY_PAGE_SIZE;
240016f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
240016f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
240016fa:	653b      	str	r3, [r7, #80]	; 0x50
    while (u32CurrAddr <= WriteAddr)
240016fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
240016fe:	68bb      	ldr	r3, [r7, #8]
24001700:	429a      	cmp	r2, r3
24001702:	d9f7      	bls.n	240016f4 <CSP_QSPI_WriteMemory+0x1c>
    }
    u32CurrSize = u32CurrAddr - WriteAddr;
24001704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
24001706:	68bb      	ldr	r3, [r7, #8]
24001708:	1ad3      	subs	r3, r2, r3
2400170a:	657b      	str	r3, [r7, #84]	; 0x54

    if (u32CurrSize > Size)
2400170c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
2400170e:	687b      	ldr	r3, [r7, #4]
24001710:	429a      	cmp	r2, r3
24001712:	d901      	bls.n	24001718 <CSP_QSPI_WriteMemory+0x40>
    {
        u32CurrSize = Size;
24001714:	687b      	ldr	r3, [r7, #4]
24001716:	657b      	str	r3, [r7, #84]	; 0x54
    }

    u32CurrAddr = WriteAddr;
24001718:	68bb      	ldr	r3, [r7, #8]
2400171a:	653b      	str	r3, [r7, #80]	; 0x50
    u32EndAddr = WriteAddr + Size;
2400171c:	68ba      	ldr	r2, [r7, #8]
2400171e:	687b      	ldr	r3, [r7, #4]
24001720:	4413      	add	r3, r2
24001722:	64fb      	str	r3, [r7, #76]	; 0x4c

    sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
24001724:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001728:	623b      	str	r3, [r7, #32]
    sCommand.DataMode          = QSPI_DATA_4_LINES;
2400172a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
2400172e:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DummyCycles       = 0U;
24001730:	2300      	movs	r3, #0
24001732:	62bb      	str	r3, [r7, #40]	; 0x28

    sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
24001734:	2300      	movs	r3, #0
24001736:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;
24001738:	2300      	movs	r3, #0
2400173a:	637b      	str	r3, [r7, #52]	; 0x34

    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
2400173c:	2300      	movs	r3, #0
2400173e:	643b      	str	r3, [r7, #64]	; 0x40
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
24001740:	2300      	movs	r3, #0
24001742:	647b      	str	r3, [r7, #68]	; 0x44
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001744:	2300      	movs	r3, #0
24001746:	64bb      	str	r3, [r7, #72]	; 0x48

    if( QSPI_SPI_MODE == nCurrentMode )
24001748:	4b31      	ldr	r3, [pc, #196]	; (24001810 <CSP_QSPI_WriteMemory+0x138>)
2400174a:	781b      	ldrb	r3, [r3, #0]
2400174c:	2b05      	cmp	r3, #5
2400174e:	d108      	bne.n	24001762 <CSP_QSPI_WriteMemory+0x8a>
    {
        sCommand.Instruction       = QUAD_INPUT_PAGE_PROG_CMD_4BYTE;
24001750:	2332      	movs	r3, #50	; 0x32
24001752:	617b      	str	r3, [r7, #20]
        sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24001754:	f44f 7380 	mov.w	r3, #256	; 0x100
24001758:	62fb      	str	r3, [r7, #44]	; 0x2c
        sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
2400175a:	f44f 6380 	mov.w	r3, #1024	; 0x400
2400175e:	633b      	str	r3, [r7, #48]	; 0x30
24001760:	e007      	b.n	24001772 <CSP_QSPI_WriteMemory+0x9a>
    }
    else
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
24001762:	f44f 7340 	mov.w	r3, #768	; 0x300
24001766:	62fb      	str	r3, [r7, #44]	; 0x2c
        sCommand.Instruction       = INPUT_PAGE_PROG_CMD_4BYTE;
24001768:	2302      	movs	r3, #2
2400176a:	617b      	str	r3, [r7, #20]
        sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
2400176c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24001770:	633b      	str	r3, [r7, #48]	; 0x30
    }

    do
    {
        sCommand.Address = u32CurrAddr;
24001772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
24001774:	61bb      	str	r3, [r7, #24]
        if(u32CurrSize == 0)
24001776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
24001778:	2b00      	cmp	r3, #0
2400177a:	d101      	bne.n	24001780 <CSP_QSPI_WriteMemory+0xa8>
        {
        return QSPI_OK;
2400177c:	2300      	movs	r3, #0
2400177e:	e043      	b.n	24001808 <CSP_QSPI_WriteMemory+0x130>
        }

        sCommand.NbData  = u32CurrSize;
24001780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
24001782:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (QSPI_WriteEnable() != QSPI_OK)
24001784:	f7ff fbfc 	bl	24000f80 <QSPI_WriteEnable>
24001788:	4603      	mov	r3, r0
2400178a:	2b00      	cmp	r3, #0
2400178c:	d001      	beq.n	24001792 <CSP_QSPI_WriteMemory+0xba>
        {
            return QSPI_ERROR;
2400178e:	2301      	movs	r3, #1
24001790:	e03a      	b.n	24001808 <CSP_QSPI_WriteMemory+0x130>
        }

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001792:	f107 0314 	add.w	r3, r7, #20
24001796:	f241 3288 	movw	r2, #5000	; 0x1388
2400179a:	4619      	mov	r1, r3
2400179c:	481d      	ldr	r0, [pc, #116]	; (24001814 <CSP_QSPI_WriteMemory+0x13c>)
2400179e:	f004 faa5 	bl	24005cec <HAL_QSPI_Command>
240017a2:	4603      	mov	r3, r0
240017a4:	2b00      	cmp	r3, #0
240017a6:	d001      	beq.n	240017ac <CSP_QSPI_WriteMemory+0xd4>
        {
            return QSPI_ERROR;
240017a8:	2301      	movs	r3, #1
240017aa:	e02d      	b.n	24001808 <CSP_QSPI_WriteMemory+0x130>
        }

        if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240017ac:	f241 3288 	movw	r2, #5000	; 0x1388
240017b0:	68f9      	ldr	r1, [r7, #12]
240017b2:	4818      	ldr	r0, [pc, #96]	; (24001814 <CSP_QSPI_WriteMemory+0x13c>)
240017b4:	f004 fb5e 	bl	24005e74 <HAL_QSPI_Transmit>
240017b8:	4603      	mov	r3, r0
240017ba:	2b00      	cmp	r3, #0
240017bc:	d001      	beq.n	240017c2 <CSP_QSPI_WriteMemory+0xea>
        {
            return QSPI_ERROR;
240017be:	2301      	movs	r3, #1
240017c0:	e022      	b.n	24001808 <CSP_QSPI_WriteMemory+0x130>
        }

        QSPI_Wait_Busy();
240017c2:	f7ff fd31 	bl	24001228 <QSPI_Wait_Busy>

        if (QSPI_AutoPollingMemReady() != QSPI_OK)
240017c6:	f7ff fc37 	bl	24001038 <QSPI_AutoPollingMemReady>
240017ca:	4603      	mov	r3, r0
240017cc:	2b00      	cmp	r3, #0
240017ce:	d001      	beq.n	240017d4 <CSP_QSPI_WriteMemory+0xfc>
        {
            return QSPI_ERROR;
240017d0:	2301      	movs	r3, #1
240017d2:	e019      	b.n	24001808 <CSP_QSPI_WriteMemory+0x130>
        }

        u32CurrAddr += u32CurrSize;
240017d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
240017d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240017d8:	4413      	add	r3, r2
240017da:	653b      	str	r3, [r7, #80]	; 0x50
        pData += u32CurrSize;
240017dc:	68fa      	ldr	r2, [r7, #12]
240017de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
240017e0:	4413      	add	r3, r2
240017e2:	60fb      	str	r3, [r7, #12]
        u32CurrSize = ((u32CurrAddr + MEMORY_PAGE_SIZE) > u32EndAddr) ? (u32EndAddr - u32CurrAddr) : MEMORY_PAGE_SIZE;
240017e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
240017e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
240017ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
240017ec:	429a      	cmp	r2, r3
240017ee:	d203      	bcs.n	240017f8 <CSP_QSPI_WriteMemory+0x120>
240017f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
240017f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
240017f4:	1ad3      	subs	r3, r2, r3
240017f6:	e001      	b.n	240017fc <CSP_QSPI_WriteMemory+0x124>
240017f8:	f44f 7380 	mov.w	r3, #256	; 0x100
240017fc:	657b      	str	r3, [r7, #84]	; 0x54
    } while (u32CurrAddr < u32EndAddr);
240017fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
24001800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
24001802:	429a      	cmp	r2, r3
24001804:	d3b5      	bcc.n	24001772 <CSP_QSPI_WriteMemory+0x9a>

    return QSPI_OK;
24001806:	2300      	movs	r3, #0
}
24001808:	4618      	mov	r0, r3
2400180a:	3758      	adds	r7, #88	; 0x58
2400180c:	46bd      	mov	sp, r7
2400180e:	bd80      	pop	{r7, pc}
24001810:	240004a1 	.word	0x240004a1
24001814:	240004d8 	.word	0x240004d8

24001818 <CSP_QSPI_Erase_Block>:
/*/**
 * @brief
 *
 */
uint8_t CSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
24001818:	b580      	push	{r7, lr}
2400181a:	b090      	sub	sp, #64	; 0x40
2400181c:	af00      	add	r7, sp, #0
2400181e:	6078      	str	r0, [r7, #4]
    QSPI_CommandTypeDef sCommand;

    if( QSPI_SPI_MODE == nCurrentMode )
24001820:	4b23      	ldr	r3, [pc, #140]	; (240018b0 <CSP_QSPI_Erase_Block+0x98>)
24001822:	781b      	ldrb	r3, [r3, #0]
24001824:	2b05      	cmp	r3, #5
24001826:	d106      	bne.n	24001836 <CSP_QSPI_Erase_Block+0x1e>
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24001828:	f44f 7380 	mov.w	r3, #256	; 0x100
2400182c:	623b      	str	r3, [r7, #32]
        sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
2400182e:	f44f 6380 	mov.w	r3, #1024	; 0x400
24001832:	627b      	str	r3, [r7, #36]	; 0x24
24001834:	e005      	b.n	24001842 <CSP_QSPI_Erase_Block+0x2a>
    }
    else
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
24001836:	f44f 7340 	mov.w	r3, #768	; 0x300
2400183a:	623b      	str	r3, [r7, #32]
        sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
2400183c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24001840:	627b      	str	r3, [r7, #36]	; 0x24
    }

    sCommand.Instruction       = SECTOR_ERASE_BLOCK_64KB;
24001842:	23d8      	movs	r3, #216	; 0xd8
24001844:	60bb      	str	r3, [r7, #8]
    sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
24001846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
2400184a:	617b      	str	r3, [r7, #20]
    sCommand.Address           = BlockAddress;
2400184c:	687b      	ldr	r3, [r7, #4]
2400184e:	60fb      	str	r3, [r7, #12]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001850:	2300      	movs	r3, #0
24001852:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode          = QSPI_DATA_NONE;
24001854:	2300      	movs	r3, #0
24001856:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles       = 0;
24001858:	2300      	movs	r3, #0
2400185a:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
2400185c:	2300      	movs	r3, #0
2400185e:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
24001860:	2300      	movs	r3, #0
24001862:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001864:	2300      	movs	r3, #0
24001866:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (QSPI_WriteEnable() != QSPI_OK)
24001868:	f7ff fb8a 	bl	24000f80 <QSPI_WriteEnable>
2400186c:	4603      	mov	r3, r0
2400186e:	2b00      	cmp	r3, #0
24001870:	d001      	beq.n	24001876 <CSP_QSPI_Erase_Block+0x5e>
    {
        return QSPI_ERROR;
24001872:	2301      	movs	r3, #1
24001874:	e018      	b.n	240018a8 <CSP_QSPI_Erase_Block+0x90>
    }

    QSPI_Wait_Busy();
24001876:	f7ff fcd7 	bl	24001228 <QSPI_Wait_Busy>

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
2400187a:	f107 0308 	add.w	r3, r7, #8
2400187e:	f241 3288 	movw	r2, #5000	; 0x1388
24001882:	4619      	mov	r1, r3
24001884:	480b      	ldr	r0, [pc, #44]	; (240018b4 <CSP_QSPI_Erase_Block+0x9c>)
24001886:	f004 fa31 	bl	24005cec <HAL_QSPI_Command>
2400188a:	4603      	mov	r3, r0
2400188c:	2b00      	cmp	r3, #0
2400188e:	d001      	beq.n	24001894 <CSP_QSPI_Erase_Block+0x7c>
    {
        return QSPI_ERROR;
24001890:	2301      	movs	r3, #1
24001892:	e009      	b.n	240018a8 <CSP_QSPI_Erase_Block+0x90>
    }

    QSPI_Wait_Busy();
24001894:	f7ff fcc8 	bl	24001228 <QSPI_Wait_Busy>

    if (QSPI_AutoPollingMemReady() != QSPI_OK)
24001898:	f7ff fbce 	bl	24001038 <QSPI_AutoPollingMemReady>
2400189c:	4603      	mov	r3, r0
2400189e:	2b00      	cmp	r3, #0
240018a0:	d001      	beq.n	240018a6 <CSP_QSPI_Erase_Block+0x8e>
    {
        return QSPI_ERROR;
240018a2:	2301      	movs	r3, #1
240018a4:	e000      	b.n	240018a8 <CSP_QSPI_Erase_Block+0x90>
    }

    return QSPI_OK;
240018a6:	2300      	movs	r3, #0
}
240018a8:	4618      	mov	r0, r3
240018aa:	3740      	adds	r7, #64	; 0x40
240018ac:	46bd      	mov	sp, r7
240018ae:	bd80      	pop	{r7, pc}
240018b0:	240004a1 	.word	0x240004a1
240018b4:	240004d8 	.word	0x240004d8

240018b8 <CSP_QSPI_EraseSector>:
/**
  * @brief  None.
  * @retval None.
  */
uint8_t CSP_QSPI_EraseSector(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
240018b8:	b580      	push	{r7, lr}
240018ba:	b090      	sub	sp, #64	; 0x40
240018bc:	af00      	add	r7, sp, #0
240018be:	6078      	str	r0, [r7, #4]
240018c0:	6039      	str	r1, [r7, #0]
    QSPI_CommandTypeDef sCommand;

    EraseStartAddress = EraseStartAddress - EraseStartAddress % MEMORY_SECTOR_SIZE;
240018c2:	687a      	ldr	r2, [r7, #4]
240018c4:	4b29      	ldr	r3, [pc, #164]	; (2400196c <CSP_QSPI_EraseSector+0xb4>)
240018c6:	4013      	ands	r3, r2
240018c8:	607b      	str	r3, [r7, #4]

    /* Erasing Sequence -------------------------------------------------- */
    if( QSPI_SPI_MODE == nCurrentMode )
240018ca:	4b29      	ldr	r3, [pc, #164]	; (24001970 <CSP_QSPI_EraseSector+0xb8>)
240018cc:	781b      	ldrb	r3, [r3, #0]
240018ce:	2b05      	cmp	r3, #5
240018d0:	d106      	bne.n	240018e0 <CSP_QSPI_EraseSector+0x28>
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
240018d2:	f44f 7380 	mov.w	r3, #256	; 0x100
240018d6:	623b      	str	r3, [r7, #32]
        sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
240018d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
240018dc:	627b      	str	r3, [r7, #36]	; 0x24
240018de:	e005      	b.n	240018ec <CSP_QSPI_EraseSector+0x34>
    }
    else
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
240018e0:	f44f 7340 	mov.w	r3, #768	; 0x300
240018e4:	623b      	str	r3, [r7, #32]
        sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
240018e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
240018ea:	627b      	str	r3, [r7, #36]	; 0x24
    }

    sCommand.Instruction        = SECTOR_ERASE_CMD_4BYTE;
240018ec:	2320      	movs	r3, #32
240018ee:	60bb      	str	r3, [r7, #8]
    sCommand.AddressSize        = QSPI_ADDRESS_24_BITS;
240018f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
240018f4:	617b      	str	r3, [r7, #20]

    sCommand.AlternateBytes     = 0x00;
240018f6:	2300      	movs	r3, #0
240018f8:	613b      	str	r3, [r7, #16]
    sCommand.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
240018fa:	2300      	movs	r3, #0
240018fc:	61bb      	str	r3, [r7, #24]
    sCommand.AlternateByteMode  = QSPI_ALTERNATE_BYTES_NONE;
240018fe:	2300      	movs	r3, #0
24001900:	62bb      	str	r3, [r7, #40]	; 0x28

    sCommand.DataMode           = QSPI_DATA_NONE;
24001902:	2300      	movs	r3, #0
24001904:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles        = 0;
24001906:	2300      	movs	r3, #0
24001908:	61fb      	str	r3, [r7, #28]
    sCommand.DdrMode            = QSPI_DDR_MODE_DISABLE;
2400190a:	2300      	movs	r3, #0
2400190c:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle   = QSPI_DDR_HHC_ANALOG_DELAY;
2400190e:	2300      	movs	r3, #0
24001910:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode           = QSPI_SIOO_INST_EVERY_CMD;
24001912:	2300      	movs	r3, #0
24001914:	63fb      	str	r3, [r7, #60]	; 0x3c

    while (EraseEndAddress >= EraseStartAddress)
24001916:	e01f      	b.n	24001958 <CSP_QSPI_EraseSector+0xa0>
    {
        sCommand.Address = (EraseStartAddress & 0x0FFFFFFF);
24001918:	687b      	ldr	r3, [r7, #4]
2400191a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
2400191e:	60fb      	str	r3, [r7, #12]

        if (QSPI_WriteEnable() != QSPI_OK)
24001920:	f7ff fb2e 	bl	24000f80 <QSPI_WriteEnable>
24001924:	4603      	mov	r3, r0
24001926:	2b00      	cmp	r3, #0
24001928:	d001      	beq.n	2400192e <CSP_QSPI_EraseSector+0x76>
        {
            return QSPI_ERROR;
2400192a:	2301      	movs	r3, #1
2400192c:	e019      	b.n	24001962 <CSP_QSPI_EraseSector+0xaa>
        }

        QSPI_Wait_Busy();
2400192e:	f7ff fc7b 	bl	24001228 <QSPI_Wait_Busy>

        if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
24001932:	f107 0308 	add.w	r3, r7, #8
24001936:	f241 3288 	movw	r2, #5000	; 0x1388
2400193a:	4619      	mov	r1, r3
2400193c:	480d      	ldr	r0, [pc, #52]	; (24001974 <CSP_QSPI_EraseSector+0xbc>)
2400193e:	f004 f9d5 	bl	24005cec <HAL_QSPI_Command>
24001942:	4603      	mov	r3, r0
24001944:	2b00      	cmp	r3, #0
24001946:	d001      	beq.n	2400194c <CSP_QSPI_EraseSector+0x94>
                != HAL_OK)
        {
            return QSPI_ERROR;
24001948:	2301      	movs	r3, #1
2400194a:	e00a      	b.n	24001962 <CSP_QSPI_EraseSector+0xaa>
        }
        EraseStartAddress += MEMORY_SECTOR_SIZE;
2400194c:	687b      	ldr	r3, [r7, #4]
2400194e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
24001952:	607b      	str	r3, [r7, #4]

        QSPI_Wait_Busy();
24001954:	f7ff fc68 	bl	24001228 <QSPI_Wait_Busy>
    while (EraseEndAddress >= EraseStartAddress)
24001958:	683a      	ldr	r2, [r7, #0]
2400195a:	687b      	ldr	r3, [r7, #4]
2400195c:	429a      	cmp	r2, r3
2400195e:	d2db      	bcs.n	24001918 <CSP_QSPI_EraseSector+0x60>
    }

    return HAL_OK;
24001960:	2300      	movs	r3, #0
}
24001962:	4618      	mov	r0, r3
24001964:	3740      	adds	r7, #64	; 0x40
24001966:	46bd      	mov	sp, r7
24001968:	bd80      	pop	{r7, pc}
2400196a:	bf00      	nop
2400196c:	fffff000 	.word	0xfffff000
24001970:	240004a1 	.word	0x240004a1
24001974:	240004d8 	.word	0x240004d8

24001978 <CSP_QSPI_GetStatus>:
/**
  * @brief  None.
  * @retval None.
  */
uint8_t CSP_QSPI_GetStatus(void)
{
24001978:	b580      	push	{r7, lr}
2400197a:	b090      	sub	sp, #64	; 0x40
2400197c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint8_t reg;

    sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
2400197e:	f44f 7380 	mov.w	r3, #256	; 0x100
24001982:	623b      	str	r3, [r7, #32]
    sCommand.Instruction       = READ_STATUS_REG1_CMD;
24001984:	2305      	movs	r3, #5
24001986:	60bb      	str	r3, [r7, #8]
    sCommand.AddressMode       = QSPI_ADDRESS_NONE;
24001988:	2300      	movs	r3, #0
2400198a:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
2400198c:	2300      	movs	r3, #0
2400198e:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.DataMode          = QSPI_DATA_1_LINE;
24001990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DummyCycles       = 0;
24001996:	2300      	movs	r3, #0
24001998:	61fb      	str	r3, [r7, #28]
    sCommand.NbData            = 1;
2400199a:	2301      	movs	r3, #1
2400199c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
2400199e:	2300      	movs	r3, #0
240019a0:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
240019a2:	2300      	movs	r3, #0
240019a4:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
240019a6:	2300      	movs	r3, #0
240019a8:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240019aa:	f107 0308 	add.w	r3, r7, #8
240019ae:	f241 3288 	movw	r2, #5000	; 0x1388
240019b2:	4619      	mov	r1, r3
240019b4:	480f      	ldr	r0, [pc, #60]	; (240019f4 <CSP_QSPI_GetStatus+0x7c>)
240019b6:	f004 f999 	bl	24005cec <HAL_QSPI_Command>
240019ba:	4603      	mov	r3, r0
240019bc:	2b00      	cmp	r3, #0
240019be:	d001      	beq.n	240019c4 <CSP_QSPI_GetStatus+0x4c>
    {
        return QSPI_ERROR;
240019c0:	2301      	movs	r3, #1
240019c2:	e013      	b.n	240019ec <CSP_QSPI_GetStatus+0x74>
    }
    if (HAL_QSPI_Receive(&hqspi, &reg, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
240019c4:	1dfb      	adds	r3, r7, #7
240019c6:	f241 3288 	movw	r2, #5000	; 0x1388
240019ca:	4619      	mov	r1, r3
240019cc:	4809      	ldr	r0, [pc, #36]	; (240019f4 <CSP_QSPI_GetStatus+0x7c>)
240019ce:	f004 fae3 	bl	24005f98 <HAL_QSPI_Receive>
240019d2:	4603      	mov	r3, r0
240019d4:	2b00      	cmp	r3, #0
240019d6:	d001      	beq.n	240019dc <CSP_QSPI_GetStatus+0x64>
    {
        return QSPI_ERROR;
240019d8:	2301      	movs	r3, #1
240019da:	e007      	b.n	240019ec <CSP_QSPI_GetStatus+0x74>
    }

    if((reg & MEMORY_FSR_BUSY) != 0)
240019dc:	79fb      	ldrb	r3, [r7, #7]
240019de:	f003 0301 	and.w	r3, r3, #1
240019e2:	2b00      	cmp	r3, #0
240019e4:	d001      	beq.n	240019ea <CSP_QSPI_GetStatus+0x72>
    {
        return QSPI_BUSY;
240019e6:	2302      	movs	r3, #2
240019e8:	e000      	b.n	240019ec <CSP_QSPI_GetStatus+0x74>
    }
    else
    {
        return QSPI_OK;
240019ea:	2300      	movs	r3, #0
    }
}
240019ec:	4618      	mov	r0, r3
240019ee:	3740      	adds	r7, #64	; 0x40
240019f0:	46bd      	mov	sp, r7
240019f2:	bd80      	pop	{r7, pc}
240019f4:	240004d8 	.word	0x240004d8

240019f8 <CSP_QSPI_GetInfo>:
/**
  * @brief  None.
  * @retval None.
  */
uint8_t CSP_QSPI_GetInfo(QSPI_Info* pInfo)
{
240019f8:	b480      	push	{r7}
240019fa:	b083      	sub	sp, #12
240019fc:	af00      	add	r7, sp, #0
240019fe:	6078      	str	r0, [r7, #4]

    pInfo->FlashSize          = MEMORY_FLASH_SIZE;
24001a00:	687b      	ldr	r3, [r7, #4]
24001a02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
24001a06:	601a      	str	r2, [r3, #0]
    pInfo->EraseSectorSize    = MEMORY_SECTOR_SIZE;
24001a08:	687b      	ldr	r3, [r7, #4]
24001a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001a0e:	605a      	str	r2, [r3, #4]
    pInfo->EraseSectorsNumber = (MEMORY_FLASH_SIZE/MEMORY_SECTOR_SIZE);
24001a10:	687b      	ldr	r3, [r7, #4]
24001a12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
24001a16:	609a      	str	r2, [r3, #8]
    pInfo->ProgPageSize       = MEMORY_PAGE_SIZE;
24001a18:	687b      	ldr	r3, [r7, #4]
24001a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
24001a1e:	60da      	str	r2, [r3, #12]
    pInfo->ProgPagesNumber    = (MEMORY_FLASH_SIZE/MEMORY_PAGE_SIZE);
24001a20:	687b      	ldr	r3, [r7, #4]
24001a22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
24001a26:	611a      	str	r2, [r3, #16]

    return QSPI_OK;
24001a28:	2300      	movs	r3, #0
}
24001a2a:	4618      	mov	r0, r3
24001a2c:	370c      	adds	r7, #12
24001a2e:	46bd      	mov	sp, r7
24001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
24001a34:	4770      	bx	lr

24001a36 <QSPI_FLASH_ReadID>:
/**
  * @brief  None.
  * @retval None.
  */
uint32_t QSPI_FLASH_ReadID(void)
{
24001a36:	b580      	push	{r7, lr}
24001a38:	b090      	sub	sp, #64	; 0x40
24001a3a:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t Temp = 0;
24001a3c:	2300      	movs	r3, #0
24001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    uint8_t pData[3];

    sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24001a40:	f44f 7380 	mov.w	r3, #256	; 0x100
24001a44:	61fb      	str	r3, [r7, #28]
    sCommand.Instruction       = READ_JEDEC_ID_CMD;
24001a46:	239f      	movs	r3, #159	; 0x9f
24001a48:	607b      	str	r3, [r7, #4]
    sCommand.AddressMode       = QSPI_ADDRESS_1_LINE;
24001a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
24001a4e:	623b      	str	r3, [r7, #32]
    sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
24001a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001a54:	613b      	str	r3, [r7, #16]
    sCommand.DataMode          = QSPI_DATA_1_LINE;
24001a56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
24001a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.AddressMode       = QSPI_ADDRESS_NONE;
24001a5c:	2300      	movs	r3, #0
24001a5e:	623b      	str	r3, [r7, #32]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001a60:	2300      	movs	r3, #0
24001a62:	627b      	str	r3, [r7, #36]	; 0x24
    sCommand.DummyCycles       = 0;
24001a64:	2300      	movs	r3, #0
24001a66:	61bb      	str	r3, [r7, #24]
    sCommand.NbData            = 3;
24001a68:	2303      	movs	r3, #3
24001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
24001a6c:	2300      	movs	r3, #0
24001a6e:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
24001a70:	2300      	movs	r3, #0
24001a72:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001a74:	2300      	movs	r3, #0
24001a76:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001a78:	1d3b      	adds	r3, r7, #4
24001a7a:	f241 3288 	movw	r2, #5000	; 0x1388
24001a7e:	4619      	mov	r1, r3
24001a80:	480f      	ldr	r0, [pc, #60]	; (24001ac0 <QSPI_FLASH_ReadID+0x8a>)
24001a82:	f004 f933 	bl	24005cec <HAL_QSPI_Command>
24001a86:	4603      	mov	r3, r0
24001a88:	2b00      	cmp	r3, #0
24001a8a:	d000      	beq.n	24001a8e <QSPI_FLASH_ReadID+0x58>
    {
        while(1)
24001a8c:	e7fe      	b.n	24001a8c <QSPI_FLASH_ReadID+0x56>
        {
        }
    }
    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001a8e:	463b      	mov	r3, r7
24001a90:	f241 3288 	movw	r2, #5000	; 0x1388
24001a94:	4619      	mov	r1, r3
24001a96:	480a      	ldr	r0, [pc, #40]	; (24001ac0 <QSPI_FLASH_ReadID+0x8a>)
24001a98:	f004 fa7e 	bl	24005f98 <HAL_QSPI_Receive>
24001a9c:	4603      	mov	r3, r0
24001a9e:	2b00      	cmp	r3, #0
24001aa0:	d000      	beq.n	24001aa4 <QSPI_FLASH_ReadID+0x6e>
    {
        while(1)
24001aa2:	e7fe      	b.n	24001aa2 <QSPI_FLASH_ReadID+0x6c>
        {
        }
    }

    Temp = ( pData[2] | pData[1]<<8 )| ( pData[0]<<16 );
24001aa4:	78bb      	ldrb	r3, [r7, #2]
24001aa6:	461a      	mov	r2, r3
24001aa8:	787b      	ldrb	r3, [r7, #1]
24001aaa:	021b      	lsls	r3, r3, #8
24001aac:	431a      	orrs	r2, r3
24001aae:	783b      	ldrb	r3, [r7, #0]
24001ab0:	041b      	lsls	r3, r3, #16
24001ab2:	4313      	orrs	r3, r2
24001ab4:	63fb      	str	r3, [r7, #60]	; 0x3c

    return Temp;
24001ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
24001ab8:	4618      	mov	r0, r3
24001aba:	3740      	adds	r7, #64	; 0x40
24001abc:	46bd      	mov	sp, r7
24001abe:	bd80      	pop	{r7, pc}
24001ac0:	240004d8 	.word	0x240004d8

24001ac4 <QSPI_FLASH_ReadDeviceID>:
/**
  * @brief  None.
  * @retval None.
  */
uint32_t QSPI_FLASH_ReadDeviceID(void)
{
24001ac4:	b580      	push	{r7, lr}
24001ac6:	b092      	sub	sp, #72	; 0x48
24001ac8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef sCommand;
    uint32_t Temp = 0;
24001aca:	2300      	movs	r3, #0
24001acc:	647b      	str	r3, [r7, #68]	; 0x44
    uint8_t pData[6];

    if( QSPI_SPI_MODE == nCurrentMode )
24001ace:	4b25      	ldr	r3, [pc, #148]	; (24001b64 <QSPI_FLASH_ReadDeviceID+0xa0>)
24001ad0:	781b      	ldrb	r3, [r3, #0]
24001ad2:	2b05      	cmp	r3, #5
24001ad4:	d107      	bne.n	24001ae6 <QSPI_FLASH_ReadDeviceID+0x22>
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
24001ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
24001ada:	627b      	str	r3, [r7, #36]	; 0x24
        sCommand.Instruction       = READ_QUAD_ID_CMD;
24001adc:	2394      	movs	r3, #148	; 0x94
24001ade:	60fb      	str	r3, [r7, #12]
        sCommand.DummyCycles       = 6;
24001ae0:	2306      	movs	r3, #6
24001ae2:	623b      	str	r3, [r7, #32]
24001ae4:	e006      	b.n	24001af4 <QSPI_FLASH_ReadDeviceID+0x30>
    }
    else
    {
        sCommand.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
24001ae6:	f44f 7340 	mov.w	r3, #768	; 0x300
24001aea:	627b      	str	r3, [r7, #36]	; 0x24
        sCommand.Instruction       = READ_ID_CMD;
24001aec:	2390      	movs	r3, #144	; 0x90
24001aee:	60fb      	str	r3, [r7, #12]
        sCommand.DummyCycles       = 0;
24001af0:	2300      	movs	r3, #0
24001af2:	623b      	str	r3, [r7, #32]
    }

    sCommand.AddressMode       = QSPI_ADDRESS_4_LINES;
24001af4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
24001af8:	62bb      	str	r3, [r7, #40]	; 0x28
    sCommand.AddressSize       = QSPI_ADDRESS_24_BITS;
24001afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
24001afe:	61bb      	str	r3, [r7, #24]
    sCommand.Address           = 0x000000;
24001b00:	2300      	movs	r3, #0
24001b02:	613b      	str	r3, [r7, #16]
    sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
24001b04:	2300      	movs	r3, #0
24001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.DataMode          = QSPI_DATA_4_LINES;
24001b08:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
24001b0c:	633b      	str	r3, [r7, #48]	; 0x30
    sCommand.NbData            = 2;
24001b0e:	2302      	movs	r3, #2
24001b10:	637b      	str	r3, [r7, #52]	; 0x34
    sCommand.DdrMode           = QSPI_DDR_MODE_DISABLE;
24001b12:	2300      	movs	r3, #0
24001b14:	63bb      	str	r3, [r7, #56]	; 0x38
    sCommand.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
24001b16:	2300      	movs	r3, #0
24001b18:	63fb      	str	r3, [r7, #60]	; 0x3c
    sCommand.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
24001b1a:	2300      	movs	r3, #0
24001b1c:	643b      	str	r3, [r7, #64]	; 0x40

    if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001b1e:	f107 030c 	add.w	r3, r7, #12
24001b22:	f241 3288 	movw	r2, #5000	; 0x1388
24001b26:	4619      	mov	r1, r3
24001b28:	480f      	ldr	r0, [pc, #60]	; (24001b68 <QSPI_FLASH_ReadDeviceID+0xa4>)
24001b2a:	f004 f8df 	bl	24005cec <HAL_QSPI_Command>
24001b2e:	4603      	mov	r3, r0
24001b30:	2b00      	cmp	r3, #0
24001b32:	d000      	beq.n	24001b36 <QSPI_FLASH_ReadDeviceID+0x72>
    {
        while(1)
24001b34:	e7fe      	b.n	24001b34 <QSPI_FLASH_ReadDeviceID+0x70>
        {
        }
    }
    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
24001b36:	1d3b      	adds	r3, r7, #4
24001b38:	f241 3288 	movw	r2, #5000	; 0x1388
24001b3c:	4619      	mov	r1, r3
24001b3e:	480a      	ldr	r0, [pc, #40]	; (24001b68 <QSPI_FLASH_ReadDeviceID+0xa4>)
24001b40:	f004 fa2a 	bl	24005f98 <HAL_QSPI_Receive>
24001b44:	4603      	mov	r3, r0
24001b46:	2b00      	cmp	r3, #0
24001b48:	d000      	beq.n	24001b4c <QSPI_FLASH_ReadDeviceID+0x88>
    {
        while(1)
24001b4a:	e7fe      	b.n	24001b4a <QSPI_FLASH_ReadDeviceID+0x86>
        {
        }
    }

    Temp = pData[1] |( pData[0]<<8 ) ;
24001b4c:	797b      	ldrb	r3, [r7, #5]
24001b4e:	461a      	mov	r2, r3
24001b50:	793b      	ldrb	r3, [r7, #4]
24001b52:	021b      	lsls	r3, r3, #8
24001b54:	4313      	orrs	r3, r2
24001b56:	647b      	str	r3, [r7, #68]	; 0x44

    return Temp;
24001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
24001b5a:	4618      	mov	r0, r3
24001b5c:	3748      	adds	r7, #72	; 0x48
24001b5e:	46bd      	mov	sp, r7
24001b60:	bd80      	pop	{r7, pc}
24001b62:	bf00      	nop
24001b64:	240004a1 	.word	0x240004a1
24001b68:	240004d8 	.word	0x240004d8

24001b6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
24001b6c:	b480      	push	{r7}
24001b6e:	b083      	sub	sp, #12
24001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
24001b72:	4b0a      	ldr	r3, [pc, #40]	; (24001b9c <HAL_MspInit+0x30>)
24001b74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24001b78:	4a08      	ldr	r2, [pc, #32]	; (24001b9c <HAL_MspInit+0x30>)
24001b7a:	f043 0302 	orr.w	r3, r3, #2
24001b7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24001b82:	4b06      	ldr	r3, [pc, #24]	; (24001b9c <HAL_MspInit+0x30>)
24001b84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24001b88:	f003 0302 	and.w	r3, r3, #2
24001b8c:	607b      	str	r3, [r7, #4]
24001b8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
24001b90:	bf00      	nop
24001b92:	370c      	adds	r7, #12
24001b94:	46bd      	mov	sp, r7
24001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
24001b9a:	4770      	bx	lr
24001b9c:	58024400 	.word	0x58024400

24001ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
24001ba0:	b480      	push	{r7}
24001ba2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
24001ba4:	bf00      	nop
24001ba6:	46bd      	mov	sp, r7
24001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
24001bac:	4770      	bx	lr

24001bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
24001bae:	b480      	push	{r7}
24001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
24001bb2:	e7fe      	b.n	24001bb2 <HardFault_Handler+0x4>

24001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
24001bb4:	b480      	push	{r7}
24001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
24001bb8:	e7fe      	b.n	24001bb8 <MemManage_Handler+0x4>

24001bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
24001bba:	b480      	push	{r7}
24001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
24001bbe:	e7fe      	b.n	24001bbe <BusFault_Handler+0x4>

24001bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
24001bc0:	b480      	push	{r7}
24001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
24001bc4:	e7fe      	b.n	24001bc4 <UsageFault_Handler+0x4>

24001bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
24001bc6:	b480      	push	{r7}
24001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
24001bca:	bf00      	nop
24001bcc:	46bd      	mov	sp, r7
24001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
24001bd2:	4770      	bx	lr

24001bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
24001bd4:	b480      	push	{r7}
24001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
24001bd8:	bf00      	nop
24001bda:	46bd      	mov	sp, r7
24001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
24001be0:	4770      	bx	lr

24001be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
24001be2:	b480      	push	{r7}
24001be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
24001be6:	bf00      	nop
24001be8:	46bd      	mov	sp, r7
24001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
24001bee:	4770      	bx	lr

24001bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
24001bf0:	b580      	push	{r7, lr}
24001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
24001bf4:	f000 face 	bl	24002194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
24001bf8:	bf00      	nop
24001bfa:	bd80      	pop	{r7, pc}

24001bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
24001bfc:	b480      	push	{r7}
24001bfe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
24001c00:	4b39      	ldr	r3, [pc, #228]	; (24001ce8 <SystemInit+0xec>)
24001c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24001c06:	4a38      	ldr	r2, [pc, #224]	; (24001ce8 <SystemInit+0xec>)
24001c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
24001c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24001c10:	4b36      	ldr	r3, [pc, #216]	; (24001cec <SystemInit+0xf0>)
24001c12:	681b      	ldr	r3, [r3, #0]
24001c14:	f003 030f 	and.w	r3, r3, #15
24001c18:	2b06      	cmp	r3, #6
24001c1a:	d807      	bhi.n	24001c2c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24001c1c:	4b33      	ldr	r3, [pc, #204]	; (24001cec <SystemInit+0xf0>)
24001c1e:	681b      	ldr	r3, [r3, #0]
24001c20:	f023 030f 	bic.w	r3, r3, #15
24001c24:	4a31      	ldr	r2, [pc, #196]	; (24001cec <SystemInit+0xf0>)
24001c26:	f043 0307 	orr.w	r3, r3, #7
24001c2a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
24001c2c:	4b30      	ldr	r3, [pc, #192]	; (24001cf0 <SystemInit+0xf4>)
24001c2e:	681b      	ldr	r3, [r3, #0]
24001c30:	4a2f      	ldr	r2, [pc, #188]	; (24001cf0 <SystemInit+0xf4>)
24001c32:	f043 0301 	orr.w	r3, r3, #1
24001c36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
24001c38:	4b2d      	ldr	r3, [pc, #180]	; (24001cf0 <SystemInit+0xf4>)
24001c3a:	2200      	movs	r2, #0
24001c3c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
24001c3e:	4b2c      	ldr	r3, [pc, #176]	; (24001cf0 <SystemInit+0xf4>)
24001c40:	681a      	ldr	r2, [r3, #0]
24001c42:	492b      	ldr	r1, [pc, #172]	; (24001cf0 <SystemInit+0xf4>)
24001c44:	4b2b      	ldr	r3, [pc, #172]	; (24001cf4 <SystemInit+0xf8>)
24001c46:	4013      	ands	r3, r2
24001c48:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
24001c4a:	4b28      	ldr	r3, [pc, #160]	; (24001cec <SystemInit+0xf0>)
24001c4c:	681b      	ldr	r3, [r3, #0]
24001c4e:	f003 030f 	and.w	r3, r3, #15
24001c52:	2b07      	cmp	r3, #7
24001c54:	d907      	bls.n	24001c66 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
24001c56:	4b25      	ldr	r3, [pc, #148]	; (24001cec <SystemInit+0xf0>)
24001c58:	681b      	ldr	r3, [r3, #0]
24001c5a:	f023 030f 	bic.w	r3, r3, #15
24001c5e:	4a23      	ldr	r2, [pc, #140]	; (24001cec <SystemInit+0xf0>)
24001c60:	f043 0307 	orr.w	r3, r3, #7
24001c64:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
24001c66:	4b22      	ldr	r3, [pc, #136]	; (24001cf0 <SystemInit+0xf4>)
24001c68:	2200      	movs	r2, #0
24001c6a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
24001c6c:	4b20      	ldr	r3, [pc, #128]	; (24001cf0 <SystemInit+0xf4>)
24001c6e:	2200      	movs	r2, #0
24001c70:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
24001c72:	4b1f      	ldr	r3, [pc, #124]	; (24001cf0 <SystemInit+0xf4>)
24001c74:	2200      	movs	r2, #0
24001c76:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
24001c78:	4b1d      	ldr	r3, [pc, #116]	; (24001cf0 <SystemInit+0xf4>)
24001c7a:	4a1f      	ldr	r2, [pc, #124]	; (24001cf8 <SystemInit+0xfc>)
24001c7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
24001c7e:	4b1c      	ldr	r3, [pc, #112]	; (24001cf0 <SystemInit+0xf4>)
24001c80:	4a1e      	ldr	r2, [pc, #120]	; (24001cfc <SystemInit+0x100>)
24001c82:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
24001c84:	4b1a      	ldr	r3, [pc, #104]	; (24001cf0 <SystemInit+0xf4>)
24001c86:	4a1e      	ldr	r2, [pc, #120]	; (24001d00 <SystemInit+0x104>)
24001c88:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
24001c8a:	4b19      	ldr	r3, [pc, #100]	; (24001cf0 <SystemInit+0xf4>)
24001c8c:	2200      	movs	r2, #0
24001c8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
24001c90:	4b17      	ldr	r3, [pc, #92]	; (24001cf0 <SystemInit+0xf4>)
24001c92:	4a1b      	ldr	r2, [pc, #108]	; (24001d00 <SystemInit+0x104>)
24001c94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
24001c96:	4b16      	ldr	r3, [pc, #88]	; (24001cf0 <SystemInit+0xf4>)
24001c98:	2200      	movs	r2, #0
24001c9a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
24001c9c:	4b14      	ldr	r3, [pc, #80]	; (24001cf0 <SystemInit+0xf4>)
24001c9e:	4a18      	ldr	r2, [pc, #96]	; (24001d00 <SystemInit+0x104>)
24001ca0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
24001ca2:	4b13      	ldr	r3, [pc, #76]	; (24001cf0 <SystemInit+0xf4>)
24001ca4:	2200      	movs	r2, #0
24001ca6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
24001ca8:	4b11      	ldr	r3, [pc, #68]	; (24001cf0 <SystemInit+0xf4>)
24001caa:	681b      	ldr	r3, [r3, #0]
24001cac:	4a10      	ldr	r2, [pc, #64]	; (24001cf0 <SystemInit+0xf4>)
24001cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
24001cb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
24001cb4:	4b0e      	ldr	r3, [pc, #56]	; (24001cf0 <SystemInit+0xf4>)
24001cb6:	2200      	movs	r2, #0
24001cb8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
24001cba:	4b12      	ldr	r3, [pc, #72]	; (24001d04 <SystemInit+0x108>)
24001cbc:	681a      	ldr	r2, [r3, #0]
24001cbe:	4b12      	ldr	r3, [pc, #72]	; (24001d08 <SystemInit+0x10c>)
24001cc0:	4013      	ands	r3, r2
24001cc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24001cc6:	d202      	bcs.n	24001cce <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
24001cc8:	4b10      	ldr	r3, [pc, #64]	; (24001d0c <SystemInit+0x110>)
24001cca:	2201      	movs	r2, #1
24001ccc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
24001cce:	4b10      	ldr	r3, [pc, #64]	; (24001d10 <SystemInit+0x114>)
24001cd0:	f243 02d2 	movw	r2, #12498	; 0x30d2
24001cd4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
24001cd6:	4b04      	ldr	r3, [pc, #16]	; (24001ce8 <SystemInit+0xec>)
24001cd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
24001cdc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
24001cde:	bf00      	nop
24001ce0:	46bd      	mov	sp, r7
24001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
24001ce6:	4770      	bx	lr
24001ce8:	e000ed00 	.word	0xe000ed00
24001cec:	52002000 	.word	0x52002000
24001cf0:	58024400 	.word	0x58024400
24001cf4:	eaf6ed7f 	.word	0xeaf6ed7f
24001cf8:	02020200 	.word	0x02020200
24001cfc:	01ff0000 	.word	0x01ff0000
24001d00:	01010280 	.word	0x01010280
24001d04:	5c001000 	.word	0x5c001000
24001d08:	ffff0000 	.word	0xffff0000
24001d0c:	51008108 	.word	0x51008108
24001d10:	52004000 	.word	0x52004000

24001d14 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
24001d14:	b480      	push	{r7}
24001d16:	b08b      	sub	sp, #44	; 0x2c
24001d18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;


  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24001d1a:	4ba5      	ldr	r3, [pc, #660]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001d1c:	691b      	ldr	r3, [r3, #16]
24001d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
24001d22:	2b18      	cmp	r3, #24
24001d24:	f200 811d 	bhi.w	24001f62 <SystemCoreClockUpdate+0x24e>
24001d28:	a201      	add	r2, pc, #4	; (adr r2, 24001d30 <SystemCoreClockUpdate+0x1c>)
24001d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24001d2e:	bf00      	nop
24001d30:	24001d95 	.word	0x24001d95
24001d34:	24001f63 	.word	0x24001f63
24001d38:	24001f63 	.word	0x24001f63
24001d3c:	24001f63 	.word	0x24001f63
24001d40:	24001f63 	.word	0x24001f63
24001d44:	24001f63 	.word	0x24001f63
24001d48:	24001f63 	.word	0x24001f63
24001d4c:	24001f63 	.word	0x24001f63
24001d50:	24001da9 	.word	0x24001da9
24001d54:	24001f63 	.word	0x24001f63
24001d58:	24001f63 	.word	0x24001f63
24001d5c:	24001f63 	.word	0x24001f63
24001d60:	24001f63 	.word	0x24001f63
24001d64:	24001f63 	.word	0x24001f63
24001d68:	24001f63 	.word	0x24001f63
24001d6c:	24001f63 	.word	0x24001f63
24001d70:	24001daf 	.word	0x24001daf
24001d74:	24001f63 	.word	0x24001f63
24001d78:	24001f63 	.word	0x24001f63
24001d7c:	24001f63 	.word	0x24001f63
24001d80:	24001f63 	.word	0x24001f63
24001d84:	24001f63 	.word	0x24001f63
24001d88:	24001f63 	.word	0x24001f63
24001d8c:	24001f63 	.word	0x24001f63
24001d90:	24001db5 	.word	0x24001db5
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    common_system_clock = (uint32_t) (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3));
24001d94:	4b86      	ldr	r3, [pc, #536]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001d96:	681b      	ldr	r3, [r3, #0]
24001d98:	08db      	lsrs	r3, r3, #3
24001d9a:	f003 0303 	and.w	r3, r3, #3
24001d9e:	4a85      	ldr	r2, [pc, #532]	; (24001fb4 <SystemCoreClockUpdate+0x2a0>)
24001da0:	fa22 f303 	lsr.w	r3, r2, r3
24001da4:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001da6:	e0df      	b.n	24001f68 <SystemCoreClockUpdate+0x254>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    common_system_clock = CSI_VALUE;
24001da8:	4b83      	ldr	r3, [pc, #524]	; (24001fb8 <SystemCoreClockUpdate+0x2a4>)
24001daa:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001dac:	e0dc      	b.n	24001f68 <SystemCoreClockUpdate+0x254>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    common_system_clock = HSE_VALUE;
24001dae:	4b83      	ldr	r3, [pc, #524]	; (24001fbc <SystemCoreClockUpdate+0x2a8>)
24001db0:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001db2:	e0d9      	b.n	24001f68 <SystemCoreClockUpdate+0x254>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24001db4:	4b7e      	ldr	r3, [pc, #504]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24001db8:	f003 0303 	and.w	r3, r3, #3
24001dbc:	61fb      	str	r3, [r7, #28]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
24001dbe:	4b7c      	ldr	r3, [pc, #496]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24001dc2:	091b      	lsrs	r3, r3, #4
24001dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24001dc8:	61bb      	str	r3, [r7, #24]
    pllfracen = ((RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
24001dca:	4b79      	ldr	r3, [pc, #484]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24001dce:	f003 0301 	and.w	r3, r3, #1
24001dd2:	617b      	str	r3, [r7, #20]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
24001dd4:	4b76      	ldr	r3, [pc, #472]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24001dd8:	08db      	lsrs	r3, r3, #3
24001dda:	f3c3 030c 	ubfx	r3, r3, #0, #13
24001dde:	697a      	ldr	r2, [r7, #20]
24001de0:	fb02 f303 	mul.w	r3, r2, r3
24001de4:	ee07 3a90 	vmov	s15, r3
24001de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001dec:	edc7 7a04 	vstr	s15, [r7, #16]

    if (pllm != 0U)
24001df0:	69bb      	ldr	r3, [r7, #24]
24001df2:	2b00      	cmp	r3, #0
24001df4:	f000 80b2 	beq.w	24001f5c <SystemCoreClockUpdate+0x248>
    {
      switch (pllsource)
24001df8:	69fb      	ldr	r3, [r7, #28]
24001dfa:	2b01      	cmp	r3, #1
24001dfc:	d032      	beq.n	24001e64 <SystemCoreClockUpdate+0x150>
24001dfe:	2b01      	cmp	r3, #1
24001e00:	d302      	bcc.n	24001e08 <SystemCoreClockUpdate+0xf4>
24001e02:	2b02      	cmp	r3, #2
24001e04:	d050      	beq.n	24001ea8 <SystemCoreClockUpdate+0x194>
24001e06:	e071      	b.n	24001eec <SystemCoreClockUpdate+0x1d8>
      {
        case RCC_PLLCKSELR_PLLSRC_HSI:  /* HSI used as PLL clock source */

        hsivalue = (HSI_VALUE >> ((RCC->CR & RCC_CR_HSIDIV)>> 3)) ;
24001e08:	4b69      	ldr	r3, [pc, #420]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001e0a:	681b      	ldr	r3, [r3, #0]
24001e0c:	08db      	lsrs	r3, r3, #3
24001e0e:	f003 0303 	and.w	r3, r3, #3
24001e12:	4a68      	ldr	r2, [pc, #416]	; (24001fb4 <SystemCoreClockUpdate+0x2a0>)
24001e14:	fa22 f303 	lsr.w	r3, r2, r3
24001e18:	60fb      	str	r3, [r7, #12]
        pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001e1a:	68fb      	ldr	r3, [r7, #12]
24001e1c:	ee07 3a90 	vmov	s15, r3
24001e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e24:	69bb      	ldr	r3, [r7, #24]
24001e26:	ee07 3a90 	vmov	s15, r3
24001e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001e32:	4b5f      	ldr	r3, [pc, #380]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001e3a:	ee07 3a90 	vmov	s15, r3
24001e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e42:	ed97 6a04 	vldr	s12, [r7, #16]
24001e46:	eddf 5a5e 	vldr	s11, [pc, #376]	; 24001fc0 <SystemCoreClockUpdate+0x2ac>
24001e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
24001e5e:	edc7 7a08 	vstr	s15, [r7, #32]

        break;
24001e62:	e065      	b.n	24001f30 <SystemCoreClockUpdate+0x21c>

        case RCC_PLLCKSELR_PLLSRC_CSI:  /* CSI used as PLL clock source */
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001e64:	69bb      	ldr	r3, [r7, #24]
24001e66:	ee07 3a90 	vmov	s15, r3
24001e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001e6e:	eddf 6a55 	vldr	s13, [pc, #340]	; 24001fc4 <SystemCoreClockUpdate+0x2b0>
24001e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001e76:	4b4e      	ldr	r3, [pc, #312]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001e7e:	ee07 3a90 	vmov	s15, r3
24001e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001e86:	ed97 6a04 	vldr	s12, [r7, #16]
24001e8a:	eddf 5a4d 	vldr	s11, [pc, #308]	; 24001fc0 <SystemCoreClockUpdate+0x2ac>
24001e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
24001ea2:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001ea6:	e043      	b.n	24001f30 <SystemCoreClockUpdate+0x21c>

        case RCC_PLLCKSELR_PLLSRC_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001ea8:	69bb      	ldr	r3, [r7, #24]
24001eaa:	ee07 3a90 	vmov	s15, r3
24001eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001eb2:	eddf 6a45 	vldr	s13, [pc, #276]	; 24001fc8 <SystemCoreClockUpdate+0x2b4>
24001eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001eba:	4b3d      	ldr	r3, [pc, #244]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001ec2:	ee07 3a90 	vmov	s15, r3
24001ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001eca:	ed97 6a04 	vldr	s12, [r7, #16]
24001ece:	eddf 5a3c 	vldr	s11, [pc, #240]	; 24001fc0 <SystemCoreClockUpdate+0x2ac>
24001ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
24001ee6:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001eea:	e021      	b.n	24001f30 <SystemCoreClockUpdate+0x21c>

      default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24001eec:	69bb      	ldr	r3, [r7, #24]
24001eee:	ee07 3a90 	vmov	s15, r3
24001ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
24001ef6:	eddf 6a33 	vldr	s13, [pc, #204]	; 24001fc4 <SystemCoreClockUpdate+0x2b0>
24001efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24001efe:	4b2c      	ldr	r3, [pc, #176]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
24001f06:	ee07 3a90 	vmov	s15, r3
24001f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
24001f0e:	ed97 6a04 	vldr	s12, [r7, #16]
24001f12:	eddf 5a2b 	vldr	s11, [pc, #172]	; 24001fc0 <SystemCoreClockUpdate+0x2ac>
24001f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
24001f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
24001f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24001f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
24001f26:	ee67 7a27 	vmul.f32	s15, s14, s15
24001f2a:	edc7 7a08 	vstr	s15, [r7, #32]
        break;
24001f2e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
24001f30:	4b1f      	ldr	r3, [pc, #124]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24001f34:	0a5b      	lsrs	r3, r3, #9
24001f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24001f3a:	3301      	adds	r3, #1
24001f3c:	60bb      	str	r3, [r7, #8]
      common_system_clock =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
24001f3e:	68bb      	ldr	r3, [r7, #8]
24001f40:	ee07 3a90 	vmov	s15, r3
24001f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
24001f48:	edd7 6a08 	vldr	s13, [r7, #32]
24001f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
24001f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24001f54:	ee17 3a90 	vmov	r3, s15
24001f58:	627b      	str	r3, [r7, #36]	; 0x24
    }
    else
    {
      common_system_clock = 0U;
    }
    break;
24001f5a:	e005      	b.n	24001f68 <SystemCoreClockUpdate+0x254>
      common_system_clock = 0U;
24001f5c:	2300      	movs	r3, #0
24001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001f60:	e002      	b.n	24001f68 <SystemCoreClockUpdate+0x254>

  default:
    common_system_clock = CSI_VALUE;
24001f62:	4b15      	ldr	r3, [pc, #84]	; (24001fb8 <SystemCoreClockUpdate+0x2a4>)
24001f64:	627b      	str	r3, [r7, #36]	; 0x24
    break;
24001f66:	bf00      	nop
  }

  /* Compute SystemClock frequency --------------------------------------------------*/
#if defined (RCC_D1CFGR_D1CPRE)
  tmp = D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos];
24001f68:	4b11      	ldr	r3, [pc, #68]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001f6a:	699b      	ldr	r3, [r3, #24]
24001f6c:	0a1b      	lsrs	r3, r3, #8
24001f6e:	f003 030f 	and.w	r3, r3, #15
24001f72:	4a16      	ldr	r2, [pc, #88]	; (24001fcc <SystemCoreClockUpdate+0x2b8>)
24001f74:	5cd3      	ldrb	r3, [r2, r3]
24001f76:	607b      	str	r3, [r7, #4]

  /* common_system_clock frequency : CM7 CPU frequency  */
  common_system_clock >>= tmp;
24001f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24001f7a:	687b      	ldr	r3, [r7, #4]
24001f7c:	fa22 f303 	lsr.w	r3, r2, r3
24001f80:	627b      	str	r3, [r7, #36]	; 0x24

  /* SystemD2Clock frequency : CM4 CPU, AXI and AHBs Clock frequency  */
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24001f82:	4b0b      	ldr	r3, [pc, #44]	; (24001fb0 <SystemCoreClockUpdate+0x29c>)
24001f84:	699b      	ldr	r3, [r3, #24]
24001f86:	f003 030f 	and.w	r3, r3, #15
24001f8a:	4a10      	ldr	r2, [pc, #64]	; (24001fcc <SystemCoreClockUpdate+0x2b8>)
24001f8c:	5cd3      	ldrb	r3, [r2, r3]
24001f8e:	f003 031f 	and.w	r3, r3, #31
24001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
24001f94:	fa22 f303 	lsr.w	r3, r2, r3
24001f98:	4a0d      	ldr	r2, [pc, #52]	; (24001fd0 <SystemCoreClockUpdate+0x2bc>)
24001f9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24001f9c:	4a0d      	ldr	r2, [pc, #52]	; (24001fd4 <SystemCoreClockUpdate+0x2c0>)
24001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24001fa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */
}
24001fa2:	bf00      	nop
24001fa4:	372c      	adds	r7, #44	; 0x2c
24001fa6:	46bd      	mov	sp, r7
24001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
24001fac:	4770      	bx	lr
24001fae:	bf00      	nop
24001fb0:	58024400 	.word	0x58024400
24001fb4:	03d09000 	.word	0x03d09000
24001fb8:	003d0900 	.word	0x003d0900
24001fbc:	017d7840 	.word	0x017d7840
24001fc0:	46000000 	.word	0x46000000
24001fc4:	4a742400 	.word	0x4a742400
24001fc8:	4bbebc20 	.word	0x4bbebc20
24001fcc:	2400ace0 	.word	0x2400ace0
24001fd0:	240004a8 	.word	0x240004a8
24001fd4:	240004a4 	.word	0x240004a4

24001fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
24001fd8:	b580      	push	{r7, lr}
24001fda:	b082      	sub	sp, #8
24001fdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
24001fde:	2003      	movs	r0, #3
24001fe0:	f000 ff36 	bl	24002e50 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24001fe4:	f005 fff8 	bl	24007fd8 <HAL_RCC_GetSysClockFreq>
24001fe8:	4601      	mov	r1, r0
24001fea:	4b15      	ldr	r3, [pc, #84]	; (24002040 <HAL_Init+0x68>)
24001fec:	699b      	ldr	r3, [r3, #24]
24001fee:	0a1b      	lsrs	r3, r3, #8
24001ff0:	f003 030f 	and.w	r3, r3, #15
24001ff4:	4a13      	ldr	r2, [pc, #76]	; (24002044 <HAL_Init+0x6c>)
24001ff6:	5cd3      	ldrb	r3, [r2, r3]
24001ff8:	f003 031f 	and.w	r3, r3, #31
24001ffc:	fa21 f303 	lsr.w	r3, r1, r3
24002000:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24002002:	4b0f      	ldr	r3, [pc, #60]	; (24002040 <HAL_Init+0x68>)
24002004:	699b      	ldr	r3, [r3, #24]
24002006:	f003 030f 	and.w	r3, r3, #15
2400200a:	4a0e      	ldr	r2, [pc, #56]	; (24002044 <HAL_Init+0x6c>)
2400200c:	5cd3      	ldrb	r3, [r2, r3]
2400200e:	f003 031f 	and.w	r3, r3, #31
24002012:	687a      	ldr	r2, [r7, #4]
24002014:	fa22 f303 	lsr.w	r3, r2, r3
24002018:	4a0b      	ldr	r2, [pc, #44]	; (24002048 <HAL_Init+0x70>)
2400201a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2400201c:	4a0b      	ldr	r2, [pc, #44]	; (2400204c <HAL_Init+0x74>)
2400201e:	687b      	ldr	r3, [r7, #4]
24002020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
24002022:	2000      	movs	r0, #0
24002024:	f000 f880 	bl	24002128 <HAL_InitTick>
24002028:	4603      	mov	r3, r0
2400202a:	2b00      	cmp	r3, #0
2400202c:	d001      	beq.n	24002032 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
2400202e:	2301      	movs	r3, #1
24002030:	e002      	b.n	24002038 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
24002032:	f7ff fd9b 	bl	24001b6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
24002036:	2300      	movs	r3, #0
}
24002038:	4618      	mov	r0, r3
2400203a:	3708      	adds	r7, #8
2400203c:	46bd      	mov	sp, r7
2400203e:	bd80      	pop	{r7, pc}
24002040:	58024400 	.word	0x58024400
24002044:	2400ace0 	.word	0x2400ace0
24002048:	240004a8 	.word	0x240004a8
2400204c:	240004a4 	.word	0x240004a4

24002050 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
24002050:	b580      	push	{r7, lr}
24002052:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_AHB3_FORCE_RESET();
24002054:	4b26      	ldr	r3, [pc, #152]	; (240020f0 <HAL_DeInit+0xa0>)
24002056:	4a27      	ldr	r2, [pc, #156]	; (240020f4 <HAL_DeInit+0xa4>)
24002058:	67da      	str	r2, [r3, #124]	; 0x7c
  __HAL_RCC_AHB3_RELEASE_RESET();
2400205a:	4b25      	ldr	r3, [pc, #148]	; (240020f0 <HAL_DeInit+0xa0>)
2400205c:	2200      	movs	r2, #0
2400205e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_RCC_AHB1_FORCE_RESET();
24002060:	4b23      	ldr	r3, [pc, #140]	; (240020f0 <HAL_DeInit+0xa0>)
24002062:	4a25      	ldr	r2, [pc, #148]	; (240020f8 <HAL_DeInit+0xa8>)
24002064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __HAL_RCC_AHB1_RELEASE_RESET();
24002068:	4b21      	ldr	r3, [pc, #132]	; (240020f0 <HAL_DeInit+0xa0>)
2400206a:	2200      	movs	r2, #0
2400206c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_RCC_AHB2_FORCE_RESET();
24002070:	4b1f      	ldr	r3, [pc, #124]	; (240020f0 <HAL_DeInit+0xa0>)
24002072:	f240 2271 	movw	r2, #625	; 0x271
24002076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __HAL_RCC_AHB2_RELEASE_RESET();
2400207a:	4b1d      	ldr	r3, [pc, #116]	; (240020f0 <HAL_DeInit+0xa0>)
2400207c:	2200      	movs	r2, #0
2400207e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_RCC_AHB4_FORCE_RESET();
24002082:	4b1b      	ldr	r3, [pc, #108]	; (240020f0 <HAL_DeInit+0xa0>)
24002084:	4a1d      	ldr	r2, [pc, #116]	; (240020fc <HAL_DeInit+0xac>)
24002086:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 __HAL_RCC_AHB4_RELEASE_RESET();
2400208a:	4b19      	ldr	r3, [pc, #100]	; (240020f0 <HAL_DeInit+0xa0>)
2400208c:	2200      	movs	r2, #0
2400208e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_RCC_APB3_FORCE_RESET();
24002092:	4b17      	ldr	r3, [pc, #92]	; (240020f0 <HAL_DeInit+0xa0>)
24002094:	2218      	movs	r2, #24
24002096:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_APB3_RELEASE_RESET();
2400209a:	4b15      	ldr	r3, [pc, #84]	; (240020f0 <HAL_DeInit+0xa0>)
2400209c:	2200      	movs	r2, #0
2400209e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_RCC_APB1L_FORCE_RESET();
240020a2:	4b13      	ldr	r3, [pc, #76]	; (240020f0 <HAL_DeInit+0xa0>)
240020a4:	4a16      	ldr	r2, [pc, #88]	; (24002100 <HAL_DeInit+0xb0>)
240020a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  __HAL_RCC_APB1L_RELEASE_RESET();
240020aa:	4b11      	ldr	r3, [pc, #68]	; (240020f0 <HAL_DeInit+0xa0>)
240020ac:	2200      	movs	r2, #0
240020ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  __HAL_RCC_APB1H_FORCE_RESET();
240020b2:	4b0f      	ldr	r3, [pc, #60]	; (240020f0 <HAL_DeInit+0xa0>)
240020b4:	f44f 729b 	mov.w	r2, #310	; 0x136
240020b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __HAL_RCC_APB1H_RELEASE_RESET();
240020bc:	4b0c      	ldr	r3, [pc, #48]	; (240020f0 <HAL_DeInit+0xa0>)
240020be:	2200      	movs	r2, #0
240020c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

   __HAL_RCC_APB2_FORCE_RESET();
240020c4:	4b0a      	ldr	r3, [pc, #40]	; (240020f0 <HAL_DeInit+0xa0>)
240020c6:	4a0f      	ldr	r2, [pc, #60]	; (24002104 <HAL_DeInit+0xb4>)
240020c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   __HAL_RCC_APB2_RELEASE_RESET();
240020cc:	4b08      	ldr	r3, [pc, #32]	; (240020f0 <HAL_DeInit+0xa0>)
240020ce:	2200      	movs	r2, #0
240020d0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  __HAL_RCC_APB4_FORCE_RESET();
240020d4:	4b06      	ldr	r3, [pc, #24]	; (240020f0 <HAL_DeInit+0xa0>)
240020d6:	4a0c      	ldr	r2, [pc, #48]	; (24002108 <HAL_DeInit+0xb8>)
240020d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  __HAL_RCC_APB4_RELEASE_RESET();
240020dc:	4b04      	ldr	r3, [pc, #16]	; (240020f0 <HAL_DeInit+0xa0>)
240020de:	2200      	movs	r2, #0
240020e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* De-Init the low level hardware */
  HAL_MspDeInit();
240020e4:	f000 f819 	bl	2400211a <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
240020e8:	2300      	movs	r3, #0
}
240020ea:	4618      	mov	r0, r3
240020ec:	bd80      	pop	{r7, pc}
240020ee:	bf00      	nop
240020f0:	58024400 	.word	0x58024400
240020f4:	00015031 	.word	0x00015031
240020f8:	0a00c023 	.word	0x0a00c023
240020fc:	032807ff 	.word	0x032807ff
24002100:	e8ffc3ff 	.word	0xe8ffc3ff
24002104:	31d73033 	.word	0x31d73033
24002108:	0020deaa 	.word	0x0020deaa
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
2400210c:	b480      	push	{r7}
2400210e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
24002110:	bf00      	nop
24002112:	46bd      	mov	sp, r7
24002114:	f85d 7b04 	ldr.w	r7, [sp], #4
24002118:	4770      	bx	lr

2400211a <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
2400211a:	b480      	push	{r7}
2400211c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
2400211e:	bf00      	nop
24002120:	46bd      	mov	sp, r7
24002122:	f85d 7b04 	ldr.w	r7, [sp], #4
24002126:	4770      	bx	lr

24002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
24002128:	b580      	push	{r7, lr}
2400212a:	b082      	sub	sp, #8
2400212c:	af00      	add	r7, sp, #0
2400212e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
24002130:	4b15      	ldr	r3, [pc, #84]	; (24002188 <HAL_InitTick+0x60>)
24002132:	781b      	ldrb	r3, [r3, #0]
24002134:	2b00      	cmp	r3, #0
24002136:	d101      	bne.n	2400213c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
24002138:	2301      	movs	r3, #1
2400213a:	e021      	b.n	24002180 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
2400213c:	4b13      	ldr	r3, [pc, #76]	; (2400218c <HAL_InitTick+0x64>)
2400213e:	681a      	ldr	r2, [r3, #0]
24002140:	4b11      	ldr	r3, [pc, #68]	; (24002188 <HAL_InitTick+0x60>)
24002142:	781b      	ldrb	r3, [r3, #0]
24002144:	4619      	mov	r1, r3
24002146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
2400214a:	fbb3 f3f1 	udiv	r3, r3, r1
2400214e:	fbb2 f3f3 	udiv	r3, r2, r3
24002152:	4618      	mov	r0, r3
24002154:	f000 fec1 	bl	24002eda <HAL_SYSTICK_Config>
24002158:	4603      	mov	r3, r0
2400215a:	2b00      	cmp	r3, #0
2400215c:	d001      	beq.n	24002162 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
2400215e:	2301      	movs	r3, #1
24002160:	e00e      	b.n	24002180 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
24002162:	687b      	ldr	r3, [r7, #4]
24002164:	2b0f      	cmp	r3, #15
24002166:	d80a      	bhi.n	2400217e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
24002168:	2200      	movs	r2, #0
2400216a:	6879      	ldr	r1, [r7, #4]
2400216c:	f04f 30ff 	mov.w	r0, #4294967295
24002170:	f000 fe79 	bl	24002e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
24002174:	4a06      	ldr	r2, [pc, #24]	; (24002190 <HAL_InitTick+0x68>)
24002176:	687b      	ldr	r3, [r7, #4]
24002178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
2400217a:	2300      	movs	r3, #0
2400217c:	e000      	b.n	24002180 <HAL_InitTick+0x58>
    return HAL_ERROR;
2400217e:	2301      	movs	r3, #1
}
24002180:	4618      	mov	r0, r3
24002182:	3708      	adds	r7, #8
24002184:	46bd      	mov	sp, r7
24002186:	bd80      	pop	{r7, pc}
24002188:	240004b0 	.word	0x240004b0
2400218c:	240004a4 	.word	0x240004a4
24002190:	240004ac 	.word	0x240004ac

24002194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
24002194:	b480      	push	{r7}
24002196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
24002198:	4b06      	ldr	r3, [pc, #24]	; (240021b4 <HAL_IncTick+0x20>)
2400219a:	781b      	ldrb	r3, [r3, #0]
2400219c:	461a      	mov	r2, r3
2400219e:	4b06      	ldr	r3, [pc, #24]	; (240021b8 <HAL_IncTick+0x24>)
240021a0:	681b      	ldr	r3, [r3, #0]
240021a2:	4413      	add	r3, r2
240021a4:	4a04      	ldr	r2, [pc, #16]	; (240021b8 <HAL_IncTick+0x24>)
240021a6:	6013      	str	r3, [r2, #0]
}
240021a8:	bf00      	nop
240021aa:	46bd      	mov	sp, r7
240021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
240021b0:	4770      	bx	lr
240021b2:	bf00      	nop
240021b4:	240004b0 	.word	0x240004b0
240021b8:	24000524 	.word	0x24000524

240021bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
240021bc:	b480      	push	{r7}
240021be:	af00      	add	r7, sp, #0
  return uwTick;
240021c0:	4b03      	ldr	r3, [pc, #12]	; (240021d0 <HAL_GetTick+0x14>)
240021c2:	681b      	ldr	r3, [r3, #0]
}
240021c4:	4618      	mov	r0, r3
240021c6:	46bd      	mov	sp, r7
240021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240021cc:	4770      	bx	lr
240021ce:	bf00      	nop
240021d0:	24000524 	.word	0x24000524

240021d4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
240021d4:	b480      	push	{r7}
240021d6:	af00      	add	r7, sp, #0
  return uwTickPrio;
240021d8:	4b03      	ldr	r3, [pc, #12]	; (240021e8 <HAL_GetTickPrio+0x14>)
240021da:	681b      	ldr	r3, [r3, #0]
}
240021dc:	4618      	mov	r0, r3
240021de:	46bd      	mov	sp, r7
240021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
240021e4:	4770      	bx	lr
240021e6:	bf00      	nop
240021e8:	240004ac 	.word	0x240004ac

240021ec <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
240021ec:	b580      	push	{r7, lr}
240021ee:	b084      	sub	sp, #16
240021f0:	af00      	add	r7, sp, #0
240021f2:	4603      	mov	r3, r0
240021f4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
240021f6:	2300      	movs	r3, #0
240021f8:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
240021fa:	4b0e      	ldr	r3, [pc, #56]	; (24002234 <HAL_SetTickFreq+0x48>)
240021fc:	781b      	ldrb	r3, [r3, #0]
240021fe:	79fa      	ldrb	r2, [r7, #7]
24002200:	429a      	cmp	r2, r3
24002202:	d012      	beq.n	2400222a <HAL_SetTickFreq+0x3e>
  {

    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
24002204:	4b0b      	ldr	r3, [pc, #44]	; (24002234 <HAL_SetTickFreq+0x48>)
24002206:	781b      	ldrb	r3, [r3, #0]
24002208:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
2400220a:	4a0a      	ldr	r2, [pc, #40]	; (24002234 <HAL_SetTickFreq+0x48>)
2400220c:	79fb      	ldrb	r3, [r7, #7]
2400220e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
24002210:	4b09      	ldr	r3, [pc, #36]	; (24002238 <HAL_SetTickFreq+0x4c>)
24002212:	681b      	ldr	r3, [r3, #0]
24002214:	4618      	mov	r0, r3
24002216:	f7ff ff87 	bl	24002128 <HAL_InitTick>
2400221a:	4603      	mov	r3, r0
2400221c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK)
2400221e:	7bfb      	ldrb	r3, [r7, #15]
24002220:	2b00      	cmp	r3, #0
24002222:	d002      	beq.n	2400222a <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
24002224:	4a03      	ldr	r2, [pc, #12]	; (24002234 <HAL_SetTickFreq+0x48>)
24002226:	7bbb      	ldrb	r3, [r7, #14]
24002228:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
2400222a:	7bfb      	ldrb	r3, [r7, #15]
}
2400222c:	4618      	mov	r0, r3
2400222e:	3710      	adds	r7, #16
24002230:	46bd      	mov	sp, r7
24002232:	bd80      	pop	{r7, pc}
24002234:	240004b0 	.word	0x240004b0
24002238:	240004ac 	.word	0x240004ac

2400223c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
2400223c:	b480      	push	{r7}
2400223e:	af00      	add	r7, sp, #0
  return uwTickFreq;
24002240:	4b03      	ldr	r3, [pc, #12]	; (24002250 <HAL_GetTickFreq+0x14>)
24002242:	781b      	ldrb	r3, [r3, #0]
}
24002244:	4618      	mov	r0, r3
24002246:	46bd      	mov	sp, r7
24002248:	f85d 7b04 	ldr.w	r7, [sp], #4
2400224c:	4770      	bx	lr
2400224e:	bf00      	nop
24002250:	240004b0 	.word	0x240004b0

24002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
24002254:	b580      	push	{r7, lr}
24002256:	b084      	sub	sp, #16
24002258:	af00      	add	r7, sp, #0
2400225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
2400225c:	f7ff ffae 	bl	240021bc <HAL_GetTick>
24002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
24002262:	687b      	ldr	r3, [r7, #4]
24002264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
24002266:	68fb      	ldr	r3, [r7, #12]
24002268:	f1b3 3fff 	cmp.w	r3, #4294967295
2400226c:	d005      	beq.n	2400227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
2400226e:	4b09      	ldr	r3, [pc, #36]	; (24002294 <HAL_Delay+0x40>)
24002270:	781b      	ldrb	r3, [r3, #0]
24002272:	461a      	mov	r2, r3
24002274:	68fb      	ldr	r3, [r7, #12]
24002276:	4413      	add	r3, r2
24002278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
2400227a:	bf00      	nop
2400227c:	f7ff ff9e 	bl	240021bc <HAL_GetTick>
24002280:	4602      	mov	r2, r0
24002282:	68bb      	ldr	r3, [r7, #8]
24002284:	1ad3      	subs	r3, r2, r3
24002286:	68fa      	ldr	r2, [r7, #12]
24002288:	429a      	cmp	r2, r3
2400228a:	d8f7      	bhi.n	2400227c <HAL_Delay+0x28>
  {
  }
}
2400228c:	bf00      	nop
2400228e:	3710      	adds	r7, #16
24002290:	46bd      	mov	sp, r7
24002292:	bd80      	pop	{r7, pc}
24002294:	240004b0 	.word	0x240004b0

24002298 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
24002298:	b480      	push	{r7}
2400229a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
2400229c:	4b05      	ldr	r3, [pc, #20]	; (240022b4 <HAL_SuspendTick+0x1c>)
2400229e:	681b      	ldr	r3, [r3, #0]
240022a0:	4a04      	ldr	r2, [pc, #16]	; (240022b4 <HAL_SuspendTick+0x1c>)
240022a2:	f023 0302 	bic.w	r3, r3, #2
240022a6:	6013      	str	r3, [r2, #0]
}
240022a8:	bf00      	nop
240022aa:	46bd      	mov	sp, r7
240022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
240022b0:	4770      	bx	lr
240022b2:	bf00      	nop
240022b4:	e000e010 	.word	0xe000e010

240022b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
240022b8:	b480      	push	{r7}
240022ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
240022bc:	4b05      	ldr	r3, [pc, #20]	; (240022d4 <HAL_ResumeTick+0x1c>)
240022be:	681b      	ldr	r3, [r3, #0]
240022c0:	4a04      	ldr	r2, [pc, #16]	; (240022d4 <HAL_ResumeTick+0x1c>)
240022c2:	f043 0302 	orr.w	r3, r3, #2
240022c6:	6013      	str	r3, [r2, #0]
}
240022c8:	bf00      	nop
240022ca:	46bd      	mov	sp, r7
240022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
240022d0:	4770      	bx	lr
240022d2:	bf00      	nop
240022d4:	e000e010 	.word	0xe000e010

240022d8 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
240022d8:	b480      	push	{r7}
240022da:	af00      	add	r7, sp, #0
 return __STM32H7xx_HAL_VERSION;
240022dc:	4b02      	ldr	r3, [pc, #8]	; (240022e8 <HAL_GetHalVersion+0x10>)
}
240022de:	4618      	mov	r0, r3
240022e0:	46bd      	mov	sp, r7
240022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240022e6:	4770      	bx	lr
240022e8:	01090000 	.word	0x01090000

240022ec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
240022ec:	b480      	push	{r7}
240022ee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
240022f0:	4b03      	ldr	r3, [pc, #12]	; (24002300 <HAL_GetREVID+0x14>)
240022f2:	681b      	ldr	r3, [r3, #0]
240022f4:	0c1b      	lsrs	r3, r3, #16
}
240022f6:	4618      	mov	r0, r3
240022f8:	46bd      	mov	sp, r7
240022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
240022fe:	4770      	bx	lr
24002300:	5c001000 	.word	0x5c001000

24002304 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
24002304:	b480      	push	{r7}
24002306:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
24002308:	4b04      	ldr	r3, [pc, #16]	; (2400231c <HAL_GetDEVID+0x18>)
2400230a:	681b      	ldr	r3, [r3, #0]
2400230c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
24002310:	4618      	mov	r0, r3
24002312:	46bd      	mov	sp, r7
24002314:	f85d 7b04 	ldr.w	r7, [sp], #4
24002318:	4770      	bx	lr
2400231a:	bf00      	nop
2400231c:	5c001000 	.word	0x5c001000

24002320 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
24002320:	b480      	push	{r7}
24002322:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
24002324:	4b03      	ldr	r3, [pc, #12]	; (24002334 <HAL_GetUIDw0+0x14>)
24002326:	681b      	ldr	r3, [r3, #0]
}
24002328:	4618      	mov	r0, r3
2400232a:	46bd      	mov	sp, r7
2400232c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002330:	4770      	bx	lr
24002332:	bf00      	nop
24002334:	1ff1e800 	.word	0x1ff1e800

24002338 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
24002338:	b480      	push	{r7}
2400233a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
2400233c:	4b03      	ldr	r3, [pc, #12]	; (2400234c <HAL_GetUIDw1+0x14>)
2400233e:	681b      	ldr	r3, [r3, #0]
}
24002340:	4618      	mov	r0, r3
24002342:	46bd      	mov	sp, r7
24002344:	f85d 7b04 	ldr.w	r7, [sp], #4
24002348:	4770      	bx	lr
2400234a:	bf00      	nop
2400234c:	1ff1e804 	.word	0x1ff1e804

24002350 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
24002350:	b480      	push	{r7}
24002352:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
24002354:	4b03      	ldr	r3, [pc, #12]	; (24002364 <HAL_GetUIDw2+0x14>)
24002356:	681b      	ldr	r3, [r3, #0]
}
24002358:	4618      	mov	r0, r3
2400235a:	46bd      	mov	sp, r7
2400235c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002360:	4770      	bx	lr
24002362:	bf00      	nop
24002364:	1ff1e808 	.word	0x1ff1e808

24002368 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT4 around 1.8 V.
  *                                                This requires VDDA equal to or higher than 2.1 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
24002368:	b480      	push	{r7}
2400236a:	b083      	sub	sp, #12
2400236c:	af00      	add	r7, sp, #0
2400236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
24002370:	4b06      	ldr	r3, [pc, #24]	; (2400238c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
24002372:	681b      	ldr	r3, [r3, #0]
24002374:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24002378:	4904      	ldr	r1, [pc, #16]	; (2400238c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
2400237a:	687b      	ldr	r3, [r7, #4]
2400237c:	4313      	orrs	r3, r2
2400237e:	600b      	str	r3, [r1, #0]
}
24002380:	bf00      	nop
24002382:	370c      	adds	r7, #12
24002384:	46bd      	mov	sp, r7
24002386:	f85d 7b04 	ldr.w	r7, [sp], #4
2400238a:	4770      	bx	lr
2400238c:	58003c00 	.word	0x58003c00

24002390 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
24002390:	b480      	push	{r7}
24002392:	b083      	sub	sp, #12
24002394:	af00      	add	r7, sp, #0
24002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
24002398:	4b06      	ldr	r3, [pc, #24]	; (240023b4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
2400239a:	681b      	ldr	r3, [r3, #0]
2400239c:	f023 0202 	bic.w	r2, r3, #2
240023a0:	4904      	ldr	r1, [pc, #16]	; (240023b4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
240023a2:	687b      	ldr	r3, [r7, #4]
240023a4:	4313      	orrs	r3, r2
240023a6:	600b      	str	r3, [r1, #0]
}
240023a8:	bf00      	nop
240023aa:	370c      	adds	r7, #12
240023ac:	46bd      	mov	sp, r7
240023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
240023b2:	4770      	bx	lr
240023b4:	58003c00 	.word	0x58003c00

240023b8 <HAL_SYSCFG_VREFBUF_TrimmingConfig>:
/**
  * @brief  Tune the Internal Voltage Reference buffer (VREFBUF).
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_TrimmingConfig(uint32_t TrimmingValue)
{
240023b8:	b480      	push	{r7}
240023ba:	b083      	sub	sp, #12
240023bc:	af00      	add	r7, sp, #0
240023be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_TRIMMING(TrimmingValue));

  MODIFY_REG(VREFBUF->CCR, VREFBUF_CCR_TRIM, TrimmingValue);
240023c0:	4b06      	ldr	r3, [pc, #24]	; (240023dc <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
240023c2:	685b      	ldr	r3, [r3, #4]
240023c4:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
240023c8:	4904      	ldr	r1, [pc, #16]	; (240023dc <HAL_SYSCFG_VREFBUF_TrimmingConfig+0x24>)
240023ca:	687b      	ldr	r3, [r7, #4]
240023cc:	4313      	orrs	r3, r2
240023ce:	604b      	str	r3, [r1, #4]
}
240023d0:	bf00      	nop
240023d2:	370c      	adds	r7, #12
240023d4:	46bd      	mov	sp, r7
240023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
240023da:	4770      	bx	lr
240023dc:	58003c00 	.word	0x58003c00

240023e0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
240023e0:	b580      	push	{r7, lr}
240023e2:	b082      	sub	sp, #8
240023e4:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
240023e6:	4b0f      	ldr	r3, [pc, #60]	; (24002424 <HAL_SYSCFG_EnableVREFBUF+0x44>)
240023e8:	681b      	ldr	r3, [r3, #0]
240023ea:	4a0e      	ldr	r2, [pc, #56]	; (24002424 <HAL_SYSCFG_EnableVREFBUF+0x44>)
240023ec:	f043 0301 	orr.w	r3, r3, #1
240023f0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
240023f2:	f7ff fee3 	bl	240021bc <HAL_GetTick>
240023f6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
240023f8:	e008      	b.n	2400240c <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
240023fa:	f7ff fedf 	bl	240021bc <HAL_GetTick>
240023fe:	4602      	mov	r2, r0
24002400:	687b      	ldr	r3, [r7, #4]
24002402:	1ad3      	subs	r3, r2, r3
24002404:	2b0a      	cmp	r3, #10
24002406:	d901      	bls.n	2400240c <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
24002408:	2303      	movs	r3, #3
2400240a:	e006      	b.n	2400241a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while(READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
2400240c:	4b05      	ldr	r3, [pc, #20]	; (24002424 <HAL_SYSCFG_EnableVREFBUF+0x44>)
2400240e:	681b      	ldr	r3, [r3, #0]
24002410:	f003 0308 	and.w	r3, r3, #8
24002414:	2b00      	cmp	r3, #0
24002416:	d0f0      	beq.n	240023fa <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
24002418:	2300      	movs	r3, #0
}
2400241a:	4618      	mov	r0, r3
2400241c:	3708      	adds	r7, #8
2400241e:	46bd      	mov	sp, r7
24002420:	bd80      	pop	{r7, pc}
24002422:	bf00      	nop
24002424:	58003c00 	.word	0x58003c00

24002428 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
24002428:	b480      	push	{r7}
2400242a:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
2400242c:	4b05      	ldr	r3, [pc, #20]	; (24002444 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
2400242e:	681b      	ldr	r3, [r3, #0]
24002430:	4a04      	ldr	r2, [pc, #16]	; (24002444 <HAL_SYSCFG_DisableVREFBUF+0x1c>)
24002432:	f023 0301 	bic.w	r3, r3, #1
24002436:	6013      	str	r3, [r2, #0]
}
24002438:	bf00      	nop
2400243a:	46bd      	mov	sp, r7
2400243c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002440:	4770      	bx	lr
24002442:	bf00      	nop
24002444:	58003c00 	.word	0x58003c00

24002448 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
24002448:	b480      	push	{r7}
2400244a:	b083      	sub	sp, #12
2400244c:	af00      	add	r7, sp, #0
2400244e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
24002450:	4b06      	ldr	r3, [pc, #24]	; (2400246c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
24002452:	685b      	ldr	r3, [r3, #4]
24002454:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
24002458:	4904      	ldr	r1, [pc, #16]	; (2400246c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
2400245a:	687b      	ldr	r3, [r7, #4]
2400245c:	4313      	orrs	r3, r2
2400245e:	604b      	str	r3, [r1, #4]
}
24002460:	bf00      	nop
24002462:	370c      	adds	r7, #12
24002464:	46bd      	mov	sp, r7
24002466:	f85d 7b04 	ldr.w	r7, [sp], #4
2400246a:	4770      	bx	lr
2400246c:	58000400 	.word	0x58000400

24002470 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
24002470:	b480      	push	{r7}
24002472:	b083      	sub	sp, #12
24002474:	af00      	add	r7, sp, #0
24002476:	6078      	str	r0, [r7, #4]
24002478:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
2400247a:	4b07      	ldr	r3, [pc, #28]	; (24002498 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
2400247c:	685a      	ldr	r2, [r3, #4]
2400247e:	687b      	ldr	r3, [r7, #4]
24002480:	43db      	mvns	r3, r3
24002482:	401a      	ands	r2, r3
24002484:	4904      	ldr	r1, [pc, #16]	; (24002498 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
24002486:	683b      	ldr	r3, [r7, #0]
24002488:	4313      	orrs	r3, r2
2400248a:	604b      	str	r3, [r1, #4]
}
2400248c:	bf00      	nop
2400248e:	370c      	adds	r7, #12
24002490:	46bd      	mov	sp, r7
24002492:	f85d 7b04 	ldr.w	r7, [sp], #4
24002496:	4770      	bx	lr
24002498:	58000400 	.word	0x58000400

2400249c <HAL_SYSCFG_EnableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_EnableBOOST(void)
{
2400249c:	b480      	push	{r7}
2400249e:	af00      	add	r7, sp, #0
 SET_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
240024a0:	4b05      	ldr	r3, [pc, #20]	; (240024b8 <HAL_SYSCFG_EnableBOOST+0x1c>)
240024a2:	685b      	ldr	r3, [r3, #4]
240024a4:	4a04      	ldr	r2, [pc, #16]	; (240024b8 <HAL_SYSCFG_EnableBOOST+0x1c>)
240024a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
240024aa:	6053      	str	r3, [r2, #4]
}
240024ac:	bf00      	nop
240024ae:	46bd      	mov	sp, r7
240024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
240024b4:	4770      	bx	lr
240024b6:	bf00      	nop
240024b8:	58000400 	.word	0x58000400

240024bc <HAL_SYSCFG_DisableBOOST>:
  *         when the supply voltage is below 2.7 V: in this case, the analog switch
  *         performance is the same on the full voltage range
  * @retval None
  */
void HAL_SYSCFG_DisableBOOST(void)
{
240024bc:	b480      	push	{r7}
240024be:	af00      	add	r7, sp, #0
 CLEAR_BIT(SYSCFG->PMCR, SYSCFG_PMCR_BOOSTEN) ;
240024c0:	4b05      	ldr	r3, [pc, #20]	; (240024d8 <HAL_SYSCFG_DisableBOOST+0x1c>)
240024c2:	685b      	ldr	r3, [r3, #4]
240024c4:	4a04      	ldr	r2, [pc, #16]	; (240024d8 <HAL_SYSCFG_DisableBOOST+0x1c>)
240024c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
240024ca:	6053      	str	r3, [r2, #4]
}
240024cc:	bf00      	nop
240024ce:	46bd      	mov	sp, r7
240024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
240024d4:	4770      	bx	lr
240024d6:	bf00      	nop
240024d8:	58000400 	.word	0x58000400

240024dc <HAL_SYSCFG_CM7BootAddConfig>:
  *   @arg SYSCFG_BOOT_ADDR1:  Select the boot address1
  * @param  BootAddress :Specifies the CM7 Boot Address to be loaded in Address0 or Address1
  * @retval None
  */
void HAL_SYSCFG_CM7BootAddConfig(uint32_t BootRegister, uint32_t BootAddress)
{
240024dc:	b480      	push	{r7}
240024de:	b083      	sub	sp, #12
240024e0:	af00      	add	r7, sp, #0
240024e2:	6078      	str	r0, [r7, #4]
240024e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_SYSCFG_BOOT_REGISTER(BootRegister));
  assert_param(IS_SYSCFG_BOOT_ADDRESS(BootAddress));
  if ( BootRegister == SYSCFG_BOOT_ADDR0 )
240024e6:	687b      	ldr	r3, [r7, #4]
240024e8:	2b00      	cmp	r3, #0
240024ea:	d10b      	bne.n	24002504 <HAL_SYSCFG_CM7BootAddConfig+0x28>
  {
    /* Configure CM7 BOOT ADD0 */
#if defined(DUAL_CORE)
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BCM7_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BCM7_ADD0_Pos));
#else
    MODIFY_REG(SYSCFG->UR2, SYSCFG_UR2_BOOT_ADD0, ((BootAddress >> 16) << SYSCFG_UR2_BOOT_ADD0_Pos));
240024ec:	4b0e      	ldr	r3, [pc, #56]	; (24002528 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
240024ee:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
240024f2:	b29a      	uxth	r2, r3
240024f4:	683b      	ldr	r3, [r7, #0]
240024f6:	0c1b      	lsrs	r3, r3, #16
240024f8:	041b      	lsls	r3, r3, #16
240024fa:	490b      	ldr	r1, [pc, #44]	; (24002528 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
240024fc:	4313      	orrs	r3, r2
240024fe:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BCM7_ADD1, (BootAddress >> 16));
#else
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
#endif /*DUAL_CORE*/
  }
}
24002502:	e00a      	b.n	2400251a <HAL_SYSCFG_CM7BootAddConfig+0x3e>
    MODIFY_REG(SYSCFG->UR3, SYSCFG_UR3_BOOT_ADD1, (BootAddress >> 16));
24002504:	4b08      	ldr	r3, [pc, #32]	; (24002528 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24002506:	f8d3 230c 	ldr.w	r2, [r3, #780]	; 0x30c
2400250a:	4b08      	ldr	r3, [pc, #32]	; (2400252c <HAL_SYSCFG_CM7BootAddConfig+0x50>)
2400250c:	4013      	ands	r3, r2
2400250e:	683a      	ldr	r2, [r7, #0]
24002510:	0c12      	lsrs	r2, r2, #16
24002512:	4905      	ldr	r1, [pc, #20]	; (24002528 <HAL_SYSCFG_CM7BootAddConfig+0x4c>)
24002514:	4313      	orrs	r3, r2
24002516:	f8c1 330c 	str.w	r3, [r1, #780]	; 0x30c
}
2400251a:	bf00      	nop
2400251c:	370c      	adds	r7, #12
2400251e:	46bd      	mov	sp, r7
24002520:	f85d 7b04 	ldr.w	r7, [sp], #4
24002524:	4770      	bx	lr
24002526:	bf00      	nop
24002528:	58000400 	.word	0x58000400
2400252c:	ffff0000 	.word	0xffff0000

24002530 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
24002530:	b480      	push	{r7}
24002532:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
24002534:	4b05      	ldr	r3, [pc, #20]	; (2400254c <HAL_EnableCompensationCell+0x1c>)
24002536:	6a1b      	ldr	r3, [r3, #32]
24002538:	4a04      	ldr	r2, [pc, #16]	; (2400254c <HAL_EnableCompensationCell+0x1c>)
2400253a:	f043 0301 	orr.w	r3, r3, #1
2400253e:	6213      	str	r3, [r2, #32]
}
24002540:	bf00      	nop
24002542:	46bd      	mov	sp, r7
24002544:	f85d 7b04 	ldr.w	r7, [sp], #4
24002548:	4770      	bx	lr
2400254a:	bf00      	nop
2400254c:	58000400 	.word	0x58000400

24002550 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
24002550:	b480      	push	{r7}
24002552:	af00      	add	r7, sp, #0
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN);
24002554:	4b05      	ldr	r3, [pc, #20]	; (2400256c <HAL_DisableCompensationCell+0x1c>)
24002556:	6a1b      	ldr	r3, [r3, #32]
24002558:	4a04      	ldr	r2, [pc, #16]	; (2400256c <HAL_DisableCompensationCell+0x1c>)
2400255a:	f023 0301 	bic.w	r3, r3, #1
2400255e:	6213      	str	r3, [r2, #32]
}
24002560:	bf00      	nop
24002562:	46bd      	mov	sp, r7
24002564:	f85d 7b04 	ldr.w	r7, [sp], #4
24002568:	4770      	bx	lr
2400256a:	bf00      	nop
2400256c:	58000400 	.word	0x58000400

24002570 <HAL_SYSCFG_EnableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_EnableIOSpeedOptimize(void)
{
24002570:	b480      	push	{r7}
24002572:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
24002574:	4b05      	ldr	r3, [pc, #20]	; (2400258c <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
24002576:	6a1b      	ldr	r3, [r3, #32]
24002578:	4a04      	ldr	r2, [pc, #16]	; (2400258c <HAL_SYSCFG_EnableIOSpeedOptimize+0x1c>)
2400257a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400257e:	6213      	str	r3, [r2, #32]
#else
  SET_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
24002580:	bf00      	nop
24002582:	46bd      	mov	sp, r7
24002584:	f85d 7b04 	ldr.w	r7, [sp], #4
24002588:	4770      	bx	lr
2400258a:	bf00      	nop
2400258c:	58000400 	.word	0x58000400

24002590 <HAL_SYSCFG_DisableIOSpeedOptimize>:
  *         used only if the product supply voltage is below 2.5 V. Setting this bit when VDD is
  *         higher than 2.5 V might be destructive.
  * @retval None
  */
void HAL_SYSCFG_DisableIOSpeedOptimize(void)
{
24002590:	b480      	push	{r7}
24002592:	af00      	add	r7, sp, #0
#if defined(SYSCFG_CCCSR_HSLV)
  CLEAR_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_HSLV);
24002594:	4b05      	ldr	r3, [pc, #20]	; (240025ac <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
24002596:	6a1b      	ldr	r3, [r3, #32]
24002598:	4a04      	ldr	r2, [pc, #16]	; (240025ac <HAL_SYSCFG_DisableIOSpeedOptimize+0x1c>)
2400259a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400259e:	6213      	str	r3, [r2, #32]
#else
  CLEAR_BIT(SYSCFG->CCCSR, (SYSCFG_CCCSR_HSLV0| SYSCFG_CCCSR_HSLV1 | SYSCFG_CCCSR_HSLV2  | SYSCFG_CCCSR_HSLV3));
#endif   /* SYSCFG_CCCSR_HSLV */
}
240025a0:	bf00      	nop
240025a2:	46bd      	mov	sp, r7
240025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
240025a8:	4770      	bx	lr
240025aa:	bf00      	nop
240025ac:	58000400 	.word	0x58000400

240025b0 <HAL_SYSCFG_CompensationCodeSelect>:
  *   @arg SYSCFG_CELL_CODE : Select Code from the cell (available in the SYSCFG_CCVR)
  *   @arg SYSCFG_REGISTER_CODE: Select Code from the SYSCFG compensation cell code register (SYSCFG_CCCR)
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeSelect(uint32_t SYSCFG_CompCode)
{
240025b0:	b480      	push	{r7}
240025b2:	b083      	sub	sp, #12
240025b4:	af00      	add	r7, sp, #0
240025b6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_SELECT(SYSCFG_CompCode));
  MODIFY_REG(SYSCFG->CCCSR, SYSCFG_CCCSR_CS, (uint32_t)(SYSCFG_CompCode));
240025b8:	4b06      	ldr	r3, [pc, #24]	; (240025d4 <HAL_SYSCFG_CompensationCodeSelect+0x24>)
240025ba:	6a1b      	ldr	r3, [r3, #32]
240025bc:	f023 0202 	bic.w	r2, r3, #2
240025c0:	4904      	ldr	r1, [pc, #16]	; (240025d4 <HAL_SYSCFG_CompensationCodeSelect+0x24>)
240025c2:	687b      	ldr	r3, [r7, #4]
240025c4:	4313      	orrs	r3, r2
240025c6:	620b      	str	r3, [r1, #32]
}
240025c8:	bf00      	nop
240025ca:	370c      	adds	r7, #12
240025cc:	46bd      	mov	sp, r7
240025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
240025d2:	4770      	bx	lr
240025d4:	58000400 	.word	0x58000400

240025d8 <HAL_SYSCFG_CompensationCodeConfig>:
  *         This code is applied to the I/O compensation cell when the CS bit of the
  *          SYSCFG_CMPCR is set
  * @retval None
  */
void HAL_SYSCFG_CompensationCodeConfig(uint32_t SYSCFG_PMOSCode, uint32_t SYSCFG_NMOSCode )
{
240025d8:	b480      	push	{r7}
240025da:	b083      	sub	sp, #12
240025dc:	af00      	add	r7, sp, #0
240025de:	6078      	str	r0, [r7, #4]
240025e0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_PMOSCode));
  assert_param(IS_SYSCFG_CODE_CONFIG(SYSCFG_NMOSCode));
  MODIFY_REG(SYSCFG->CCCR, SYSCFG_CCCR_NCC|SYSCFG_CCCR_PCC, (((uint32_t)(SYSCFG_PMOSCode)<< 4)|(uint32_t)(SYSCFG_NMOSCode)) );
240025e2:	4b08      	ldr	r3, [pc, #32]	; (24002604 <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
240025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240025e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
240025ea:	687b      	ldr	r3, [r7, #4]
240025ec:	0119      	lsls	r1, r3, #4
240025ee:	683b      	ldr	r3, [r7, #0]
240025f0:	430b      	orrs	r3, r1
240025f2:	4904      	ldr	r1, [pc, #16]	; (24002604 <HAL_SYSCFG_CompensationCodeConfig+0x2c>)
240025f4:	4313      	orrs	r3, r2
240025f6:	628b      	str	r3, [r1, #40]	; 0x28
}
240025f8:	bf00      	nop
240025fa:	370c      	adds	r7, #12
240025fc:	46bd      	mov	sp, r7
240025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24002602:	4770      	bx	lr
24002604:	58000400 	.word	0x58000400

24002608 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_EnableDBGSleepMode(void)
{
24002608:	b480      	push	{r7}
2400260a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
2400260c:	4b05      	ldr	r3, [pc, #20]	; (24002624 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
2400260e:	685b      	ldr	r3, [r3, #4]
24002610:	4a04      	ldr	r2, [pc, #16]	; (24002624 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
24002612:	f043 0301 	orr.w	r3, r3, #1
24002616:	6053      	str	r3, [r2, #4]
}
24002618:	bf00      	nop
2400261a:	46bd      	mov	sp, r7
2400261c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002620:	4770      	bx	lr
24002622:	bf00      	nop
24002624:	5c001000 	.word	0x5c001000

24002628 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain SLEEP mode
  * @retval None
  */
void HAL_DisableDBGSleepMode(void)
{
24002628:	b480      	push	{r7}
2400262a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEPD1);
2400262c:	4b05      	ldr	r3, [pc, #20]	; (24002644 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
2400262e:	685b      	ldr	r3, [r3, #4]
24002630:	4a04      	ldr	r2, [pc, #16]	; (24002644 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
24002632:	f023 0301 	bic.w	r3, r3, #1
24002636:	6053      	str	r3, [r2, #4]
}
24002638:	bf00      	nop
2400263a:	46bd      	mov	sp, r7
2400263c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002640:	4770      	bx	lr
24002642:	bf00      	nop
24002644:	5c001000 	.word	0x5c001000

24002648 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_EnableDBGStopMode(void)
{
24002648:	b480      	push	{r7}
2400264a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
2400264c:	4b05      	ldr	r3, [pc, #20]	; (24002664 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
2400264e:	685b      	ldr	r3, [r3, #4]
24002650:	4a04      	ldr	r2, [pc, #16]	; (24002664 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
24002652:	f043 0302 	orr.w	r3, r3, #2
24002656:	6053      	str	r3, [r2, #4]
}
24002658:	bf00      	nop
2400265a:	46bd      	mov	sp, r7
2400265c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002660:	4770      	bx	lr
24002662:	bf00      	nop
24002664:	5c001000 	.word	0x5c001000

24002668 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STOP mode
  * @retval None
  */
void HAL_DisableDBGStopMode(void)
{
24002668:	b480      	push	{r7}
2400266a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD1);
2400266c:	4b05      	ldr	r3, [pc, #20]	; (24002684 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
2400266e:	685b      	ldr	r3, [r3, #4]
24002670:	4a04      	ldr	r2, [pc, #16]	; (24002684 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
24002672:	f023 0302 	bic.w	r3, r3, #2
24002676:	6053      	str	r3, [r2, #4]
}
24002678:	bf00      	nop
2400267a:	46bd      	mov	sp, r7
2400267c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002680:	4770      	bx	lr
24002682:	bf00      	nop
24002684:	5c001000 	.word	0x5c001000

24002688 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_EnableDBGStandbyMode(void)
{
24002688:	b480      	push	{r7}
2400268a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
2400268c:	4b05      	ldr	r3, [pc, #20]	; (240026a4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
2400268e:	685b      	ldr	r3, [r3, #4]
24002690:	4a04      	ldr	r2, [pc, #16]	; (240026a4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
24002692:	f043 0304 	orr.w	r3, r3, #4
24002696:	6053      	str	r3, [r2, #4]
}
24002698:	bf00      	nop
2400269a:	46bd      	mov	sp, r7
2400269c:	f85d 7b04 	ldr.w	r7, [sp], #4
240026a0:	4770      	bx	lr
240026a2:	bf00      	nop
240026a4:	5c001000 	.word	0x5c001000

240026a8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during Domain1/CDomain STANDBY mode
  * @retval None
  */
void HAL_DisableDBGStandbyMode(void)
{
240026a8:	b480      	push	{r7}
240026aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD1);
240026ac:	4b05      	ldr	r3, [pc, #20]	; (240026c4 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
240026ae:	685b      	ldr	r3, [r3, #4]
240026b0:	4a04      	ldr	r2, [pc, #16]	; (240026c4 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
240026b2:	f023 0304 	bic.w	r3, r3, #4
240026b6:	6053      	str	r3, [r2, #4]
}
240026b8:	bf00      	nop
240026ba:	46bd      	mov	sp, r7
240026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
240026c0:	4770      	bx	lr
240026c2:	bf00      	nop
240026c4:	5c001000 	.word	0x5c001000

240026c8 <HAL_EnableDomain3DBGStopMode>:
/**
  * @brief  Enable the Debug Module during Domain3/SRDomain STOP mode
  * @retval None
  */
void HAL_EnableDomain3DBGStopMode(void)
{
240026c8:	b480      	push	{r7}
240026ca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD3);
240026cc:	4b05      	ldr	r3, [pc, #20]	; (240026e4 <HAL_EnableDomain3DBGStopMode+0x1c>)
240026ce:	685b      	ldr	r3, [r3, #4]
240026d0:	4a04      	ldr	r2, [pc, #16]	; (240026e4 <HAL_EnableDomain3DBGStopMode+0x1c>)
240026d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
240026d6:	6053      	str	r3, [r2, #4]
}
240026d8:	bf00      	nop
240026da:	46bd      	mov	sp, r7
240026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
240026e0:	4770      	bx	lr
240026e2:	bf00      	nop
240026e4:	5c001000 	.word	0x5c001000

240026e8 <HAL_DisableDomain3DBGStopMode>:
/**
  * @brief  Disable the Debug Module during Domain3/SRDomain STOP mode
  * @retval None
  */
void HAL_DisableDomain3DBGStopMode(void)
{
240026e8:	b480      	push	{r7}
240026ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOPD3);
240026ec:	4b05      	ldr	r3, [pc, #20]	; (24002704 <HAL_DisableDomain3DBGStopMode+0x1c>)
240026ee:	685b      	ldr	r3, [r3, #4]
240026f0:	4a04      	ldr	r2, [pc, #16]	; (24002704 <HAL_DisableDomain3DBGStopMode+0x1c>)
240026f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
240026f6:	6053      	str	r3, [r2, #4]
}
240026f8:	bf00      	nop
240026fa:	46bd      	mov	sp, r7
240026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
24002700:	4770      	bx	lr
24002702:	bf00      	nop
24002704:	5c001000 	.word	0x5c001000

24002708 <HAL_EnableDomain3DBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during Domain3/SRDomain STANDBY mode
  * @retval None
  */
void HAL_EnableDomain3DBGStandbyMode(void)
{
24002708:	b480      	push	{r7}
2400270a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD3);
2400270c:	4b05      	ldr	r3, [pc, #20]	; (24002724 <HAL_EnableDomain3DBGStandbyMode+0x1c>)
2400270e:	685b      	ldr	r3, [r3, #4]
24002710:	4a04      	ldr	r2, [pc, #16]	; (24002724 <HAL_EnableDomain3DBGStandbyMode+0x1c>)
24002712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24002716:	6053      	str	r3, [r2, #4]
}
24002718:	bf00      	nop
2400271a:	46bd      	mov	sp, r7
2400271c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002720:	4770      	bx	lr
24002722:	bf00      	nop
24002724:	5c001000 	.word	0x5c001000

24002728 <HAL_DisableDomain3DBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during Domain3/SRDomain STANDBY mode
  * @retval None
  */
void HAL_DisableDomain3DBGStandbyMode(void)
{
24002728:	b480      	push	{r7}
2400272a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBYD3);
2400272c:	4b05      	ldr	r3, [pc, #20]	; (24002744 <HAL_DisableDomain3DBGStandbyMode+0x1c>)
2400272e:	685b      	ldr	r3, [r3, #4]
24002730:	4a04      	ldr	r2, [pc, #16]	; (24002744 <HAL_DisableDomain3DBGStandbyMode+0x1c>)
24002732:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24002736:	6053      	str	r3, [r2, #4]
}
24002738:	bf00      	nop
2400273a:	46bd      	mov	sp, r7
2400273c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002740:	4770      	bx	lr
24002742:	bf00      	nop
24002744:	5c001000 	.word	0x5c001000

24002748 <HAL_SetFMCMemorySwappingConfig>:
  * @param  BankMapConfig: Defines the FMC Bank mapping configuration. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
  * @retval HAL state
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
24002748:	b480      	push	{r7}
2400274a:	b083      	sub	sp, #12
2400274c:	af00      	add	r7, sp, #0
2400274e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
24002750:	4b06      	ldr	r3, [pc, #24]	; (2400276c <HAL_SetFMCMemorySwappingConfig+0x24>)
24002752:	681b      	ldr	r3, [r3, #0]
24002754:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
24002758:	4904      	ldr	r1, [pc, #16]	; (2400276c <HAL_SetFMCMemorySwappingConfig+0x24>)
2400275a:	687b      	ldr	r3, [r7, #4]
2400275c:	4313      	orrs	r3, r2
2400275e:	600b      	str	r3, [r1, #0]
}
24002760:	bf00      	nop
24002762:	370c      	adds	r7, #12
24002764:	46bd      	mov	sp, r7
24002766:	f85d 7b04 	ldr.w	r7, [sp], #4
2400276a:	4770      	bx	lr
2400276c:	52004000 	.word	0x52004000

24002770 <HAL_GetFMCMemorySwappingConfig>:
  * @brief  Get FMC Bank mapping mode.
  * @retval The FMC Bank mapping mode. This parameter can be
            FMC_SWAPBMAP_DISABLE, FMC_SWAPBMAP_SDRAM_SRAM, FMC_SWAPBMAP_SDRAMB2
*/
uint32_t HAL_GetFMCMemorySwappingConfig(void)
{
24002770:	b480      	push	{r7}
24002772:	af00      	add	r7, sp, #0
  return READ_BIT(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP);
24002774:	4b04      	ldr	r3, [pc, #16]	; (24002788 <HAL_GetFMCMemorySwappingConfig+0x18>)
24002776:	681b      	ldr	r3, [r3, #0]
24002778:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
}
2400277c:	4618      	mov	r0, r3
2400277e:	46bd      	mov	sp, r7
24002780:	f85d 7b04 	ldr.w	r7, [sp], #4
24002784:	4770      	bx	lr
24002786:	bf00      	nop
24002788:	52004000 	.word	0x52004000

2400278c <HAL_EXTI_EdgeConfig>:
  *   @arg EXTI_RISING_EDGE : Configurable line, with Rising edge trigger detection
  *   @arg EXTI_FALLING_EDGE: Configurable line, with Falling edge trigger detection
  * @retval None
  */
void HAL_EXTI_EdgeConfig(uint32_t EXTI_Line , uint32_t EXTI_Edge )
{
2400278c:	b480      	push	{r7}
2400278e:	b083      	sub	sp, #12
24002790:	af00      	add	r7, sp, #0
24002792:	6078      	str	r0, [r7, #4]
24002794:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));
  assert_param(IS_EXTI_EDGE_LINE(EXTI_Edge));

  /* Clear Rising Falling edge configuration */
  CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002796:	687b      	ldr	r3, [r7, #4]
24002798:	095b      	lsrs	r3, r3, #5
2400279a:	015a      	lsls	r2, r3, #5
2400279c:	4b2e      	ldr	r3, [pc, #184]	; (24002858 <HAL_EXTI_EdgeConfig+0xcc>)
2400279e:	4413      	add	r3, r2
240027a0:	6819      	ldr	r1, [r3, #0]
240027a2:	687b      	ldr	r3, [r7, #4]
240027a4:	f003 031f 	and.w	r3, r3, #31
240027a8:	2201      	movs	r2, #1
240027aa:	fa02 f303 	lsl.w	r3, r2, r3
240027ae:	43da      	mvns	r2, r3
240027b0:	687b      	ldr	r3, [r7, #4]
240027b2:	095b      	lsrs	r3, r3, #5
240027b4:	0158      	lsls	r0, r3, #5
240027b6:	4b28      	ldr	r3, [pc, #160]	; (24002858 <HAL_EXTI_EdgeConfig+0xcc>)
240027b8:	4403      	add	r3, r0
240027ba:	4618      	mov	r0, r3
240027bc:	ea01 0302 	and.w	r3, r1, r2
240027c0:	6003      	str	r3, [r0, #0]
  CLEAR_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240027c2:	687b      	ldr	r3, [r7, #4]
240027c4:	095b      	lsrs	r3, r3, #5
240027c6:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
240027ca:	015b      	lsls	r3, r3, #5
240027cc:	681a      	ldr	r2, [r3, #0]
240027ce:	687b      	ldr	r3, [r7, #4]
240027d0:	f003 031f 	and.w	r3, r3, #31
240027d4:	2101      	movs	r1, #1
240027d6:	fa01 f303 	lsl.w	r3, r1, r3
240027da:	43db      	mvns	r3, r3
240027dc:	6879      	ldr	r1, [r7, #4]
240027de:	0949      	lsrs	r1, r1, #5
240027e0:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
240027e4:	0149      	lsls	r1, r1, #5
240027e6:	4013      	ands	r3, r2
240027e8:	600b      	str	r3, [r1, #0]

  if( (EXTI_Edge & EXTI_RISING_EDGE) == EXTI_RISING_EDGE)
240027ea:	683b      	ldr	r3, [r7, #0]
240027ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
240027f0:	2b00      	cmp	r3, #0
240027f2:	d012      	beq.n	2400281a <HAL_EXTI_EdgeConfig+0x8e>
  {
   SET_BIT( *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240027f4:	687b      	ldr	r3, [r7, #4]
240027f6:	095b      	lsrs	r3, r3, #5
240027f8:	f103 7330 	add.w	r3, r3, #46137344	; 0x2c00000
240027fc:	015b      	lsls	r3, r3, #5
240027fe:	681a      	ldr	r2, [r3, #0]
24002800:	687b      	ldr	r3, [r7, #4]
24002802:	f003 031f 	and.w	r3, r3, #31
24002806:	2101      	movs	r1, #1
24002808:	fa01 f303 	lsl.w	r3, r1, r3
2400280c:	6879      	ldr	r1, [r7, #4]
2400280e:	0949      	lsrs	r1, r1, #5
24002810:	f101 7130 	add.w	r1, r1, #46137344	; 0x2c00000
24002814:	0149      	lsls	r1, r1, #5
24002816:	4313      	orrs	r3, r2
24002818:	600b      	str	r3, [r1, #0]
  }
  if( (EXTI_Edge & EXTI_FALLING_EDGE) == EXTI_FALLING_EDGE)
2400281a:	683b      	ldr	r3, [r7, #0]
2400281c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24002820:	2b00      	cmp	r3, #0
24002822:	d013      	beq.n	2400284c <HAL_EXTI_EdgeConfig+0xc0>
  {
   SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002824:	687b      	ldr	r3, [r7, #4]
24002826:	095b      	lsrs	r3, r3, #5
24002828:	015a      	lsls	r2, r3, #5
2400282a:	4b0b      	ldr	r3, [pc, #44]	; (24002858 <HAL_EXTI_EdgeConfig+0xcc>)
2400282c:	4413      	add	r3, r2
2400282e:	6819      	ldr	r1, [r3, #0]
24002830:	687b      	ldr	r3, [r7, #4]
24002832:	f003 031f 	and.w	r3, r3, #31
24002836:	2201      	movs	r2, #1
24002838:	409a      	lsls	r2, r3
2400283a:	687b      	ldr	r3, [r7, #4]
2400283c:	095b      	lsrs	r3, r3, #5
2400283e:	0158      	lsls	r0, r3, #5
24002840:	4b05      	ldr	r3, [pc, #20]	; (24002858 <HAL_EXTI_EdgeConfig+0xcc>)
24002842:	4403      	add	r3, r0
24002844:	4618      	mov	r0, r3
24002846:	ea41 0302 	orr.w	r3, r1, r2
2400284a:	6003      	str	r3, [r0, #0]
  }
}
2400284c:	bf00      	nop
2400284e:	370c      	adds	r7, #12
24002850:	46bd      	mov	sp, r7
24002852:	f85d 7b04 	ldr.w	r7, [sp], #4
24002856:	4770      	bx	lr
24002858:	58000004 	.word	0x58000004

2400285c <HAL_EXTI_GenerateSWInterrupt>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *          (EXTI_LINE0..EXTI_LINE21),EXTI_LINE49,EXTI_LINE51,EXTI_LINE82,EXTI_LINE84,EXTI_LINE85 and EXTI_LINE86.
  * @retval None
  */
void HAL_EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
2400285c:	b480      	push	{r7}
2400285e:	b083      	sub	sp, #12
24002860:	af00      	add	r7, sp, #0
24002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HAL_EXTI_CONFIG_LINE(EXTI_Line));

  SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->SWIER1)) + ((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002864:	687b      	ldr	r3, [r7, #4]
24002866:	095b      	lsrs	r3, r3, #5
24002868:	015a      	lsls	r2, r3, #5
2400286a:	4b0b      	ldr	r3, [pc, #44]	; (24002898 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
2400286c:	4413      	add	r3, r2
2400286e:	6819      	ldr	r1, [r3, #0]
24002870:	687b      	ldr	r3, [r7, #4]
24002872:	f003 031f 	and.w	r3, r3, #31
24002876:	2201      	movs	r2, #1
24002878:	409a      	lsls	r2, r3
2400287a:	687b      	ldr	r3, [r7, #4]
2400287c:	095b      	lsrs	r3, r3, #5
2400287e:	0158      	lsls	r0, r3, #5
24002880:	4b05      	ldr	r3, [pc, #20]	; (24002898 <HAL_EXTI_GenerateSWInterrupt+0x3c>)
24002882:	4403      	add	r3, r0
24002884:	4618      	mov	r0, r3
24002886:	ea41 0302 	orr.w	r3, r1, r2
2400288a:	6003      	str	r3, [r0, #0]
}
2400288c:	bf00      	nop
2400288e:	370c      	adds	r7, #12
24002890:	46bd      	mov	sp, r7
24002892:	f85d 7b04 	ldr.w	r7, [sp], #4
24002896:	4770      	bx	lr
24002898:	58000008 	.word	0x58000008

2400289c <HAL_EXTI_D1_ClearFlag>:
  * @param   EXTI_Line: Specifies the EXTI LINE, it can be one of the following values,
  *         (EXTI_LINE0....EXTI_LINE87)excluding :line45, line81,line83 which are reserved
  * @retval None
  */
void HAL_EXTI_D1_ClearFlag(uint32_t EXTI_Line)
{
2400289c:	b480      	push	{r7}
2400289e:	b083      	sub	sp, #12
240028a0:	af00      	add	r7, sp, #0
240028a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
 assert_param(IS_EXTI_D1_LINE(EXTI_Line));
 WRITE_REG(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->PR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240028a4:	687b      	ldr	r3, [r7, #4]
240028a6:	f003 021f 	and.w	r2, r3, #31
240028aa:	687b      	ldr	r3, [r7, #4]
240028ac:	095b      	lsrs	r3, r3, #5
240028ae:	0119      	lsls	r1, r3, #4
240028b0:	4b05      	ldr	r3, [pc, #20]	; (240028c8 <HAL_EXTI_D1_ClearFlag+0x2c>)
240028b2:	440b      	add	r3, r1
240028b4:	4619      	mov	r1, r3
240028b6:	2301      	movs	r3, #1
240028b8:	4093      	lsls	r3, r2
240028ba:	600b      	str	r3, [r1, #0]

}
240028bc:	bf00      	nop
240028be:	370c      	adds	r7, #12
240028c0:	46bd      	mov	sp, r7
240028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
240028c6:	4770      	bx	lr
240028c8:	58000088 	.word	0x58000088

240028cc <HAL_EXTI_D1_EventInputConfig>:
  * @param   EXTI_LineCmd controls (Enable/Disable) the EXTI line.

  * @retval None
  */
void HAL_EXTI_D1_EventInputConfig(uint32_t EXTI_Line , uint32_t EXTI_Mode,  uint32_t EXTI_LineCmd )
{
240028cc:	b480      	push	{r7}
240028ce:	b085      	sub	sp, #20
240028d0:	af00      	add	r7, sp, #0
240028d2:	60f8      	str	r0, [r7, #12]
240028d4:	60b9      	str	r1, [r7, #8]
240028d6:	607a      	str	r2, [r7, #4]
  /* Check the parameter */
  assert_param(IS_EXTI_D1_LINE(EXTI_Line));
  assert_param(IS_EXTI_MODE_LINE(EXTI_Mode));

  if( (EXTI_Mode & EXTI_MODE_IT) == EXTI_MODE_IT)
240028d8:	68bb      	ldr	r3, [r7, #8]
240028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240028de:	2b00      	cmp	r3, #0
240028e0:	d02d      	beq.n	2400293e <HAL_EXTI_D1_EventInputConfig+0x72>
  {
     if( EXTI_LineCmd == 0UL)
240028e2:	687b      	ldr	r3, [r7, #4]
240028e4:	2b00      	cmp	r3, #0
240028e6:	d116      	bne.n	24002916 <HAL_EXTI_D1_EventInputConfig+0x4a>
     {
       /* Clear EXTI line configuration */
        CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
240028e8:	68fb      	ldr	r3, [r7, #12]
240028ea:	095a      	lsrs	r2, r3, #5
240028ec:	4b30      	ldr	r3, [pc, #192]	; (240029b0 <HAL_EXTI_D1_EventInputConfig+0xe4>)
240028ee:	4413      	add	r3, r2
240028f0:	011b      	lsls	r3, r3, #4
240028f2:	6819      	ldr	r1, [r3, #0]
240028f4:	68fb      	ldr	r3, [r7, #12]
240028f6:	f003 031f 	and.w	r3, r3, #31
240028fa:	2201      	movs	r2, #1
240028fc:	fa02 f303 	lsl.w	r3, r2, r3
24002900:	43da      	mvns	r2, r3
24002902:	68fb      	ldr	r3, [r7, #12]
24002904:	0958      	lsrs	r0, r3, #5
24002906:	4b2a      	ldr	r3, [pc, #168]	; (240029b0 <HAL_EXTI_D1_EventInputConfig+0xe4>)
24002908:	4403      	add	r3, r0
2400290a:	011b      	lsls	r3, r3, #4
2400290c:	4618      	mov	r0, r3
2400290e:	ea01 0302 	and.w	r3, r1, r2
24002912:	6003      	str	r3, [r0, #0]
24002914:	e013      	b.n	2400293e <HAL_EXTI_D1_EventInputConfig+0x72>
     }
     else
     {
        SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI_D1->IMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
24002916:	68fb      	ldr	r3, [r7, #12]
24002918:	095a      	lsrs	r2, r3, #5
2400291a:	4b25      	ldr	r3, [pc, #148]	; (240029b0 <HAL_EXTI_D1_EventInputConfig+0xe4>)
2400291c:	4413      	add	r3, r2
2400291e:	011b      	lsls	r3, r3, #4
24002920:	6819      	ldr	r1, [r3, #0]
24002922:	68fb      	ldr	r3, [r7, #12]
24002924:	f003 031f 	and.w	r3, r3, #31
24002928:	2201      	movs	r2, #1
2400292a:	409a      	lsls	r2, r3
2400292c:	68fb      	ldr	r3, [r7, #12]
2400292e:	0958      	lsrs	r0, r3, #5
24002930:	4b1f      	ldr	r3, [pc, #124]	; (240029b0 <HAL_EXTI_D1_EventInputConfig+0xe4>)
24002932:	4403      	add	r3, r0
24002934:	011b      	lsls	r3, r3, #4
24002936:	4618      	mov	r0, r3
24002938:	ea41 0302 	orr.w	r3, r1, r2
2400293c:	6003      	str	r3, [r0, #0]
     }
  }

  if( (EXTI_Mode & EXTI_MODE_EVT) == EXTI_MODE_EVT)
2400293e:	68bb      	ldr	r3, [r7, #8]
24002940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24002944:	2b00      	cmp	r3, #0
24002946:	d02d      	beq.n	240029a4 <HAL_EXTI_D1_EventInputConfig+0xd8>
  {
    if( EXTI_LineCmd == 0UL)
24002948:	687b      	ldr	r3, [r7, #4]
2400294a:	2b00      	cmp	r3, #0
2400294c:	d116      	bne.n	2400297c <HAL_EXTI_D1_EventInputConfig+0xb0>
    {
      /* Clear EXTI line configuration */
      CLEAR_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400294e:	68fb      	ldr	r3, [r7, #12]
24002950:	095b      	lsrs	r3, r3, #5
24002952:	011a      	lsls	r2, r3, #4
24002954:	4b17      	ldr	r3, [pc, #92]	; (240029b4 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24002956:	4413      	add	r3, r2
24002958:	6819      	ldr	r1, [r3, #0]
2400295a:	68fb      	ldr	r3, [r7, #12]
2400295c:	f003 031f 	and.w	r3, r3, #31
24002960:	2201      	movs	r2, #1
24002962:	fa02 f303 	lsl.w	r3, r2, r3
24002966:	43da      	mvns	r2, r3
24002968:	68fb      	ldr	r3, [r7, #12]
2400296a:	095b      	lsrs	r3, r3, #5
2400296c:	0118      	lsls	r0, r3, #4
2400296e:	4b11      	ldr	r3, [pc, #68]	; (240029b4 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24002970:	4403      	add	r3, r0
24002972:	4618      	mov	r0, r3
24002974:	ea01 0302 	and.w	r3, r1, r2
24002978:	6003      	str	r3, [r0, #0]
    else
    {
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
    }
  }
}
2400297a:	e013      	b.n	240029a4 <HAL_EXTI_D1_EventInputConfig+0xd8>
      SET_BIT(  *(__IO uint32_t *) (((uint32_t) &(EXTI_D1->EMR1)) + ((EXTI_Line >> 5 ) * 0x10UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
2400297c:	68fb      	ldr	r3, [r7, #12]
2400297e:	095b      	lsrs	r3, r3, #5
24002980:	011a      	lsls	r2, r3, #4
24002982:	4b0c      	ldr	r3, [pc, #48]	; (240029b4 <HAL_EXTI_D1_EventInputConfig+0xe8>)
24002984:	4413      	add	r3, r2
24002986:	6819      	ldr	r1, [r3, #0]
24002988:	68fb      	ldr	r3, [r7, #12]
2400298a:	f003 031f 	and.w	r3, r3, #31
2400298e:	2201      	movs	r2, #1
24002990:	409a      	lsls	r2, r3
24002992:	68fb      	ldr	r3, [r7, #12]
24002994:	095b      	lsrs	r3, r3, #5
24002996:	0118      	lsls	r0, r3, #4
24002998:	4b06      	ldr	r3, [pc, #24]	; (240029b4 <HAL_EXTI_D1_EventInputConfig+0xe8>)
2400299a:	4403      	add	r3, r0
2400299c:	4618      	mov	r0, r3
2400299e:	ea41 0302 	orr.w	r3, r1, r2
240029a2:	6003      	str	r3, [r0, #0]
}
240029a4:	bf00      	nop
240029a6:	3714      	adds	r7, #20
240029a8:	46bd      	mov	sp, r7
240029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
240029ae:	4770      	bx	lr
240029b0:	05800008 	.word	0x05800008
240029b4:	58000084 	.word	0x58000084

240029b8 <HAL_EXTI_D3_EventInputConfig>:
  *   @arg LPTIM4_OUT_CLEAR : LPTIM4 out selected as D3 domain pendclear source
  *   @arg LPTIM5_OUT_CLEAR : LPTIM5 out selected as D3 domain pendclear source
  * @retval None
  */
void HAL_EXTI_D3_EventInputConfig(uint32_t EXTI_Line, uint32_t EXTI_LineCmd , uint32_t EXTI_ClearSrc  )
{
240029b8:	b480      	push	{r7}
240029ba:	b087      	sub	sp, #28
240029bc:	af00      	add	r7, sp, #0
240029be:	60f8      	str	r0, [r7, #12]
240029c0:	60b9      	str	r1, [r7, #8]
240029c2:	607a      	str	r2, [r7, #4]

  /* Check the parameter */
  assert_param(IS_EXTI_D3_LINE(EXTI_Line));
  assert_param(IS_EXTI_D3_CLEAR(EXTI_ClearSrc));

  if( EXTI_LineCmd == 0UL)
240029c4:	68bb      	ldr	r3, [r7, #8]
240029c6:	2b00      	cmp	r3, #0
240029c8:	d116      	bne.n	240029f8 <HAL_EXTI_D3_EventInputConfig+0x40>
  {
    /* Clear EXTI line configuration */
    CLEAR_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) + ((EXTI_Line >> 5 ) * 0x20UL)),(uint32_t)(1UL << (EXTI_Line & 0x1FUL)) );
240029ca:	68fb      	ldr	r3, [r7, #12]
240029cc:	095b      	lsrs	r3, r3, #5
240029ce:	015a      	lsls	r2, r3, #5
240029d0:	4b2a      	ldr	r3, [pc, #168]	; (24002a7c <HAL_EXTI_D3_EventInputConfig+0xc4>)
240029d2:	4413      	add	r3, r2
240029d4:	6819      	ldr	r1, [r3, #0]
240029d6:	68fb      	ldr	r3, [r7, #12]
240029d8:	f003 031f 	and.w	r3, r3, #31
240029dc:	2201      	movs	r2, #1
240029de:	fa02 f303 	lsl.w	r3, r2, r3
240029e2:	43da      	mvns	r2, r3
240029e4:	68fb      	ldr	r3, [r7, #12]
240029e6:	095b      	lsrs	r3, r3, #5
240029e8:	0158      	lsls	r0, r3, #5
240029ea:	4b24      	ldr	r3, [pc, #144]	; (24002a7c <HAL_EXTI_D3_EventInputConfig+0xc4>)
240029ec:	4403      	add	r3, r0
240029ee:	4618      	mov	r0, r3
240029f0:	ea01 0302 	and.w	r3, r1, r2
240029f4:	6003      	str	r3, [r0, #0]
240029f6:	e013      	b.n	24002a20 <HAL_EXTI_D3_EventInputConfig+0x68>
  }
  else
  {
    SET_BIT(*(__IO uint32_t *) (((uint32_t) &(EXTI->D3PMR1)) +((EXTI_Line >> 5 ) * 0x20UL)), (uint32_t)(1UL << (EXTI_Line & 0x1FUL)));
240029f8:	68fb      	ldr	r3, [r7, #12]
240029fa:	095b      	lsrs	r3, r3, #5
240029fc:	015a      	lsls	r2, r3, #5
240029fe:	4b1f      	ldr	r3, [pc, #124]	; (24002a7c <HAL_EXTI_D3_EventInputConfig+0xc4>)
24002a00:	4413      	add	r3, r2
24002a02:	6819      	ldr	r1, [r3, #0]
24002a04:	68fb      	ldr	r3, [r7, #12]
24002a06:	f003 031f 	and.w	r3, r3, #31
24002a0a:	2201      	movs	r2, #1
24002a0c:	409a      	lsls	r2, r3
24002a0e:	68fb      	ldr	r3, [r7, #12]
24002a10:	095b      	lsrs	r3, r3, #5
24002a12:	0158      	lsls	r0, r3, #5
24002a14:	4b19      	ldr	r3, [pc, #100]	; (24002a7c <HAL_EXTI_D3_EventInputConfig+0xc4>)
24002a16:	4403      	add	r3, r0
24002a18:	4618      	mov	r0, r3
24002a1a:	ea41 0302 	orr.w	r3, r1, r2
24002a1e:	6003      	str	r3, [r0, #0]
  }

  if(((EXTI_Line>>4)%2UL) == 0UL)
24002a20:	68fb      	ldr	r3, [r7, #12]
24002a22:	091b      	lsrs	r3, r3, #4
24002a24:	f003 0301 	and.w	r3, r3, #1
24002a28:	2b00      	cmp	r3, #0
24002a2a:	d106      	bne.n	24002a3a <HAL_EXTI_D3_EventInputConfig+0x82>
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1L)) + ((EXTI_Line >> 5 ) * 0x20UL));
24002a2c:	68fb      	ldr	r3, [r7, #12]
24002a2e:	095b      	lsrs	r3, r3, #5
24002a30:	015a      	lsls	r2, r3, #5
24002a32:	4b13      	ldr	r3, [pc, #76]	; (24002a80 <HAL_EXTI_D3_EventInputConfig+0xc8>)
24002a34:	4413      	add	r3, r2
24002a36:	617b      	str	r3, [r7, #20]
24002a38:	e005      	b.n	24002a46 <HAL_EXTI_D3_EventInputConfig+0x8e>
  }
  else
  {
    pRegv = (__IO uint32_t *) (((uint32_t) &(EXTI->D3PCR1H)) + ((EXTI_Line >> 5 ) * 0x20UL));
24002a3a:	68fb      	ldr	r3, [r7, #12]
24002a3c:	095b      	lsrs	r3, r3, #5
24002a3e:	015a      	lsls	r2, r3, #5
24002a40:	4b10      	ldr	r3, [pc, #64]	; (24002a84 <HAL_EXTI_D3_EventInputConfig+0xcc>)
24002a42:	4413      	add	r3, r2
24002a44:	617b      	str	r3, [r7, #20]
  }
  MODIFY_REG(*pRegv, (uint32_t)(3UL << ((EXTI_Line*2UL) & 0x1FUL)), (uint32_t)(EXTI_ClearSrc << ((EXTI_Line*2UL) & 0x1FUL)));
24002a46:	697b      	ldr	r3, [r7, #20]
24002a48:	681a      	ldr	r2, [r3, #0]
24002a4a:	68fb      	ldr	r3, [r7, #12]
24002a4c:	005b      	lsls	r3, r3, #1
24002a4e:	f003 031e 	and.w	r3, r3, #30
24002a52:	2103      	movs	r1, #3
24002a54:	fa01 f303 	lsl.w	r3, r1, r3
24002a58:	43db      	mvns	r3, r3
24002a5a:	401a      	ands	r2, r3
24002a5c:	68fb      	ldr	r3, [r7, #12]
24002a5e:	005b      	lsls	r3, r3, #1
24002a60:	f003 031e 	and.w	r3, r3, #30
24002a64:	6879      	ldr	r1, [r7, #4]
24002a66:	fa01 f303 	lsl.w	r3, r1, r3
24002a6a:	431a      	orrs	r2, r3
24002a6c:	697b      	ldr	r3, [r7, #20]
24002a6e:	601a      	str	r2, [r3, #0]

}
24002a70:	bf00      	nop
24002a72:	371c      	adds	r7, #28
24002a74:	46bd      	mov	sp, r7
24002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
24002a7a:	4770      	bx	lr
24002a7c:	5800000c 	.word	0x5800000c
24002a80:	58000010 	.word	0x58000010
24002a84:	58000014 	.word	0x58000014

24002a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24002a88:	b480      	push	{r7}
24002a8a:	b085      	sub	sp, #20
24002a8c:	af00      	add	r7, sp, #0
24002a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
24002a90:	687b      	ldr	r3, [r7, #4]
24002a92:	f003 0307 	and.w	r3, r3, #7
24002a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
24002a98:	4b0b      	ldr	r3, [pc, #44]	; (24002ac8 <__NVIC_SetPriorityGrouping+0x40>)
24002a9a:	68db      	ldr	r3, [r3, #12]
24002a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
24002a9e:	68ba      	ldr	r2, [r7, #8]
24002aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
24002aa4:	4013      	ands	r3, r2
24002aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
24002aa8:	68fb      	ldr	r3, [r7, #12]
24002aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
24002aac:	68bb      	ldr	r3, [r7, #8]
24002aae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
24002ab0:	4b06      	ldr	r3, [pc, #24]	; (24002acc <__NVIC_SetPriorityGrouping+0x44>)
24002ab2:	4313      	orrs	r3, r2
24002ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
24002ab6:	4a04      	ldr	r2, [pc, #16]	; (24002ac8 <__NVIC_SetPriorityGrouping+0x40>)
24002ab8:	68bb      	ldr	r3, [r7, #8]
24002aba:	60d3      	str	r3, [r2, #12]
}
24002abc:	bf00      	nop
24002abe:	3714      	adds	r7, #20
24002ac0:	46bd      	mov	sp, r7
24002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ac6:	4770      	bx	lr
24002ac8:	e000ed00 	.word	0xe000ed00
24002acc:	05fa0000 	.word	0x05fa0000

24002ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
24002ad0:	b480      	push	{r7}
24002ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
24002ad4:	4b04      	ldr	r3, [pc, #16]	; (24002ae8 <__NVIC_GetPriorityGrouping+0x18>)
24002ad6:	68db      	ldr	r3, [r3, #12]
24002ad8:	0a1b      	lsrs	r3, r3, #8
24002ada:	f003 0307 	and.w	r3, r3, #7
}
24002ade:	4618      	mov	r0, r3
24002ae0:	46bd      	mov	sp, r7
24002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ae6:	4770      	bx	lr
24002ae8:	e000ed00 	.word	0xe000ed00

24002aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
24002aec:	b480      	push	{r7}
24002aee:	b083      	sub	sp, #12
24002af0:	af00      	add	r7, sp, #0
24002af2:	4603      	mov	r3, r0
24002af4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002afa:	2b00      	cmp	r3, #0
24002afc:	db0b      	blt.n	24002b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002afe:	88fb      	ldrh	r3, [r7, #6]
24002b00:	f003 021f 	and.w	r2, r3, #31
24002b04:	4907      	ldr	r1, [pc, #28]	; (24002b24 <__NVIC_EnableIRQ+0x38>)
24002b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b0a:	095b      	lsrs	r3, r3, #5
24002b0c:	2001      	movs	r0, #1
24002b0e:	fa00 f202 	lsl.w	r2, r0, r2
24002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
24002b16:	bf00      	nop
24002b18:	370c      	adds	r7, #12
24002b1a:	46bd      	mov	sp, r7
24002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002b20:	4770      	bx	lr
24002b22:	bf00      	nop
24002b24:	e000e100 	.word	0xe000e100

24002b28 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
24002b28:	b480      	push	{r7}
24002b2a:	b083      	sub	sp, #12
24002b2c:	af00      	add	r7, sp, #0
24002b2e:	4603      	mov	r3, r0
24002b30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b36:	2b00      	cmp	r3, #0
24002b38:	db10      	blt.n	24002b5c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002b3a:	88fb      	ldrh	r3, [r7, #6]
24002b3c:	f003 021f 	and.w	r2, r3, #31
24002b40:	4909      	ldr	r1, [pc, #36]	; (24002b68 <__NVIC_DisableIRQ+0x40>)
24002b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b46:	095b      	lsrs	r3, r3, #5
24002b48:	2001      	movs	r0, #1
24002b4a:	fa00 f202 	lsl.w	r2, r0, r2
24002b4e:	3320      	adds	r3, #32
24002b50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
24002b54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002b58:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
24002b5c:	bf00      	nop
24002b5e:	370c      	adds	r7, #12
24002b60:	46bd      	mov	sp, r7
24002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
24002b66:	4770      	bx	lr
24002b68:	e000e100 	.word	0xe000e100

24002b6c <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
24002b6c:	b480      	push	{r7}
24002b6e:	b083      	sub	sp, #12
24002b70:	af00      	add	r7, sp, #0
24002b72:	4603      	mov	r3, r0
24002b74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b7a:	2b00      	cmp	r3, #0
24002b7c:	db0e      	blt.n	24002b9c <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
24002b7e:	4a0b      	ldr	r2, [pc, #44]	; (24002bac <__NVIC_GetPendingIRQ+0x40>)
24002b80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002b84:	095b      	lsrs	r3, r3, #5
24002b86:	3340      	adds	r3, #64	; 0x40
24002b88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24002b8c:	88fb      	ldrh	r3, [r7, #6]
24002b8e:	f003 031f 	and.w	r3, r3, #31
24002b92:	fa22 f303 	lsr.w	r3, r2, r3
24002b96:	f003 0301 	and.w	r3, r3, #1
24002b9a:	e000      	b.n	24002b9e <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
24002b9c:	2300      	movs	r3, #0
  }
}
24002b9e:	4618      	mov	r0, r3
24002ba0:	370c      	adds	r7, #12
24002ba2:	46bd      	mov	sp, r7
24002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
24002ba8:	4770      	bx	lr
24002baa:	bf00      	nop
24002bac:	e000e100 	.word	0xe000e100

24002bb0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
24002bb0:	b480      	push	{r7}
24002bb2:	b083      	sub	sp, #12
24002bb4:	af00      	add	r7, sp, #0
24002bb6:	4603      	mov	r3, r0
24002bb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bbe:	2b00      	cmp	r3, #0
24002bc0:	db0c      	blt.n	24002bdc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002bc2:	88fb      	ldrh	r3, [r7, #6]
24002bc4:	f003 021f 	and.w	r2, r3, #31
24002bc8:	4907      	ldr	r1, [pc, #28]	; (24002be8 <__NVIC_SetPendingIRQ+0x38>)
24002bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bce:	095b      	lsrs	r3, r3, #5
24002bd0:	2001      	movs	r0, #1
24002bd2:	fa00 f202 	lsl.w	r2, r0, r2
24002bd6:	3340      	adds	r3, #64	; 0x40
24002bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
24002bdc:	bf00      	nop
24002bde:	370c      	adds	r7, #12
24002be0:	46bd      	mov	sp, r7
24002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
24002be6:	4770      	bx	lr
24002be8:	e000e100 	.word	0xe000e100

24002bec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
24002bec:	b480      	push	{r7}
24002bee:	b083      	sub	sp, #12
24002bf0:	af00      	add	r7, sp, #0
24002bf2:	4603      	mov	r3, r0
24002bf4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002bfa:	2b00      	cmp	r3, #0
24002bfc:	db0c      	blt.n	24002c18 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
24002bfe:	88fb      	ldrh	r3, [r7, #6]
24002c00:	f003 021f 	and.w	r2, r3, #31
24002c04:	4907      	ldr	r1, [pc, #28]	; (24002c24 <__NVIC_ClearPendingIRQ+0x38>)
24002c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c0a:	095b      	lsrs	r3, r3, #5
24002c0c:	2001      	movs	r0, #1
24002c0e:	fa00 f202 	lsl.w	r2, r0, r2
24002c12:	3360      	adds	r3, #96	; 0x60
24002c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
24002c18:	bf00      	nop
24002c1a:	370c      	adds	r7, #12
24002c1c:	46bd      	mov	sp, r7
24002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
24002c22:	4770      	bx	lr
24002c24:	e000e100 	.word	0xe000e100

24002c28 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
24002c28:	b480      	push	{r7}
24002c2a:	b083      	sub	sp, #12
24002c2c:	af00      	add	r7, sp, #0
24002c2e:	4603      	mov	r3, r0
24002c30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002c32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c36:	2b00      	cmp	r3, #0
24002c38:	db0e      	blt.n	24002c58 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
24002c3a:	4a0b      	ldr	r2, [pc, #44]	; (24002c68 <__NVIC_GetActive+0x40>)
24002c3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c40:	095b      	lsrs	r3, r3, #5
24002c42:	3380      	adds	r3, #128	; 0x80
24002c44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
24002c48:	88fb      	ldrh	r3, [r7, #6]
24002c4a:	f003 031f 	and.w	r3, r3, #31
24002c4e:	fa22 f303 	lsr.w	r3, r2, r3
24002c52:	f003 0301 	and.w	r3, r3, #1
24002c56:	e000      	b.n	24002c5a <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
24002c58:	2300      	movs	r3, #0
  }
}
24002c5a:	4618      	mov	r0, r3
24002c5c:	370c      	adds	r7, #12
24002c5e:	46bd      	mov	sp, r7
24002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
24002c64:	4770      	bx	lr
24002c66:	bf00      	nop
24002c68:	e000e100 	.word	0xe000e100

24002c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
24002c6c:	b480      	push	{r7}
24002c6e:	b083      	sub	sp, #12
24002c70:	af00      	add	r7, sp, #0
24002c72:	4603      	mov	r3, r0
24002c74:	6039      	str	r1, [r7, #0]
24002c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
24002c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c7c:	2b00      	cmp	r3, #0
24002c7e:	db0a      	blt.n	24002c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24002c80:	683b      	ldr	r3, [r7, #0]
24002c82:	b2da      	uxtb	r2, r3
24002c84:	490c      	ldr	r1, [pc, #48]	; (24002cb8 <__NVIC_SetPriority+0x4c>)
24002c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002c8a:	0112      	lsls	r2, r2, #4
24002c8c:	b2d2      	uxtb	r2, r2
24002c8e:	440b      	add	r3, r1
24002c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
24002c94:	e00a      	b.n	24002cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
24002c96:	683b      	ldr	r3, [r7, #0]
24002c98:	b2da      	uxtb	r2, r3
24002c9a:	4908      	ldr	r1, [pc, #32]	; (24002cbc <__NVIC_SetPriority+0x50>)
24002c9c:	88fb      	ldrh	r3, [r7, #6]
24002c9e:	f003 030f 	and.w	r3, r3, #15
24002ca2:	3b04      	subs	r3, #4
24002ca4:	0112      	lsls	r2, r2, #4
24002ca6:	b2d2      	uxtb	r2, r2
24002ca8:	440b      	add	r3, r1
24002caa:	761a      	strb	r2, [r3, #24]
}
24002cac:	bf00      	nop
24002cae:	370c      	adds	r7, #12
24002cb0:	46bd      	mov	sp, r7
24002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
24002cb6:	4770      	bx	lr
24002cb8:	e000e100 	.word	0xe000e100
24002cbc:	e000ed00 	.word	0xe000ed00

24002cc0 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
24002cc0:	b480      	push	{r7}
24002cc2:	b083      	sub	sp, #12
24002cc4:	af00      	add	r7, sp, #0
24002cc6:	4603      	mov	r3, r0
24002cc8:	80fb      	strh	r3, [r7, #6]

  if ((int32_t)(IRQn) >= 0)
24002cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002cce:	2b00      	cmp	r3, #0
24002cd0:	db09      	blt.n	24002ce6 <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
24002cd2:	4a0d      	ldr	r2, [pc, #52]	; (24002d08 <__NVIC_GetPriority+0x48>)
24002cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002cd8:	4413      	add	r3, r2
24002cda:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
24002cde:	b2db      	uxtb	r3, r3
24002ce0:	091b      	lsrs	r3, r3, #4
24002ce2:	b2db      	uxtb	r3, r3
24002ce4:	e009      	b.n	24002cfa <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
24002ce6:	4a09      	ldr	r2, [pc, #36]	; (24002d0c <__NVIC_GetPriority+0x4c>)
24002ce8:	88fb      	ldrh	r3, [r7, #6]
24002cea:	f003 030f 	and.w	r3, r3, #15
24002cee:	3b04      	subs	r3, #4
24002cf0:	4413      	add	r3, r2
24002cf2:	7e1b      	ldrb	r3, [r3, #24]
24002cf4:	b2db      	uxtb	r3, r3
24002cf6:	091b      	lsrs	r3, r3, #4
24002cf8:	b2db      	uxtb	r3, r3
  }
}
24002cfa:	4618      	mov	r0, r3
24002cfc:	370c      	adds	r7, #12
24002cfe:	46bd      	mov	sp, r7
24002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
24002d04:	4770      	bx	lr
24002d06:	bf00      	nop
24002d08:	e000e100 	.word	0xe000e100
24002d0c:	e000ed00 	.word	0xe000ed00

24002d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
24002d10:	b480      	push	{r7}
24002d12:	b089      	sub	sp, #36	; 0x24
24002d14:	af00      	add	r7, sp, #0
24002d16:	60f8      	str	r0, [r7, #12]
24002d18:	60b9      	str	r1, [r7, #8]
24002d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24002d1c:	68fb      	ldr	r3, [r7, #12]
24002d1e:	f003 0307 	and.w	r3, r3, #7
24002d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24002d24:	69fb      	ldr	r3, [r7, #28]
24002d26:	f1c3 0307 	rsb	r3, r3, #7
24002d2a:	2b04      	cmp	r3, #4
24002d2c:	bf28      	it	cs
24002d2e:	2304      	movcs	r3, #4
24002d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24002d32:	69fb      	ldr	r3, [r7, #28]
24002d34:	3304      	adds	r3, #4
24002d36:	2b06      	cmp	r3, #6
24002d38:	d902      	bls.n	24002d40 <NVIC_EncodePriority+0x30>
24002d3a:	69fb      	ldr	r3, [r7, #28]
24002d3c:	3b03      	subs	r3, #3
24002d3e:	e000      	b.n	24002d42 <NVIC_EncodePriority+0x32>
24002d40:	2300      	movs	r3, #0
24002d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24002d44:	f04f 32ff 	mov.w	r2, #4294967295
24002d48:	69bb      	ldr	r3, [r7, #24]
24002d4a:	fa02 f303 	lsl.w	r3, r2, r3
24002d4e:	43da      	mvns	r2, r3
24002d50:	68bb      	ldr	r3, [r7, #8]
24002d52:	401a      	ands	r2, r3
24002d54:	697b      	ldr	r3, [r7, #20]
24002d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
24002d58:	f04f 31ff 	mov.w	r1, #4294967295
24002d5c:	697b      	ldr	r3, [r7, #20]
24002d5e:	fa01 f303 	lsl.w	r3, r1, r3
24002d62:	43d9      	mvns	r1, r3
24002d64:	687b      	ldr	r3, [r7, #4]
24002d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
24002d68:	4313      	orrs	r3, r2
         );
}
24002d6a:	4618      	mov	r0, r3
24002d6c:	3724      	adds	r7, #36	; 0x24
24002d6e:	46bd      	mov	sp, r7
24002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
24002d74:	4770      	bx	lr

24002d76 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
24002d76:	b480      	push	{r7}
24002d78:	b089      	sub	sp, #36	; 0x24
24002d7a:	af00      	add	r7, sp, #0
24002d7c:	60f8      	str	r0, [r7, #12]
24002d7e:	60b9      	str	r1, [r7, #8]
24002d80:	607a      	str	r2, [r7, #4]
24002d82:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
24002d84:	68bb      	ldr	r3, [r7, #8]
24002d86:	f003 0307 	and.w	r3, r3, #7
24002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
24002d8c:	69fb      	ldr	r3, [r7, #28]
24002d8e:	f1c3 0307 	rsb	r3, r3, #7
24002d92:	2b04      	cmp	r3, #4
24002d94:	bf28      	it	cs
24002d96:	2304      	movcs	r3, #4
24002d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
24002d9a:	69fb      	ldr	r3, [r7, #28]
24002d9c:	3304      	adds	r3, #4
24002d9e:	2b06      	cmp	r3, #6
24002da0:	d902      	bls.n	24002da8 <NVIC_DecodePriority+0x32>
24002da2:	69fb      	ldr	r3, [r7, #28]
24002da4:	3b03      	subs	r3, #3
24002da6:	e000      	b.n	24002daa <NVIC_DecodePriority+0x34>
24002da8:	2300      	movs	r3, #0
24002daa:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
24002dac:	68fa      	ldr	r2, [r7, #12]
24002dae:	697b      	ldr	r3, [r7, #20]
24002db0:	40da      	lsrs	r2, r3
24002db2:	f04f 31ff 	mov.w	r1, #4294967295
24002db6:	69bb      	ldr	r3, [r7, #24]
24002db8:	fa01 f303 	lsl.w	r3, r1, r3
24002dbc:	43db      	mvns	r3, r3
24002dbe:	401a      	ands	r2, r3
24002dc0:	687b      	ldr	r3, [r7, #4]
24002dc2:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
24002dc4:	f04f 32ff 	mov.w	r2, #4294967295
24002dc8:	697b      	ldr	r3, [r7, #20]
24002dca:	fa02 f303 	lsl.w	r3, r2, r3
24002dce:	43da      	mvns	r2, r3
24002dd0:	68fb      	ldr	r3, [r7, #12]
24002dd2:	401a      	ands	r2, r3
24002dd4:	683b      	ldr	r3, [r7, #0]
24002dd6:	601a      	str	r2, [r3, #0]
}
24002dd8:	bf00      	nop
24002dda:	3724      	adds	r7, #36	; 0x24
24002ddc:	46bd      	mov	sp, r7
24002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
24002de2:	4770      	bx	lr

24002de4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
24002de4:	b480      	push	{r7}
24002de6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
24002de8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
24002dec:	4b05      	ldr	r3, [pc, #20]	; (24002e04 <__NVIC_SystemReset+0x20>)
24002dee:	68db      	ldr	r3, [r3, #12]
24002df0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
24002df4:	4903      	ldr	r1, [pc, #12]	; (24002e04 <__NVIC_SystemReset+0x20>)
24002df6:	4b04      	ldr	r3, [pc, #16]	; (24002e08 <__NVIC_SystemReset+0x24>)
24002df8:	4313      	orrs	r3, r2
24002dfa:	60cb      	str	r3, [r1, #12]
24002dfc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
24002e00:	bf00      	nop
24002e02:	e7fd      	b.n	24002e00 <__NVIC_SystemReset+0x1c>
24002e04:	e000ed00 	.word	0xe000ed00
24002e08:	05fa0004 	.word	0x05fa0004

24002e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
24002e0c:	b580      	push	{r7, lr}
24002e0e:	b082      	sub	sp, #8
24002e10:	af00      	add	r7, sp, #0
24002e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
24002e14:	687b      	ldr	r3, [r7, #4]
24002e16:	3b01      	subs	r3, #1
24002e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24002e1c:	d301      	bcc.n	24002e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
24002e1e:	2301      	movs	r3, #1
24002e20:	e00f      	b.n	24002e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
24002e22:	4a0a      	ldr	r2, [pc, #40]	; (24002e4c <SysTick_Config+0x40>)
24002e24:	687b      	ldr	r3, [r7, #4]
24002e26:	3b01      	subs	r3, #1
24002e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
24002e2a:	210f      	movs	r1, #15
24002e2c:	f04f 30ff 	mov.w	r0, #4294967295
24002e30:	f7ff ff1c 	bl	24002c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
24002e34:	4b05      	ldr	r3, [pc, #20]	; (24002e4c <SysTick_Config+0x40>)
24002e36:	2200      	movs	r2, #0
24002e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
24002e3a:	4b04      	ldr	r3, [pc, #16]	; (24002e4c <SysTick_Config+0x40>)
24002e3c:	2207      	movs	r2, #7
24002e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
24002e40:	2300      	movs	r3, #0
}
24002e42:	4618      	mov	r0, r3
24002e44:	3708      	adds	r7, #8
24002e46:	46bd      	mov	sp, r7
24002e48:	bd80      	pop	{r7, pc}
24002e4a:	bf00      	nop
24002e4c:	e000e010 	.word	0xe000e010

24002e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
24002e50:	b580      	push	{r7, lr}
24002e52:	b082      	sub	sp, #8
24002e54:	af00      	add	r7, sp, #0
24002e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
24002e58:	6878      	ldr	r0, [r7, #4]
24002e5a:	f7ff fe15 	bl	24002a88 <__NVIC_SetPriorityGrouping>
}
24002e5e:	bf00      	nop
24002e60:	3708      	adds	r7, #8
24002e62:	46bd      	mov	sp, r7
24002e64:	bd80      	pop	{r7, pc}

24002e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
24002e66:	b580      	push	{r7, lr}
24002e68:	b086      	sub	sp, #24
24002e6a:	af00      	add	r7, sp, #0
24002e6c:	4603      	mov	r3, r0
24002e6e:	60b9      	str	r1, [r7, #8]
24002e70:	607a      	str	r2, [r7, #4]
24002e72:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
24002e74:	f7ff fe2c 	bl	24002ad0 <__NVIC_GetPriorityGrouping>
24002e78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
24002e7a:	687a      	ldr	r2, [r7, #4]
24002e7c:	68b9      	ldr	r1, [r7, #8]
24002e7e:	6978      	ldr	r0, [r7, #20]
24002e80:	f7ff ff46 	bl	24002d10 <NVIC_EncodePriority>
24002e84:	4602      	mov	r2, r0
24002e86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24002e8a:	4611      	mov	r1, r2
24002e8c:	4618      	mov	r0, r3
24002e8e:	f7ff feed 	bl	24002c6c <__NVIC_SetPriority>
}
24002e92:	bf00      	nop
24002e94:	3718      	adds	r7, #24
24002e96:	46bd      	mov	sp, r7
24002e98:	bd80      	pop	{r7, pc}

24002e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
24002e9a:	b580      	push	{r7, lr}
24002e9c:	b082      	sub	sp, #8
24002e9e:	af00      	add	r7, sp, #0
24002ea0:	4603      	mov	r3, r0
24002ea2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
24002ea4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002ea8:	4618      	mov	r0, r3
24002eaa:	f7ff fe1f 	bl	24002aec <__NVIC_EnableIRQ>
}
24002eae:	bf00      	nop
24002eb0:	3708      	adds	r7, #8
24002eb2:	46bd      	mov	sp, r7
24002eb4:	bd80      	pop	{r7, pc}

24002eb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
24002eb6:	b580      	push	{r7, lr}
24002eb8:	b082      	sub	sp, #8
24002eba:	af00      	add	r7, sp, #0
24002ebc:	4603      	mov	r3, r0
24002ebe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
24002ec0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24002ec4:	4618      	mov	r0, r3
24002ec6:	f7ff fe2f 	bl	24002b28 <__NVIC_DisableIRQ>
}
24002eca:	bf00      	nop
24002ecc:	3708      	adds	r7, #8
24002ece:	46bd      	mov	sp, r7
24002ed0:	bd80      	pop	{r7, pc}

24002ed2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
24002ed2:	b580      	push	{r7, lr}
24002ed4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
24002ed6:	f7ff ff85 	bl	24002de4 <__NVIC_SystemReset>

24002eda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
24002eda:	b580      	push	{r7, lr}
24002edc:	b082      	sub	sp, #8
24002ede:	af00      	add	r7, sp, #0
24002ee0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
24002ee2:	6878      	ldr	r0, [r7, #4]
24002ee4:	f7ff ff92 	bl	24002e0c <SysTick_Config>
24002ee8:	4603      	mov	r3, r0
}
24002eea:	4618      	mov	r0, r3
24002eec:	3708      	adds	r7, #8
24002eee:	46bd      	mov	sp, r7
24002ef0:	bd80      	pop	{r7, pc}

24002ef2 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
24002ef2:	b480      	push	{r7}
24002ef4:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
24002ef6:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
24002efa:	4b07      	ldr	r3, [pc, #28]	; (24002f18 <HAL_MPU_Disable+0x26>)
24002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24002efe:	4a06      	ldr	r2, [pc, #24]	; (24002f18 <HAL_MPU_Disable+0x26>)
24002f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24002f04:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
24002f06:	4b05      	ldr	r3, [pc, #20]	; (24002f1c <HAL_MPU_Disable+0x2a>)
24002f08:	2200      	movs	r2, #0
24002f0a:	605a      	str	r2, [r3, #4]
}
24002f0c:	bf00      	nop
24002f0e:	46bd      	mov	sp, r7
24002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
24002f14:	4770      	bx	lr
24002f16:	bf00      	nop
24002f18:	e000ed00 	.word	0xe000ed00
24002f1c:	e000ed90 	.word	0xe000ed90

24002f20 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
24002f20:	b480      	push	{r7}
24002f22:	b083      	sub	sp, #12
24002f24:	af00      	add	r7, sp, #0
24002f26:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
24002f28:	4a0a      	ldr	r2, [pc, #40]	; (24002f54 <HAL_MPU_Enable+0x34>)
24002f2a:	687b      	ldr	r3, [r7, #4]
24002f2c:	f043 0301 	orr.w	r3, r3, #1
24002f30:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
24002f32:	4b09      	ldr	r3, [pc, #36]	; (24002f58 <HAL_MPU_Enable+0x38>)
24002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24002f36:	4a08      	ldr	r2, [pc, #32]	; (24002f58 <HAL_MPU_Enable+0x38>)
24002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24002f3c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
24002f3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24002f42:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
24002f46:	bf00      	nop
24002f48:	370c      	adds	r7, #12
24002f4a:	46bd      	mov	sp, r7
24002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
24002f50:	4770      	bx	lr
24002f52:	bf00      	nop
24002f54:	e000ed90 	.word	0xe000ed90
24002f58:	e000ed00 	.word	0xe000ed00

24002f5c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
24002f5c:	b480      	push	{r7}
24002f5e:	b083      	sub	sp, #12
24002f60:	af00      	add	r7, sp, #0
24002f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
24002f64:	687b      	ldr	r3, [r7, #4]
24002f66:	785a      	ldrb	r2, [r3, #1]
24002f68:	4b1d      	ldr	r3, [pc, #116]	; (24002fe0 <HAL_MPU_ConfigRegion+0x84>)
24002f6a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
24002f6c:	687b      	ldr	r3, [r7, #4]
24002f6e:	781b      	ldrb	r3, [r3, #0]
24002f70:	2b00      	cmp	r3, #0
24002f72:	d029      	beq.n	24002fc8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
24002f74:	4a1a      	ldr	r2, [pc, #104]	; (24002fe0 <HAL_MPU_ConfigRegion+0x84>)
24002f76:	687b      	ldr	r3, [r7, #4]
24002f78:	685b      	ldr	r3, [r3, #4]
24002f7a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002f7c:	687b      	ldr	r3, [r7, #4]
24002f7e:	7b1b      	ldrb	r3, [r3, #12]
24002f80:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24002f82:	687b      	ldr	r3, [r7, #4]
24002f84:	7adb      	ldrb	r3, [r3, #11]
24002f86:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002f88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24002f8a:	687b      	ldr	r3, [r7, #4]
24002f8c:	7a9b      	ldrb	r3, [r3, #10]
24002f8e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
24002f90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24002f92:	687b      	ldr	r3, [r7, #4]
24002f94:	7b5b      	ldrb	r3, [r3, #13]
24002f96:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
24002f98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24002f9a:	687b      	ldr	r3, [r7, #4]
24002f9c:	7b9b      	ldrb	r3, [r3, #14]
24002f9e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
24002fa0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24002fa2:	687b      	ldr	r3, [r7, #4]
24002fa4:	7bdb      	ldrb	r3, [r3, #15]
24002fa6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
24002fa8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24002faa:	687b      	ldr	r3, [r7, #4]
24002fac:	7a5b      	ldrb	r3, [r3, #9]
24002fae:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
24002fb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002fb2:	687b      	ldr	r3, [r7, #4]
24002fb4:	7a1b      	ldrb	r3, [r3, #8]
24002fb6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
24002fb8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
24002fba:	687a      	ldr	r2, [r7, #4]
24002fbc:	7812      	ldrb	r2, [r2, #0]
24002fbe:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002fc0:	4a07      	ldr	r2, [pc, #28]	; (24002fe0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
24002fc2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
24002fc4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
24002fc6:	e005      	b.n	24002fd4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
24002fc8:	4b05      	ldr	r3, [pc, #20]	; (24002fe0 <HAL_MPU_ConfigRegion+0x84>)
24002fca:	2200      	movs	r2, #0
24002fcc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
24002fce:	4b04      	ldr	r3, [pc, #16]	; (24002fe0 <HAL_MPU_ConfigRegion+0x84>)
24002fd0:	2200      	movs	r2, #0
24002fd2:	611a      	str	r2, [r3, #16]
}
24002fd4:	bf00      	nop
24002fd6:	370c      	adds	r7, #12
24002fd8:	46bd      	mov	sp, r7
24002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
24002fde:	4770      	bx	lr
24002fe0:	e000ed90 	.word	0xe000ed90

24002fe4 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
24002fe4:	b580      	push	{r7, lr}
24002fe6:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
24002fe8:	f7ff fd72 	bl	24002ad0 <__NVIC_GetPriorityGrouping>
24002fec:	4603      	mov	r3, r0
}
24002fee:	4618      	mov	r0, r3
24002ff0:	bd80      	pop	{r7, pc}

24002ff2 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
24002ff2:	b580      	push	{r7, lr}
24002ff4:	b084      	sub	sp, #16
24002ff6:	af00      	add	r7, sp, #0
24002ff8:	60b9      	str	r1, [r7, #8]
24002ffa:	607a      	str	r2, [r7, #4]
24002ffc:	603b      	str	r3, [r7, #0]
24002ffe:	4603      	mov	r3, r0
24003000:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
24003002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
24003006:	4618      	mov	r0, r3
24003008:	f7ff fe5a 	bl	24002cc0 <__NVIC_GetPriority>
2400300c:	683b      	ldr	r3, [r7, #0]
2400300e:	687a      	ldr	r2, [r7, #4]
24003010:	68b9      	ldr	r1, [r7, #8]
24003012:	f7ff feb0 	bl	24002d76 <NVIC_DecodePriority>
}
24003016:	bf00      	nop
24003018:	3710      	adds	r7, #16
2400301a:	46bd      	mov	sp, r7
2400301c:	bd80      	pop	{r7, pc}

2400301e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
2400301e:	b580      	push	{r7, lr}
24003020:	b082      	sub	sp, #8
24003022:	af00      	add	r7, sp, #0
24003024:	4603      	mov	r3, r0
24003026:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
24003028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
2400302c:	4618      	mov	r0, r3
2400302e:	f7ff fdbf 	bl	24002bb0 <__NVIC_SetPendingIRQ>
}
24003032:	bf00      	nop
24003034:	3708      	adds	r7, #8
24003036:	46bd      	mov	sp, r7
24003038:	bd80      	pop	{r7, pc}

2400303a <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
2400303a:	b580      	push	{r7, lr}
2400303c:	b082      	sub	sp, #8
2400303e:	af00      	add	r7, sp, #0
24003040:	4603      	mov	r3, r0
24003042:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
24003044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003048:	4618      	mov	r0, r3
2400304a:	f7ff fd8f 	bl	24002b6c <__NVIC_GetPendingIRQ>
2400304e:	4603      	mov	r3, r0
}
24003050:	4618      	mov	r0, r3
24003052:	3708      	adds	r7, #8
24003054:	46bd      	mov	sp, r7
24003056:	bd80      	pop	{r7, pc}

24003058 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
24003058:	b580      	push	{r7, lr}
2400305a:	b082      	sub	sp, #8
2400305c:	af00      	add	r7, sp, #0
2400305e:	4603      	mov	r3, r0
24003060:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
24003062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003066:	4618      	mov	r0, r3
24003068:	f7ff fdc0 	bl	24002bec <__NVIC_ClearPendingIRQ>
}
2400306c:	bf00      	nop
2400306e:	3708      	adds	r7, #8
24003070:	46bd      	mov	sp, r7
24003072:	bd80      	pop	{r7, pc}

24003074 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval status  - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
24003074:	b580      	push	{r7, lr}
24003076:	b082      	sub	sp, #8
24003078:	af00      	add	r7, sp, #0
2400307a:	4603      	mov	r3, r0
2400307c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
2400307e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
24003082:	4618      	mov	r0, r3
24003084:	f7ff fdd0 	bl	24002c28 <__NVIC_GetActive>
24003088:	4603      	mov	r3, r0
}
2400308a:	4618      	mov	r0, r3
2400308c:	3708      	adds	r7, #8
2400308e:	46bd      	mov	sp, r7
24003090:	bd80      	pop	{r7, pc}

24003092 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
24003092:	b480      	push	{r7}
24003094:	b083      	sub	sp, #12
24003096:	af00      	add	r7, sp, #0
24003098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
2400309a:	687b      	ldr	r3, [r7, #4]
2400309c:	2b04      	cmp	r3, #4
2400309e:	d106      	bne.n	240030ae <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
240030a0:	4b09      	ldr	r3, [pc, #36]	; (240030c8 <HAL_SYSTICK_CLKSourceConfig+0x36>)
240030a2:	681b      	ldr	r3, [r3, #0]
240030a4:	4a08      	ldr	r2, [pc, #32]	; (240030c8 <HAL_SYSTICK_CLKSourceConfig+0x36>)
240030a6:	f043 0304 	orr.w	r3, r3, #4
240030aa:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
240030ac:	e005      	b.n	240030ba <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
240030ae:	4b06      	ldr	r3, [pc, #24]	; (240030c8 <HAL_SYSTICK_CLKSourceConfig+0x36>)
240030b0:	681b      	ldr	r3, [r3, #0]
240030b2:	4a05      	ldr	r2, [pc, #20]	; (240030c8 <HAL_SYSTICK_CLKSourceConfig+0x36>)
240030b4:	f023 0304 	bic.w	r3, r3, #4
240030b8:	6013      	str	r3, [r2, #0]
}
240030ba:	bf00      	nop
240030bc:	370c      	adds	r7, #12
240030be:	46bd      	mov	sp, r7
240030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
240030c4:	4770      	bx	lr
240030c6:	bf00      	nop
240030c8:	e000e010 	.word	0xe000e010

240030cc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
240030cc:	b580      	push	{r7, lr}
240030ce:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
240030d0:	f000 f802 	bl	240030d8 <HAL_SYSTICK_Callback>
}
240030d4:	bf00      	nop
240030d6:	bd80      	pop	{r7, pc}

240030d8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
240030d8:	b480      	push	{r7}
240030da:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
240030dc:	bf00      	nop
240030de:	46bd      	mov	sp, r7
240030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
240030e4:	4770      	bx	lr

240030e6 <HAL_GetCurrentCPUID>:
/**
* @brief  Returns the current CPU ID.
* @retval CPU identifier
*/
uint32_t HAL_GetCurrentCPUID(void)
{
240030e6:	b480      	push	{r7}
240030e8:	af00      	add	r7, sp, #0
  return  CM7_CPUID;
240030ea:	2303      	movs	r3, #3
}
240030ec:	4618      	mov	r0, r3
240030ee:	46bd      	mov	sp, r7
240030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240030f4:	4770      	bx	lr
240030f6:	bf00      	nop

240030f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
240030f8:	b480      	push	{r7}
240030fa:	b089      	sub	sp, #36	; 0x24
240030fc:	af00      	add	r7, sp, #0
240030fe:	6078      	str	r0, [r7, #4]
24003100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
24003102:	2300      	movs	r3, #0
24003104:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
24003106:	4b89      	ldr	r3, [pc, #548]	; (2400332c <HAL_GPIO_Init+0x234>)
24003108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
2400310a:	e194      	b.n	24003436 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
2400310c:	683b      	ldr	r3, [r7, #0]
2400310e:	681a      	ldr	r2, [r3, #0]
24003110:	2101      	movs	r1, #1
24003112:	69fb      	ldr	r3, [r7, #28]
24003114:	fa01 f303 	lsl.w	r3, r1, r3
24003118:	4013      	ands	r3, r2
2400311a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
2400311c:	693b      	ldr	r3, [r7, #16]
2400311e:	2b00      	cmp	r3, #0
24003120:	f000 8186 	beq.w	24003430 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
24003124:	683b      	ldr	r3, [r7, #0]
24003126:	685b      	ldr	r3, [r3, #4]
24003128:	2b01      	cmp	r3, #1
2400312a:	d00b      	beq.n	24003144 <HAL_GPIO_Init+0x4c>
2400312c:	683b      	ldr	r3, [r7, #0]
2400312e:	685b      	ldr	r3, [r3, #4]
24003130:	2b02      	cmp	r3, #2
24003132:	d007      	beq.n	24003144 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
24003134:	683b      	ldr	r3, [r7, #0]
24003136:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
24003138:	2b11      	cmp	r3, #17
2400313a:	d003      	beq.n	24003144 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
2400313c:	683b      	ldr	r3, [r7, #0]
2400313e:	685b      	ldr	r3, [r3, #4]
24003140:	2b12      	cmp	r3, #18
24003142:	d130      	bne.n	240031a6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
24003144:	687b      	ldr	r3, [r7, #4]
24003146:	689b      	ldr	r3, [r3, #8]
24003148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
2400314a:	69fb      	ldr	r3, [r7, #28]
2400314c:	005b      	lsls	r3, r3, #1
2400314e:	2203      	movs	r2, #3
24003150:	fa02 f303 	lsl.w	r3, r2, r3
24003154:	43db      	mvns	r3, r3
24003156:	69ba      	ldr	r2, [r7, #24]
24003158:	4013      	ands	r3, r2
2400315a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
2400315c:	683b      	ldr	r3, [r7, #0]
2400315e:	68da      	ldr	r2, [r3, #12]
24003160:	69fb      	ldr	r3, [r7, #28]
24003162:	005b      	lsls	r3, r3, #1
24003164:	fa02 f303 	lsl.w	r3, r2, r3
24003168:	69ba      	ldr	r2, [r7, #24]
2400316a:	4313      	orrs	r3, r2
2400316c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
2400316e:	687b      	ldr	r3, [r7, #4]
24003170:	69ba      	ldr	r2, [r7, #24]
24003172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
24003174:	687b      	ldr	r3, [r7, #4]
24003176:	685b      	ldr	r3, [r3, #4]
24003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
2400317a:	2201      	movs	r2, #1
2400317c:	69fb      	ldr	r3, [r7, #28]
2400317e:	fa02 f303 	lsl.w	r3, r2, r3
24003182:	43db      	mvns	r3, r3
24003184:	69ba      	ldr	r2, [r7, #24]
24003186:	4013      	ands	r3, r2
24003188:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
2400318a:	683b      	ldr	r3, [r7, #0]
2400318c:	685b      	ldr	r3, [r3, #4]
2400318e:	091b      	lsrs	r3, r3, #4
24003190:	f003 0201 	and.w	r2, r3, #1
24003194:	69fb      	ldr	r3, [r7, #28]
24003196:	fa02 f303 	lsl.w	r3, r2, r3
2400319a:	69ba      	ldr	r2, [r7, #24]
2400319c:	4313      	orrs	r3, r2
2400319e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
240031a0:	687b      	ldr	r3, [r7, #4]
240031a2:	69ba      	ldr	r2, [r7, #24]
240031a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
240031a6:	687b      	ldr	r3, [r7, #4]
240031a8:	68db      	ldr	r3, [r3, #12]
240031aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
240031ac:	69fb      	ldr	r3, [r7, #28]
240031ae:	005b      	lsls	r3, r3, #1
240031b0:	2203      	movs	r2, #3
240031b2:	fa02 f303 	lsl.w	r3, r2, r3
240031b6:	43db      	mvns	r3, r3
240031b8:	69ba      	ldr	r2, [r7, #24]
240031ba:	4013      	ands	r3, r2
240031bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
240031be:	683b      	ldr	r3, [r7, #0]
240031c0:	689a      	ldr	r2, [r3, #8]
240031c2:	69fb      	ldr	r3, [r7, #28]
240031c4:	005b      	lsls	r3, r3, #1
240031c6:	fa02 f303 	lsl.w	r3, r2, r3
240031ca:	69ba      	ldr	r2, [r7, #24]
240031cc:	4313      	orrs	r3, r2
240031ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
240031d0:	687b      	ldr	r3, [r7, #4]
240031d2:	69ba      	ldr	r2, [r7, #24]
240031d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
240031d6:	683b      	ldr	r3, [r7, #0]
240031d8:	685b      	ldr	r3, [r3, #4]
240031da:	2b02      	cmp	r3, #2
240031dc:	d003      	beq.n	240031e6 <HAL_GPIO_Init+0xee>
240031de:	683b      	ldr	r3, [r7, #0]
240031e0:	685b      	ldr	r3, [r3, #4]
240031e2:	2b12      	cmp	r3, #18
240031e4:	d123      	bne.n	2400322e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
240031e6:	69fb      	ldr	r3, [r7, #28]
240031e8:	08da      	lsrs	r2, r3, #3
240031ea:	687b      	ldr	r3, [r7, #4]
240031ec:	3208      	adds	r2, #8
240031ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
240031f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
240031f4:	69fb      	ldr	r3, [r7, #28]
240031f6:	f003 0307 	and.w	r3, r3, #7
240031fa:	009b      	lsls	r3, r3, #2
240031fc:	220f      	movs	r2, #15
240031fe:	fa02 f303 	lsl.w	r3, r2, r3
24003202:	43db      	mvns	r3, r3
24003204:	69ba      	ldr	r2, [r7, #24]
24003206:	4013      	ands	r3, r2
24003208:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2400320a:	683b      	ldr	r3, [r7, #0]
2400320c:	691a      	ldr	r2, [r3, #16]
2400320e:	69fb      	ldr	r3, [r7, #28]
24003210:	f003 0307 	and.w	r3, r3, #7
24003214:	009b      	lsls	r3, r3, #2
24003216:	fa02 f303 	lsl.w	r3, r2, r3
2400321a:	69ba      	ldr	r2, [r7, #24]
2400321c:	4313      	orrs	r3, r2
2400321e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
24003220:	69fb      	ldr	r3, [r7, #28]
24003222:	08da      	lsrs	r2, r3, #3
24003224:	687b      	ldr	r3, [r7, #4]
24003226:	3208      	adds	r2, #8
24003228:	69b9      	ldr	r1, [r7, #24]
2400322a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2400322e:	687b      	ldr	r3, [r7, #4]
24003230:	681b      	ldr	r3, [r3, #0]
24003232:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
24003234:	69fb      	ldr	r3, [r7, #28]
24003236:	005b      	lsls	r3, r3, #1
24003238:	2203      	movs	r2, #3
2400323a:	fa02 f303 	lsl.w	r3, r2, r3
2400323e:	43db      	mvns	r3, r3
24003240:	69ba      	ldr	r2, [r7, #24]
24003242:	4013      	ands	r3, r2
24003244:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
24003246:	683b      	ldr	r3, [r7, #0]
24003248:	685b      	ldr	r3, [r3, #4]
2400324a:	f003 0203 	and.w	r2, r3, #3
2400324e:	69fb      	ldr	r3, [r7, #28]
24003250:	005b      	lsls	r3, r3, #1
24003252:	fa02 f303 	lsl.w	r3, r2, r3
24003256:	69ba      	ldr	r2, [r7, #24]
24003258:	4313      	orrs	r3, r2
2400325a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
2400325c:	687b      	ldr	r3, [r7, #4]
2400325e:	69ba      	ldr	r2, [r7, #24]
24003260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
24003262:	683b      	ldr	r3, [r7, #0]
24003264:	685b      	ldr	r3, [r3, #4]
24003266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
2400326a:	2b00      	cmp	r3, #0
2400326c:	f000 80e0 	beq.w	24003430 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
24003270:	4b2f      	ldr	r3, [pc, #188]	; (24003330 <HAL_GPIO_Init+0x238>)
24003272:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24003276:	4a2e      	ldr	r2, [pc, #184]	; (24003330 <HAL_GPIO_Init+0x238>)
24003278:	f043 0302 	orr.w	r3, r3, #2
2400327c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
24003280:	4b2b      	ldr	r3, [pc, #172]	; (24003330 <HAL_GPIO_Init+0x238>)
24003282:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
24003286:	f003 0302 	and.w	r3, r3, #2
2400328a:	60fb      	str	r3, [r7, #12]
2400328c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
2400328e:	4a29      	ldr	r2, [pc, #164]	; (24003334 <HAL_GPIO_Init+0x23c>)
24003290:	69fb      	ldr	r3, [r7, #28]
24003292:	089b      	lsrs	r3, r3, #2
24003294:	3302      	adds	r3, #2
24003296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400329a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
2400329c:	69fb      	ldr	r3, [r7, #28]
2400329e:	f003 0303 	and.w	r3, r3, #3
240032a2:	009b      	lsls	r3, r3, #2
240032a4:	220f      	movs	r2, #15
240032a6:	fa02 f303 	lsl.w	r3, r2, r3
240032aa:	43db      	mvns	r3, r3
240032ac:	69ba      	ldr	r2, [r7, #24]
240032ae:	4013      	ands	r3, r2
240032b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
240032b2:	687b      	ldr	r3, [r7, #4]
240032b4:	4a20      	ldr	r2, [pc, #128]	; (24003338 <HAL_GPIO_Init+0x240>)
240032b6:	4293      	cmp	r3, r2
240032b8:	d052      	beq.n	24003360 <HAL_GPIO_Init+0x268>
240032ba:	687b      	ldr	r3, [r7, #4]
240032bc:	4a1f      	ldr	r2, [pc, #124]	; (2400333c <HAL_GPIO_Init+0x244>)
240032be:	4293      	cmp	r3, r2
240032c0:	d031      	beq.n	24003326 <HAL_GPIO_Init+0x22e>
240032c2:	687b      	ldr	r3, [r7, #4]
240032c4:	4a1e      	ldr	r2, [pc, #120]	; (24003340 <HAL_GPIO_Init+0x248>)
240032c6:	4293      	cmp	r3, r2
240032c8:	d02b      	beq.n	24003322 <HAL_GPIO_Init+0x22a>
240032ca:	687b      	ldr	r3, [r7, #4]
240032cc:	4a1d      	ldr	r2, [pc, #116]	; (24003344 <HAL_GPIO_Init+0x24c>)
240032ce:	4293      	cmp	r3, r2
240032d0:	d025      	beq.n	2400331e <HAL_GPIO_Init+0x226>
240032d2:	687b      	ldr	r3, [r7, #4]
240032d4:	4a1c      	ldr	r2, [pc, #112]	; (24003348 <HAL_GPIO_Init+0x250>)
240032d6:	4293      	cmp	r3, r2
240032d8:	d01f      	beq.n	2400331a <HAL_GPIO_Init+0x222>
240032da:	687b      	ldr	r3, [r7, #4]
240032dc:	4a1b      	ldr	r2, [pc, #108]	; (2400334c <HAL_GPIO_Init+0x254>)
240032de:	4293      	cmp	r3, r2
240032e0:	d019      	beq.n	24003316 <HAL_GPIO_Init+0x21e>
240032e2:	687b      	ldr	r3, [r7, #4]
240032e4:	4a1a      	ldr	r2, [pc, #104]	; (24003350 <HAL_GPIO_Init+0x258>)
240032e6:	4293      	cmp	r3, r2
240032e8:	d013      	beq.n	24003312 <HAL_GPIO_Init+0x21a>
240032ea:	687b      	ldr	r3, [r7, #4]
240032ec:	4a19      	ldr	r2, [pc, #100]	; (24003354 <HAL_GPIO_Init+0x25c>)
240032ee:	4293      	cmp	r3, r2
240032f0:	d00d      	beq.n	2400330e <HAL_GPIO_Init+0x216>
240032f2:	687b      	ldr	r3, [r7, #4]
240032f4:	4a18      	ldr	r2, [pc, #96]	; (24003358 <HAL_GPIO_Init+0x260>)
240032f6:	4293      	cmp	r3, r2
240032f8:	d007      	beq.n	2400330a <HAL_GPIO_Init+0x212>
240032fa:	687b      	ldr	r3, [r7, #4]
240032fc:	4a17      	ldr	r2, [pc, #92]	; (2400335c <HAL_GPIO_Init+0x264>)
240032fe:	4293      	cmp	r3, r2
24003300:	d101      	bne.n	24003306 <HAL_GPIO_Init+0x20e>
24003302:	2309      	movs	r3, #9
24003304:	e02d      	b.n	24003362 <HAL_GPIO_Init+0x26a>
24003306:	230a      	movs	r3, #10
24003308:	e02b      	b.n	24003362 <HAL_GPIO_Init+0x26a>
2400330a:	2308      	movs	r3, #8
2400330c:	e029      	b.n	24003362 <HAL_GPIO_Init+0x26a>
2400330e:	2307      	movs	r3, #7
24003310:	e027      	b.n	24003362 <HAL_GPIO_Init+0x26a>
24003312:	2306      	movs	r3, #6
24003314:	e025      	b.n	24003362 <HAL_GPIO_Init+0x26a>
24003316:	2305      	movs	r3, #5
24003318:	e023      	b.n	24003362 <HAL_GPIO_Init+0x26a>
2400331a:	2304      	movs	r3, #4
2400331c:	e021      	b.n	24003362 <HAL_GPIO_Init+0x26a>
2400331e:	2303      	movs	r3, #3
24003320:	e01f      	b.n	24003362 <HAL_GPIO_Init+0x26a>
24003322:	2302      	movs	r3, #2
24003324:	e01d      	b.n	24003362 <HAL_GPIO_Init+0x26a>
24003326:	2301      	movs	r3, #1
24003328:	e01b      	b.n	24003362 <HAL_GPIO_Init+0x26a>
2400332a:	bf00      	nop
2400332c:	58000080 	.word	0x58000080
24003330:	58024400 	.word	0x58024400
24003334:	58000400 	.word	0x58000400
24003338:	58020000 	.word	0x58020000
2400333c:	58020400 	.word	0x58020400
24003340:	58020800 	.word	0x58020800
24003344:	58020c00 	.word	0x58020c00
24003348:	58021000 	.word	0x58021000
2400334c:	58021400 	.word	0x58021400
24003350:	58021800 	.word	0x58021800
24003354:	58021c00 	.word	0x58021c00
24003358:	58022000 	.word	0x58022000
2400335c:	58022400 	.word	0x58022400
24003360:	2300      	movs	r3, #0
24003362:	69fa      	ldr	r2, [r7, #28]
24003364:	f002 0203 	and.w	r2, r2, #3
24003368:	0092      	lsls	r2, r2, #2
2400336a:	4093      	lsls	r3, r2
2400336c:	69ba      	ldr	r2, [r7, #24]
2400336e:	4313      	orrs	r3, r2
24003370:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
24003372:	4938      	ldr	r1, [pc, #224]	; (24003454 <HAL_GPIO_Init+0x35c>)
24003374:	69fb      	ldr	r3, [r7, #28]
24003376:	089b      	lsrs	r3, r3, #2
24003378:	3302      	adds	r3, #2
2400337a:	69ba      	ldr	r2, [r7, #24]
2400337c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
24003380:	697b      	ldr	r3, [r7, #20]
24003382:	681b      	ldr	r3, [r3, #0]
24003384:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
24003386:	693b      	ldr	r3, [r7, #16]
24003388:	43db      	mvns	r3, r3
2400338a:	69ba      	ldr	r2, [r7, #24]
2400338c:	4013      	ands	r3, r2
2400338e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
24003390:	683b      	ldr	r3, [r7, #0]
24003392:	685b      	ldr	r3, [r3, #4]
24003394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24003398:	2b00      	cmp	r3, #0
2400339a:	d003      	beq.n	240033a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
2400339c:	69ba      	ldr	r2, [r7, #24]
2400339e:	693b      	ldr	r3, [r7, #16]
240033a0:	4313      	orrs	r3, r2
240033a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
240033a4:	697b      	ldr	r3, [r7, #20]
240033a6:	69ba      	ldr	r2, [r7, #24]
240033a8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
240033aa:	697b      	ldr	r3, [r7, #20]
240033ac:	685b      	ldr	r3, [r3, #4]
240033ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
240033b0:	693b      	ldr	r3, [r7, #16]
240033b2:	43db      	mvns	r3, r3
240033b4:	69ba      	ldr	r2, [r7, #24]
240033b6:	4013      	ands	r3, r2
240033b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
240033ba:	683b      	ldr	r3, [r7, #0]
240033bc:	685b      	ldr	r3, [r3, #4]
240033be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240033c2:	2b00      	cmp	r3, #0
240033c4:	d003      	beq.n	240033ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
240033c6:	69ba      	ldr	r2, [r7, #24]
240033c8:	693b      	ldr	r3, [r7, #16]
240033ca:	4313      	orrs	r3, r2
240033cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
240033ce:	697b      	ldr	r3, [r7, #20]
240033d0:	69ba      	ldr	r2, [r7, #24]
240033d2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
240033d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240033d8:	681b      	ldr	r3, [r3, #0]
240033da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
240033dc:	693b      	ldr	r3, [r7, #16]
240033de:	43db      	mvns	r3, r3
240033e0:	69ba      	ldr	r2, [r7, #24]
240033e2:	4013      	ands	r3, r2
240033e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
240033e6:	683b      	ldr	r3, [r7, #0]
240033e8:	685b      	ldr	r3, [r3, #4]
240033ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
240033ee:	2b00      	cmp	r3, #0
240033f0:	d003      	beq.n	240033fa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
240033f2:	69ba      	ldr	r2, [r7, #24]
240033f4:	693b      	ldr	r3, [r7, #16]
240033f6:	4313      	orrs	r3, r2
240033f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
240033fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240033fe:	69bb      	ldr	r3, [r7, #24]
24003400:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
24003402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24003406:	685b      	ldr	r3, [r3, #4]
24003408:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
2400340a:	693b      	ldr	r3, [r7, #16]
2400340c:	43db      	mvns	r3, r3
2400340e:	69ba      	ldr	r2, [r7, #24]
24003410:	4013      	ands	r3, r2
24003412:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
24003414:	683b      	ldr	r3, [r7, #0]
24003416:	685b      	ldr	r3, [r3, #4]
24003418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
2400341c:	2b00      	cmp	r3, #0
2400341e:	d003      	beq.n	24003428 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
24003420:	69ba      	ldr	r2, [r7, #24]
24003422:	693b      	ldr	r3, [r7, #16]
24003424:	4313      	orrs	r3, r2
24003426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
24003428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400342c:	69bb      	ldr	r3, [r7, #24]
2400342e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
24003430:	69fb      	ldr	r3, [r7, #28]
24003432:	3301      	adds	r3, #1
24003434:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
24003436:	683b      	ldr	r3, [r7, #0]
24003438:	681a      	ldr	r2, [r3, #0]
2400343a:	69fb      	ldr	r3, [r7, #28]
2400343c:	fa22 f303 	lsr.w	r3, r2, r3
24003440:	2b00      	cmp	r3, #0
24003442:	f47f ae63 	bne.w	2400310c <HAL_GPIO_Init+0x14>
  }
}
24003446:	bf00      	nop
24003448:	3724      	adds	r7, #36	; 0x24
2400344a:	46bd      	mov	sp, r7
2400344c:	f85d 7b04 	ldr.w	r7, [sp], #4
24003450:	4770      	bx	lr
24003452:	bf00      	nop
24003454:	58000400 	.word	0x58000400

24003458 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
24003458:	b480      	push	{r7}
2400345a:	b087      	sub	sp, #28
2400345c:	af00      	add	r7, sp, #0
2400345e:	6078      	str	r0, [r7, #4]
24003460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
24003462:	2300      	movs	r3, #0
24003464:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
24003466:	4b75      	ldr	r3, [pc, #468]	; (2400363c <HAL_GPIO_DeInit+0x1e4>)
24003468:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
2400346a:	e0d9      	b.n	24003620 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
2400346c:	2201      	movs	r2, #1
2400346e:	697b      	ldr	r3, [r7, #20]
24003470:	fa02 f303 	lsl.w	r3, r2, r3
24003474:	683a      	ldr	r2, [r7, #0]
24003476:	4013      	ands	r3, r2
24003478:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
2400347a:	68fb      	ldr	r3, [r7, #12]
2400347c:	2b00      	cmp	r3, #0
2400347e:	f000 80cc 	beq.w	2400361a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
24003482:	4a6f      	ldr	r2, [pc, #444]	; (24003640 <HAL_GPIO_DeInit+0x1e8>)
24003484:	697b      	ldr	r3, [r7, #20]
24003486:	089b      	lsrs	r3, r3, #2
24003488:	3302      	adds	r3, #2
2400348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
2400348e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
24003490:	697b      	ldr	r3, [r7, #20]
24003492:	f003 0303 	and.w	r3, r3, #3
24003496:	009b      	lsls	r3, r3, #2
24003498:	220f      	movs	r2, #15
2400349a:	fa02 f303 	lsl.w	r3, r2, r3
2400349e:	68ba      	ldr	r2, [r7, #8]
240034a0:	4013      	ands	r3, r2
240034a2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
240034a4:	687b      	ldr	r3, [r7, #4]
240034a6:	4a67      	ldr	r2, [pc, #412]	; (24003644 <HAL_GPIO_DeInit+0x1ec>)
240034a8:	4293      	cmp	r3, r2
240034aa:	d037      	beq.n	2400351c <HAL_GPIO_DeInit+0xc4>
240034ac:	687b      	ldr	r3, [r7, #4]
240034ae:	4a66      	ldr	r2, [pc, #408]	; (24003648 <HAL_GPIO_DeInit+0x1f0>)
240034b0:	4293      	cmp	r3, r2
240034b2:	d031      	beq.n	24003518 <HAL_GPIO_DeInit+0xc0>
240034b4:	687b      	ldr	r3, [r7, #4]
240034b6:	4a65      	ldr	r2, [pc, #404]	; (2400364c <HAL_GPIO_DeInit+0x1f4>)
240034b8:	4293      	cmp	r3, r2
240034ba:	d02b      	beq.n	24003514 <HAL_GPIO_DeInit+0xbc>
240034bc:	687b      	ldr	r3, [r7, #4]
240034be:	4a64      	ldr	r2, [pc, #400]	; (24003650 <HAL_GPIO_DeInit+0x1f8>)
240034c0:	4293      	cmp	r3, r2
240034c2:	d025      	beq.n	24003510 <HAL_GPIO_DeInit+0xb8>
240034c4:	687b      	ldr	r3, [r7, #4]
240034c6:	4a63      	ldr	r2, [pc, #396]	; (24003654 <HAL_GPIO_DeInit+0x1fc>)
240034c8:	4293      	cmp	r3, r2
240034ca:	d01f      	beq.n	2400350c <HAL_GPIO_DeInit+0xb4>
240034cc:	687b      	ldr	r3, [r7, #4]
240034ce:	4a62      	ldr	r2, [pc, #392]	; (24003658 <HAL_GPIO_DeInit+0x200>)
240034d0:	4293      	cmp	r3, r2
240034d2:	d019      	beq.n	24003508 <HAL_GPIO_DeInit+0xb0>
240034d4:	687b      	ldr	r3, [r7, #4]
240034d6:	4a61      	ldr	r2, [pc, #388]	; (2400365c <HAL_GPIO_DeInit+0x204>)
240034d8:	4293      	cmp	r3, r2
240034da:	d013      	beq.n	24003504 <HAL_GPIO_DeInit+0xac>
240034dc:	687b      	ldr	r3, [r7, #4]
240034de:	4a60      	ldr	r2, [pc, #384]	; (24003660 <HAL_GPIO_DeInit+0x208>)
240034e0:	4293      	cmp	r3, r2
240034e2:	d00d      	beq.n	24003500 <HAL_GPIO_DeInit+0xa8>
240034e4:	687b      	ldr	r3, [r7, #4]
240034e6:	4a5f      	ldr	r2, [pc, #380]	; (24003664 <HAL_GPIO_DeInit+0x20c>)
240034e8:	4293      	cmp	r3, r2
240034ea:	d007      	beq.n	240034fc <HAL_GPIO_DeInit+0xa4>
240034ec:	687b      	ldr	r3, [r7, #4]
240034ee:	4a5e      	ldr	r2, [pc, #376]	; (24003668 <HAL_GPIO_DeInit+0x210>)
240034f0:	4293      	cmp	r3, r2
240034f2:	d101      	bne.n	240034f8 <HAL_GPIO_DeInit+0xa0>
240034f4:	2309      	movs	r3, #9
240034f6:	e012      	b.n	2400351e <HAL_GPIO_DeInit+0xc6>
240034f8:	230a      	movs	r3, #10
240034fa:	e010      	b.n	2400351e <HAL_GPIO_DeInit+0xc6>
240034fc:	2308      	movs	r3, #8
240034fe:	e00e      	b.n	2400351e <HAL_GPIO_DeInit+0xc6>
24003500:	2307      	movs	r3, #7
24003502:	e00c      	b.n	2400351e <HAL_GPIO_DeInit+0xc6>
24003504:	2306      	movs	r3, #6
24003506:	e00a      	b.n	2400351e <HAL_GPIO_DeInit+0xc6>
24003508:	2305      	movs	r3, #5
2400350a:	e008      	b.n	2400351e <HAL_GPIO_DeInit+0xc6>
2400350c:	2304      	movs	r3, #4
2400350e:	e006      	b.n	2400351e <HAL_GPIO_DeInit+0xc6>
24003510:	2303      	movs	r3, #3
24003512:	e004      	b.n	2400351e <HAL_GPIO_DeInit+0xc6>
24003514:	2302      	movs	r3, #2
24003516:	e002      	b.n	2400351e <HAL_GPIO_DeInit+0xc6>
24003518:	2301      	movs	r3, #1
2400351a:	e000      	b.n	2400351e <HAL_GPIO_DeInit+0xc6>
2400351c:	2300      	movs	r3, #0
2400351e:	697a      	ldr	r2, [r7, #20]
24003520:	f002 0203 	and.w	r2, r2, #3
24003524:	0092      	lsls	r2, r2, #2
24003526:	4093      	lsls	r3, r2
24003528:	68ba      	ldr	r2, [r7, #8]
2400352a:	429a      	cmp	r2, r3
2400352c:	d136      	bne.n	2400359c <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
2400352e:	693b      	ldr	r3, [r7, #16]
24003530:	681a      	ldr	r2, [r3, #0]
24003532:	68fb      	ldr	r3, [r7, #12]
24003534:	43db      	mvns	r3, r3
24003536:	401a      	ands	r2, r3
24003538:	693b      	ldr	r3, [r7, #16]
2400353a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
2400353c:	693b      	ldr	r3, [r7, #16]
2400353e:	685a      	ldr	r2, [r3, #4]
24003540:	68fb      	ldr	r3, [r7, #12]
24003542:	43db      	mvns	r3, r3
24003544:	401a      	ands	r2, r3
24003546:	693b      	ldr	r3, [r7, #16]
24003548:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
2400354a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400354e:	681a      	ldr	r2, [r3, #0]
24003550:	68fb      	ldr	r3, [r7, #12]
24003552:	43db      	mvns	r3, r3
24003554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
24003558:	4013      	ands	r3, r2
2400355a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
2400355c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24003560:	685a      	ldr	r2, [r3, #4]
24003562:	68fb      	ldr	r3, [r7, #12]
24003564:	43db      	mvns	r3, r3
24003566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
2400356a:	4013      	ands	r3, r2
2400356c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FUL << (4U * (position & 0x03U));
2400356e:	697b      	ldr	r3, [r7, #20]
24003570:	f003 0303 	and.w	r3, r3, #3
24003574:	009b      	lsls	r3, r3, #2
24003576:	220f      	movs	r2, #15
24003578:	fa02 f303 	lsl.w	r3, r2, r3
2400357c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
2400357e:	4a30      	ldr	r2, [pc, #192]	; (24003640 <HAL_GPIO_DeInit+0x1e8>)
24003580:	697b      	ldr	r3, [r7, #20]
24003582:	089b      	lsrs	r3, r3, #2
24003584:	3302      	adds	r3, #2
24003586:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
2400358a:	68bb      	ldr	r3, [r7, #8]
2400358c:	43da      	mvns	r2, r3
2400358e:	482c      	ldr	r0, [pc, #176]	; (24003640 <HAL_GPIO_DeInit+0x1e8>)
24003590:	697b      	ldr	r3, [r7, #20]
24003592:	089b      	lsrs	r3, r3, #2
24003594:	400a      	ands	r2, r1
24003596:	3302      	adds	r3, #2
24003598:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
2400359c:	687b      	ldr	r3, [r7, #4]
2400359e:	681a      	ldr	r2, [r3, #0]
240035a0:	697b      	ldr	r3, [r7, #20]
240035a2:	005b      	lsls	r3, r3, #1
240035a4:	2103      	movs	r1, #3
240035a6:	fa01 f303 	lsl.w	r3, r1, r3
240035aa:	431a      	orrs	r2, r3
240035ac:	687b      	ldr	r3, [r7, #4]
240035ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
240035b0:	697b      	ldr	r3, [r7, #20]
240035b2:	08da      	lsrs	r2, r3, #3
240035b4:	687b      	ldr	r3, [r7, #4]
240035b6:	3208      	adds	r2, #8
240035b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
240035bc:	697b      	ldr	r3, [r7, #20]
240035be:	f003 0307 	and.w	r3, r3, #7
240035c2:	009b      	lsls	r3, r3, #2
240035c4:	220f      	movs	r2, #15
240035c6:	fa02 f303 	lsl.w	r3, r2, r3
240035ca:	43db      	mvns	r3, r3
240035cc:	697a      	ldr	r2, [r7, #20]
240035ce:	08d2      	lsrs	r2, r2, #3
240035d0:	4019      	ands	r1, r3
240035d2:	687b      	ldr	r3, [r7, #4]
240035d4:	3208      	adds	r2, #8
240035d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
240035da:	687b      	ldr	r3, [r7, #4]
240035dc:	68da      	ldr	r2, [r3, #12]
240035de:	697b      	ldr	r3, [r7, #20]
240035e0:	005b      	lsls	r3, r3, #1
240035e2:	2103      	movs	r1, #3
240035e4:	fa01 f303 	lsl.w	r3, r1, r3
240035e8:	43db      	mvns	r3, r3
240035ea:	401a      	ands	r2, r3
240035ec:	687b      	ldr	r3, [r7, #4]
240035ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
240035f0:	687b      	ldr	r3, [r7, #4]
240035f2:	685a      	ldr	r2, [r3, #4]
240035f4:	2101      	movs	r1, #1
240035f6:	697b      	ldr	r3, [r7, #20]
240035f8:	fa01 f303 	lsl.w	r3, r1, r3
240035fc:	43db      	mvns	r3, r3
240035fe:	401a      	ands	r2, r3
24003600:	687b      	ldr	r3, [r7, #4]
24003602:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
24003604:	687b      	ldr	r3, [r7, #4]
24003606:	689a      	ldr	r2, [r3, #8]
24003608:	697b      	ldr	r3, [r7, #20]
2400360a:	005b      	lsls	r3, r3, #1
2400360c:	2103      	movs	r1, #3
2400360e:	fa01 f303 	lsl.w	r3, r1, r3
24003612:	43db      	mvns	r3, r3
24003614:	401a      	ands	r2, r3
24003616:	687b      	ldr	r3, [r7, #4]
24003618:	609a      	str	r2, [r3, #8]
    }

    position++;
2400361a:	697b      	ldr	r3, [r7, #20]
2400361c:	3301      	adds	r3, #1
2400361e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
24003620:	683a      	ldr	r2, [r7, #0]
24003622:	697b      	ldr	r3, [r7, #20]
24003624:	fa22 f303 	lsr.w	r3, r2, r3
24003628:	2b00      	cmp	r3, #0
2400362a:	f47f af1f 	bne.w	2400346c <HAL_GPIO_DeInit+0x14>
  }
}
2400362e:	bf00      	nop
24003630:	371c      	adds	r7, #28
24003632:	46bd      	mov	sp, r7
24003634:	f85d 7b04 	ldr.w	r7, [sp], #4
24003638:	4770      	bx	lr
2400363a:	bf00      	nop
2400363c:	58000080 	.word	0x58000080
24003640:	58000400 	.word	0x58000400
24003644:	58020000 	.word	0x58020000
24003648:	58020400 	.word	0x58020400
2400364c:	58020800 	.word	0x58020800
24003650:	58020c00 	.word	0x58020c00
24003654:	58021000 	.word	0x58021000
24003658:	58021400 	.word	0x58021400
2400365c:	58021800 	.word	0x58021800
24003660:	58021c00 	.word	0x58021c00
24003664:	58022000 	.word	0x58022000
24003668:	58022400 	.word	0x58022400

2400366c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
2400366c:	b480      	push	{r7}
2400366e:	b085      	sub	sp, #20
24003670:	af00      	add	r7, sp, #0
24003672:	6078      	str	r0, [r7, #4]
24003674:	460b      	mov	r3, r1
24003676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
24003678:	687b      	ldr	r3, [r7, #4]
2400367a:	691a      	ldr	r2, [r3, #16]
2400367c:	887b      	ldrh	r3, [r7, #2]
2400367e:	4013      	ands	r3, r2
24003680:	2b00      	cmp	r3, #0
24003682:	d002      	beq.n	2400368a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
24003684:	2301      	movs	r3, #1
24003686:	73fb      	strb	r3, [r7, #15]
24003688:	e001      	b.n	2400368e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
2400368a:	2300      	movs	r3, #0
2400368c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
2400368e:	7bfb      	ldrb	r3, [r7, #15]
}
24003690:	4618      	mov	r0, r3
24003692:	3714      	adds	r7, #20
24003694:	46bd      	mov	sp, r7
24003696:	f85d 7b04 	ldr.w	r7, [sp], #4
2400369a:	4770      	bx	lr

2400369c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
2400369c:	b480      	push	{r7}
2400369e:	b083      	sub	sp, #12
240036a0:	af00      	add	r7, sp, #0
240036a2:	6078      	str	r0, [r7, #4]
240036a4:	460b      	mov	r3, r1
240036a6:	807b      	strh	r3, [r7, #2]
240036a8:	4613      	mov	r3, r2
240036aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
240036ac:	787b      	ldrb	r3, [r7, #1]
240036ae:	2b00      	cmp	r3, #0
240036b0:	d003      	beq.n	240036ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
240036b2:	887a      	ldrh	r2, [r7, #2]
240036b4:	687b      	ldr	r3, [r7, #4]
240036b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
240036b8:	e003      	b.n	240036c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
240036ba:	887b      	ldrh	r3, [r7, #2]
240036bc:	041a      	lsls	r2, r3, #16
240036be:	687b      	ldr	r3, [r7, #4]
240036c0:	619a      	str	r2, [r3, #24]
}
240036c2:	bf00      	nop
240036c4:	370c      	adds	r7, #12
240036c6:	46bd      	mov	sp, r7
240036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
240036cc:	4770      	bx	lr

240036ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
240036ce:	b480      	push	{r7}
240036d0:	b083      	sub	sp, #12
240036d2:	af00      	add	r7, sp, #0
240036d4:	6078      	str	r0, [r7, #4]
240036d6:	460b      	mov	r3, r1
240036d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
240036da:	687b      	ldr	r3, [r7, #4]
240036dc:	695a      	ldr	r2, [r3, #20]
240036de:	887b      	ldrh	r3, [r7, #2]
240036e0:	401a      	ands	r2, r3
240036e2:	887b      	ldrh	r3, [r7, #2]
240036e4:	429a      	cmp	r2, r3
240036e6:	d104      	bne.n	240036f2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
240036e8:	887b      	ldrh	r3, [r7, #2]
240036ea:	041a      	lsls	r2, r3, #16
240036ec:	687b      	ldr	r3, [r7, #4]
240036ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
240036f0:	e002      	b.n	240036f8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
240036f2:	887a      	ldrh	r2, [r7, #2]
240036f4:	687b      	ldr	r3, [r7, #4]
240036f6:	619a      	str	r2, [r3, #24]
}
240036f8:	bf00      	nop
240036fa:	370c      	adds	r7, #12
240036fc:	46bd      	mov	sp, r7
240036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
24003702:	4770      	bx	lr

24003704 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
24003704:	b480      	push	{r7}
24003706:	b085      	sub	sp, #20
24003708:	af00      	add	r7, sp, #0
2400370a:	6078      	str	r0, [r7, #4]
2400370c:	460b      	mov	r3, r1
2400370e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
24003710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
24003714:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
24003716:	887a      	ldrh	r2, [r7, #2]
24003718:	68fb      	ldr	r3, [r7, #12]
2400371a:	4313      	orrs	r3, r2
2400371c:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
2400371e:	68fa      	ldr	r2, [r7, #12]
24003720:	687b      	ldr	r3, [r7, #4]
24003722:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
24003724:	887a      	ldrh	r2, [r7, #2]
24003726:	687b      	ldr	r3, [r7, #4]
24003728:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
2400372a:	68fa      	ldr	r2, [r7, #12]
2400372c:	687b      	ldr	r3, [r7, #4]
2400372e:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence*/
  tmp = GPIOx->LCKR;
24003730:	687b      	ldr	r3, [r7, #4]
24003732:	69db      	ldr	r3, [r3, #28]
24003734:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00U)
24003736:	687b      	ldr	r3, [r7, #4]
24003738:	69db      	ldr	r3, [r3, #28]
2400373a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2400373e:	2b00      	cmp	r3, #0
24003740:	d001      	beq.n	24003746 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
24003742:	2300      	movs	r3, #0
24003744:	e000      	b.n	24003748 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
24003746:	2301      	movs	r3, #1
  }
}
24003748:	4618      	mov	r0, r3
2400374a:	3714      	adds	r7, #20
2400374c:	46bd      	mov	sp, r7
2400374e:	f85d 7b04 	ldr.w	r7, [sp], #4
24003752:	4770      	bx	lr

24003754 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
24003754:	b580      	push	{r7, lr}
24003756:	b082      	sub	sp, #8
24003758:	af00      	add	r7, sp, #0
2400375a:	4603      	mov	r3, r0
2400375c:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
2400375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24003762:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
24003766:	88fb      	ldrh	r3, [r7, #6]
24003768:	4013      	ands	r3, r2
2400376a:	2b00      	cmp	r3, #0
2400376c:	d008      	beq.n	24003780 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
2400376e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24003772:	88fb      	ldrh	r3, [r7, #6]
24003774:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
24003778:	88fb      	ldrh	r3, [r7, #6]
2400377a:	4618      	mov	r0, r3
2400377c:	f000 f804 	bl	24003788 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
24003780:	bf00      	nop
24003782:	3708      	adds	r7, #8
24003784:	46bd      	mov	sp, r7
24003786:	bd80      	pop	{r7, pc}

24003788 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
24003788:	b480      	push	{r7}
2400378a:	b083      	sub	sp, #12
2400378c:	af00      	add	r7, sp, #0
2400378e:	4603      	mov	r3, r0
24003790:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
24003792:	bf00      	nop
24003794:	370c      	adds	r7, #12
24003796:	46bd      	mov	sp, r7
24003798:	f85d 7b04 	ldr.w	r7, [sp], #4
2400379c:	4770      	bx	lr
2400379e:	bf00      	nop

240037a0 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
240037a0:	b580      	push	{r7, lr}
240037a2:	b084      	sub	sp, #16
240037a4:	af00      	add	r7, sp, #0
240037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
240037a8:	f7fe fd08 	bl	240021bc <HAL_GetTick>
240037ac:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240037ae:	687b      	ldr	r3, [r7, #4]
240037b0:	2b00      	cmp	r3, #0
240037b2:	d101      	bne.n	240037b8 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
240037b4:	2301      	movs	r3, #1
240037b6:	e03b      	b.n	24003830 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
240037b8:	687b      	ldr	r3, [r7, #4]
240037ba:	2200      	movs	r2, #0
240037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
240037c0:	687b      	ldr	r3, [r7, #4]
240037c2:	2202      	movs	r2, #2
240037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
240037c8:	687b      	ldr	r3, [r7, #4]
240037ca:	681b      	ldr	r3, [r3, #0]
240037cc:	68da      	ldr	r2, [r3, #12]
240037ce:	687b      	ldr	r3, [r7, #4]
240037d0:	681b      	ldr	r3, [r3, #0]
240037d2:	f022 0201 	bic.w	r2, r2, #1
240037d6:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
240037d8:	e00f      	b.n	240037fa <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
240037da:	f7fe fcef 	bl	240021bc <HAL_GetTick>
240037de:	4602      	mov	r2, r0
240037e0:	68fb      	ldr	r3, [r7, #12]
240037e2:	1ad3      	subs	r3, r2, r3
240037e4:	2b05      	cmp	r3, #5
240037e6:	d908      	bls.n	240037fa <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
240037e8:	687b      	ldr	r3, [r7, #4]
240037ea:	2240      	movs	r2, #64	; 0x40
240037ec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
240037ee:	687b      	ldr	r3, [r7, #4]
240037f0:	2203      	movs	r2, #3
240037f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
240037f6:	2301      	movs	r3, #1
240037f8:	e01a      	b.n	24003830 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
240037fa:	687b      	ldr	r3, [r7, #4]
240037fc:	681b      	ldr	r3, [r3, #0]
240037fe:	68db      	ldr	r3, [r3, #12]
24003800:	f003 0301 	and.w	r3, r3, #1
24003804:	2b00      	cmp	r3, #0
24003806:	d1e8      	bne.n	240037da <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
24003808:	6878      	ldr	r0, [r7, #4]
2400380a:	f001 f89b 	bl	24004944 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
2400380e:	687b      	ldr	r3, [r7, #4]
24003810:	2200      	movs	r2, #0
24003812:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
24003814:	687b      	ldr	r3, [r7, #4]
24003816:	2200      	movs	r2, #0
24003818:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
2400381a:	687b      	ldr	r3, [r7, #4]
2400381c:	2200      	movs	r2, #0
2400381e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
24003820:	687b      	ldr	r3, [r7, #4]
24003822:	2200      	movs	r2, #0
24003824:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
24003826:	687b      	ldr	r3, [r7, #4]
24003828:	2201      	movs	r2, #1
2400382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
2400382e:	2300      	movs	r3, #0
}
24003830:	4618      	mov	r0, r3
24003832:	3710      	adds	r7, #16
24003834:	46bd      	mov	sp, r7
24003836:	bd80      	pop	{r7, pc}

24003838 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
24003838:	b480      	push	{r7}
2400383a:	b083      	sub	sp, #12
2400383c:	af00      	add	r7, sp, #0
2400383e:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24003840:	687b      	ldr	r3, [r7, #4]
24003842:	2b00      	cmp	r3, #0
24003844:	d101      	bne.n	2400384a <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
24003846:	2301      	movs	r3, #1
24003848:	e048      	b.n	240038dc <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
2400384a:	687b      	ldr	r3, [r7, #4]
2400384c:	681b      	ldr	r3, [r3, #0]
2400384e:	68da      	ldr	r2, [r3, #12]
24003850:	687b      	ldr	r3, [r7, #4]
24003852:	681b      	ldr	r3, [r3, #0]
24003854:	f022 0201 	bic.w	r2, r2, #1
24003858:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
2400385a:	687b      	ldr	r3, [r7, #4]
2400385c:	681b      	ldr	r3, [r3, #0]
2400385e:	2200      	movs	r2, #0
24003860:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
24003862:	687b      	ldr	r3, [r7, #4]
24003864:	681b      	ldr	r3, [r3, #0]
24003866:	2200      	movs	r2, #0
24003868:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
2400386a:	687b      	ldr	r3, [r7, #4]
2400386c:	681b      	ldr	r3, [r3, #0]
2400386e:	2200      	movs	r2, #0
24003870:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
24003872:	687b      	ldr	r3, [r7, #4]
24003874:	681b      	ldr	r3, [r3, #0]
24003876:	2200      	movs	r2, #0
24003878:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
2400387a:	687b      	ldr	r3, [r7, #4]
2400387c:	681b      	ldr	r3, [r3, #0]
2400387e:	2200      	movs	r2, #0
24003880:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
24003882:	687b      	ldr	r3, [r7, #4]
24003884:	681b      	ldr	r3, [r3, #0]
24003886:	2200      	movs	r2, #0
24003888:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
2400388a:	687b      	ldr	r3, [r7, #4]
2400388c:	681b      	ldr	r3, [r3, #0]
2400388e:	2200      	movs	r2, #0
24003890:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
24003892:	687b      	ldr	r3, [r7, #4]
24003894:	681b      	ldr	r3, [r3, #0]
24003896:	2200      	movs	r2, #0
24003898:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
2400389a:	687b      	ldr	r3, [r7, #4]
2400389c:	681b      	ldr	r3, [r3, #0]
2400389e:	2200      	movs	r2, #0
240038a0:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
240038a2:	687b      	ldr	r3, [r7, #4]
240038a4:	681b      	ldr	r3, [r3, #0]
240038a6:	2200      	movs	r2, #0
240038a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
240038aa:	687b      	ldr	r3, [r7, #4]
240038ac:	681b      	ldr	r3, [r3, #0]
240038ae:	221f      	movs	r2, #31
240038b0:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
240038b2:	687b      	ldr	r3, [r7, #4]
240038b4:	2200      	movs	r2, #0
240038b6:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
240038b8:	687b      	ldr	r3, [r7, #4]
240038ba:	2200      	movs	r2, #0
240038bc:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
240038be:	687b      	ldr	r3, [r7, #4]
240038c0:	2200      	movs	r2, #0
240038c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
240038c4:	687b      	ldr	r3, [r7, #4]
240038c6:	2200      	movs	r2, #0
240038c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
240038ca:	687b      	ldr	r3, [r7, #4]
240038cc:	2200      	movs	r2, #0
240038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
240038d2:	687b      	ldr	r3, [r7, #4]
240038d4:	2200      	movs	r2, #0
240038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
240038da:	2300      	movs	r3, #0
}
240038dc:	4618      	mov	r0, r3
240038de:	370c      	adds	r7, #12
240038e0:	46bd      	mov	sp, r7
240038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
240038e6:	4770      	bx	lr

240038e8 <HAL_MDMA_ConfigPostRequestMask>:
  * @param  MaskData:    specifies the value to be written to MaskAddress after a request is served.
  *                      MaskAddress and MaskData could be used to automatically clear a peripheral flag when the request is served.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_ConfigPostRequestMask(MDMA_HandleTypeDef *hmdma, uint32_t MaskAddress, uint32_t MaskData)
{
240038e8:	b480      	push	{r7}
240038ea:	b087      	sub	sp, #28
240038ec:	af00      	add	r7, sp, #0
240038ee:	60f8      	str	r0, [r7, #12]
240038f0:	60b9      	str	r1, [r7, #8]
240038f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
240038f4:	2300      	movs	r3, #0
240038f6:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240038f8:	68fb      	ldr	r3, [r7, #12]
240038fa:	2b00      	cmp	r3, #0
240038fc:	d101      	bne.n	24003902 <HAL_MDMA_ConfigPostRequestMask+0x1a>
  {
    return HAL_ERROR;
240038fe:	2301      	movs	r3, #1
24003900:	e03e      	b.n	24003980 <HAL_MDMA_ConfigPostRequestMask+0x98>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24003902:	68fb      	ldr	r3, [r7, #12]
24003904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24003908:	2b01      	cmp	r3, #1
2400390a:	d101      	bne.n	24003910 <HAL_MDMA_ConfigPostRequestMask+0x28>
2400390c:	2302      	movs	r3, #2
2400390e:	e037      	b.n	24003980 <HAL_MDMA_ConfigPostRequestMask+0x98>
24003910:	68fb      	ldr	r3, [r7, #12]
24003912:	2201      	movs	r2, #1
24003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24003918:	68fb      	ldr	r3, [r7, #12]
2400391a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400391e:	b2db      	uxtb	r3, r3
24003920:	2b01      	cmp	r3, #1
24003922:	d126      	bne.n	24003972 <HAL_MDMA_ConfigPostRequestMask+0x8a>
  {
    /* if HW request set Post Request MaskAddress and MaskData,  */
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
24003924:	68fb      	ldr	r3, [r7, #12]
24003926:	681b      	ldr	r3, [r3, #0]
24003928:	691b      	ldr	r3, [r3, #16]
2400392a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
2400392e:	2b00      	cmp	r3, #0
24003930:	d11c      	bne.n	2400396c <HAL_MDMA_ConfigPostRequestMask+0x84>
    {
      /* Set the HW request clear Mask and Data */
      hmdma->Instance->CMAR = MaskAddress;
24003932:	68fb      	ldr	r3, [r7, #12]
24003934:	681b      	ldr	r3, [r3, #0]
24003936:	68ba      	ldr	r2, [r7, #8]
24003938:	631a      	str	r2, [r3, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
2400393a:	68fb      	ldr	r3, [r7, #12]
2400393c:	681b      	ldr	r3, [r3, #0]
2400393e:	687a      	ldr	r2, [r7, #4]
24003940:	635a      	str	r2, [r3, #52]	; 0x34
      -If the request is done by SW : BWM could be set to 1 or 0.
      -If the request is done by a peripheral :
         If mask address not set (0) => BWM must be set to 0
         If mask address set (different than 0) => BWM could be set to 1 or 0
      */
      if(MaskAddress == 0U)
24003942:	68bb      	ldr	r3, [r7, #8]
24003944:	2b00      	cmp	r3, #0
24003946:	d108      	bne.n	2400395a <HAL_MDMA_ConfigPostRequestMask+0x72>
      {
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
24003948:	68fb      	ldr	r3, [r7, #12]
2400394a:	681b      	ldr	r3, [r3, #0]
2400394c:	691a      	ldr	r2, [r3, #16]
2400394e:	68fb      	ldr	r3, [r7, #12]
24003950:	681b      	ldr	r3, [r3, #0]
24003952:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
24003956:	611a      	str	r2, [r3, #16]
24003958:	e00d      	b.n	24003976 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
      else
      {
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
2400395a:	68fb      	ldr	r3, [r7, #12]
2400395c:	681b      	ldr	r3, [r3, #0]
2400395e:	691a      	ldr	r2, [r3, #16]
24003960:	68fb      	ldr	r3, [r7, #12]
24003962:	681b      	ldr	r3, [r3, #0]
24003964:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
24003968:	611a      	str	r2, [r3, #16]
2400396a:	e004      	b.n	24003976 <HAL_MDMA_ConfigPostRequestMask+0x8e>
      }
    }
    else
    {
      /* Return error status */
      status =  HAL_ERROR;
2400396c:	2301      	movs	r3, #1
2400396e:	75fb      	strb	r3, [r7, #23]
24003970:	e001      	b.n	24003976 <HAL_MDMA_ConfigPostRequestMask+0x8e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
24003972:	2301      	movs	r3, #1
24003974:	75fb      	strb	r3, [r7, #23]
  }
  /* Release Lock */
  __HAL_UNLOCK(hmdma);
24003976:	68fb      	ldr	r3, [r7, #12]
24003978:	2200      	movs	r2, #0
2400397a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
2400397e:	7dfb      	ldrb	r3, [r7, #23]
}
24003980:	4618      	mov	r0, r3
24003982:	371c      	adds	r7, #28
24003984:	46bd      	mov	sp, r7
24003986:	f85d 7b04 	ldr.w	r7, [sp], #4
2400398a:	4770      	bx	lr

2400398c <HAL_MDMA_RegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  * @param  pCallback:            pointer to callbacsk function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_RegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID, void (* pCallback)(MDMA_HandleTypeDef *_hmdma))
{
2400398c:	b480      	push	{r7}
2400398e:	b087      	sub	sp, #28
24003990:	af00      	add	r7, sp, #0
24003992:	60f8      	str	r0, [r7, #12]
24003994:	460b      	mov	r3, r1
24003996:	607a      	str	r2, [r7, #4]
24003998:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
2400399a:	2300      	movs	r3, #0
2400399c:	75fb      	strb	r3, [r7, #23]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400399e:	68fb      	ldr	r3, [r7, #12]
240039a0:	2b00      	cmp	r3, #0
240039a2:	d101      	bne.n	240039a8 <HAL_MDMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
240039a4:	2301      	movs	r3, #1
240039a6:	e044      	b.n	24003a32 <HAL_MDMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
240039a8:	68fb      	ldr	r3, [r7, #12]
240039aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
240039ae:	2b01      	cmp	r3, #1
240039b0:	d101      	bne.n	240039b6 <HAL_MDMA_RegisterCallback+0x2a>
240039b2:	2302      	movs	r3, #2
240039b4:	e03d      	b.n	24003a32 <HAL_MDMA_RegisterCallback+0xa6>
240039b6:	68fb      	ldr	r3, [r7, #12]
240039b8:	2201      	movs	r2, #1
240039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240039be:	68fb      	ldr	r3, [r7, #12]
240039c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240039c4:	b2db      	uxtb	r3, r3
240039c6:	2b01      	cmp	r3, #1
240039c8:	d12a      	bne.n	24003a20 <HAL_MDMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
240039ca:	7afb      	ldrb	r3, [r7, #11]
240039cc:	2b05      	cmp	r3, #5
240039ce:	d82a      	bhi.n	24003a26 <HAL_MDMA_RegisterCallback+0x9a>
240039d0:	a201      	add	r2, pc, #4	; (adr r2, 240039d8 <HAL_MDMA_RegisterCallback+0x4c>)
240039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240039d6:	bf00      	nop
240039d8:	240039f1 	.word	0x240039f1
240039dc:	240039f9 	.word	0x240039f9
240039e0:	24003a01 	.word	0x24003a01
240039e4:	24003a09 	.word	0x24003a09
240039e8:	24003a11 	.word	0x24003a11
240039ec:	24003a19 	.word	0x24003a19
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = pCallback;
240039f0:	68fb      	ldr	r3, [r7, #12]
240039f2:	687a      	ldr	r2, [r7, #4]
240039f4:	645a      	str	r2, [r3, #68]	; 0x44
      break;
240039f6:	e017      	b.n	24003a28 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = pCallback;
240039f8:	68fb      	ldr	r3, [r7, #12]
240039fa:	687a      	ldr	r2, [r7, #4]
240039fc:	649a      	str	r2, [r3, #72]	; 0x48
      break;
240039fe:	e013      	b.n	24003a28 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = pCallback;
24003a00:	68fb      	ldr	r3, [r7, #12]
24003a02:	687a      	ldr	r2, [r7, #4]
24003a04:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
24003a06:	e00f      	b.n	24003a28 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = pCallback;
24003a08:	68fb      	ldr	r3, [r7, #12]
24003a0a:	687a      	ldr	r2, [r7, #4]
24003a0c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
24003a0e:	e00b      	b.n	24003a28 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = pCallback;
24003a10:	68fb      	ldr	r3, [r7, #12]
24003a12:	687a      	ldr	r2, [r7, #4]
24003a14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
24003a16:	e007      	b.n	24003a28 <HAL_MDMA_RegisterCallback+0x9c>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = pCallback;
24003a18:	68fb      	ldr	r3, [r7, #12]
24003a1a:	687a      	ldr	r2, [r7, #4]
24003a1c:	659a      	str	r2, [r3, #88]	; 0x58
      break;
24003a1e:	e003      	b.n	24003a28 <HAL_MDMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
24003a20:	2301      	movs	r3, #1
24003a22:	75fb      	strb	r3, [r7, #23]
24003a24:	e000      	b.n	24003a28 <HAL_MDMA_RegisterCallback+0x9c>
      break;
24003a26:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
24003a28:	68fb      	ldr	r3, [r7, #12]
24003a2a:	2200      	movs	r2, #0
24003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
24003a30:	7dfb      	ldrb	r3, [r7, #23]
}
24003a32:	4618      	mov	r0, r3
24003a34:	371c      	adds	r7, #28
24003a36:	46bd      	mov	sp, r7
24003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
24003a3c:	4770      	bx	lr

24003a3e <HAL_MDMA_UnRegisterCallback>:
  * @param  CallbackID:           User Callback identifier
  *                               a HAL_MDMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_UnRegisterCallback(MDMA_HandleTypeDef *hmdma, HAL_MDMA_CallbackIDTypeDef CallbackID)
{
24003a3e:	b480      	push	{r7}
24003a40:	b085      	sub	sp, #20
24003a42:	af00      	add	r7, sp, #0
24003a44:	6078      	str	r0, [r7, #4]
24003a46:	460b      	mov	r3, r1
24003a48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
24003a4a:	2300      	movs	r3, #0
24003a4c:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24003a4e:	687b      	ldr	r3, [r7, #4]
24003a50:	2b00      	cmp	r3, #0
24003a52:	d101      	bne.n	24003a58 <HAL_MDMA_UnRegisterCallback+0x1a>
  {
    return HAL_ERROR;
24003a54:	2301      	movs	r3, #1
24003a56:	e05b      	b.n	24003b10 <HAL_MDMA_UnRegisterCallback+0xd2>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24003a58:	687b      	ldr	r3, [r7, #4]
24003a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24003a5e:	2b01      	cmp	r3, #1
24003a60:	d101      	bne.n	24003a66 <HAL_MDMA_UnRegisterCallback+0x28>
24003a62:	2302      	movs	r3, #2
24003a64:	e054      	b.n	24003b10 <HAL_MDMA_UnRegisterCallback+0xd2>
24003a66:	687b      	ldr	r3, [r7, #4]
24003a68:	2201      	movs	r2, #1
24003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24003a6e:	687b      	ldr	r3, [r7, #4]
24003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24003a74:	b2db      	uxtb	r3, r3
24003a76:	2b01      	cmp	r3, #1
24003a78:	d143      	bne.n	24003b02 <HAL_MDMA_UnRegisterCallback+0xc4>
  {
    switch (CallbackID)
24003a7a:	78fb      	ldrb	r3, [r7, #3]
24003a7c:	2b06      	cmp	r3, #6
24003a7e:	d83c      	bhi.n	24003afa <HAL_MDMA_UnRegisterCallback+0xbc>
24003a80:	a201      	add	r2, pc, #4	; (adr r2, 24003a88 <HAL_MDMA_UnRegisterCallback+0x4a>)
24003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24003a86:	bf00      	nop
24003a88:	24003aa5 	.word	0x24003aa5
24003a8c:	24003aad 	.word	0x24003aad
24003a90:	24003ab5 	.word	0x24003ab5
24003a94:	24003abd 	.word	0x24003abd
24003a98:	24003ac5 	.word	0x24003ac5
24003a9c:	24003acd 	.word	0x24003acd
24003aa0:	24003ad5 	.word	0x24003ad5
    {
    case  HAL_MDMA_XFER_CPLT_CB_ID:
      hmdma->XferCpltCallback = NULL;
24003aa4:	687b      	ldr	r3, [r7, #4]
24003aa6:	2200      	movs	r2, #0
24003aa8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
24003aaa:	e02c      	b.n	24003b06 <HAL_MDMA_UnRegisterCallback+0xc8>

    case  HAL_MDMA_XFER_BUFFERCPLT_CB_ID:
      hmdma->XferBufferCpltCallback = NULL;
24003aac:	687b      	ldr	r3, [r7, #4]
24003aae:	2200      	movs	r2, #0
24003ab0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
24003ab2:	e028      	b.n	24003b06 <HAL_MDMA_UnRegisterCallback+0xc8>

    case  HAL_MDMA_XFER_BLOCKCPLT_CB_ID:
      hmdma->XferBlockCpltCallback = NULL;
24003ab4:	687b      	ldr	r3, [r7, #4]
24003ab6:	2200      	movs	r2, #0
24003ab8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
24003aba:	e024      	b.n	24003b06 <HAL_MDMA_UnRegisterCallback+0xc8>

    case  HAL_MDMA_XFER_REPBLOCKCPLT_CB_ID:
      hmdma->XferRepeatBlockCpltCallback = NULL;
24003abc:	687b      	ldr	r3, [r7, #4]
24003abe:	2200      	movs	r2, #0
24003ac0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
24003ac2:	e020      	b.n	24003b06 <HAL_MDMA_UnRegisterCallback+0xc8>

    case  HAL_MDMA_XFER_ERROR_CB_ID:
      hmdma->XferErrorCallback = NULL;
24003ac4:	687b      	ldr	r3, [r7, #4]
24003ac6:	2200      	movs	r2, #0
24003ac8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
24003aca:	e01c      	b.n	24003b06 <HAL_MDMA_UnRegisterCallback+0xc8>

    case  HAL_MDMA_XFER_ABORT_CB_ID:
      hmdma->XferAbortCallback = NULL;
24003acc:	687b      	ldr	r3, [r7, #4]
24003ace:	2200      	movs	r2, #0
24003ad0:	659a      	str	r2, [r3, #88]	; 0x58
      break;
24003ad2:	e018      	b.n	24003b06 <HAL_MDMA_UnRegisterCallback+0xc8>

    case   HAL_MDMA_XFER_ALL_CB_ID:
      hmdma->XferCpltCallback = NULL;
24003ad4:	687b      	ldr	r3, [r7, #4]
24003ad6:	2200      	movs	r2, #0
24003ad8:	645a      	str	r2, [r3, #68]	; 0x44
      hmdma->XferBufferCpltCallback = NULL;
24003ada:	687b      	ldr	r3, [r7, #4]
24003adc:	2200      	movs	r2, #0
24003ade:	649a      	str	r2, [r3, #72]	; 0x48
      hmdma->XferBlockCpltCallback = NULL;
24003ae0:	687b      	ldr	r3, [r7, #4]
24003ae2:	2200      	movs	r2, #0
24003ae4:	64da      	str	r2, [r3, #76]	; 0x4c
      hmdma->XferRepeatBlockCpltCallback = NULL;
24003ae6:	687b      	ldr	r3, [r7, #4]
24003ae8:	2200      	movs	r2, #0
24003aea:	651a      	str	r2, [r3, #80]	; 0x50
      hmdma->XferErrorCallback = NULL;
24003aec:	687b      	ldr	r3, [r7, #4]
24003aee:	2200      	movs	r2, #0
24003af0:	655a      	str	r2, [r3, #84]	; 0x54
      hmdma->XferAbortCallback = NULL;
24003af2:	687b      	ldr	r3, [r7, #4]
24003af4:	2200      	movs	r2, #0
24003af6:	659a      	str	r2, [r3, #88]	; 0x58
      break;
24003af8:	e005      	b.n	24003b06 <HAL_MDMA_UnRegisterCallback+0xc8>

    default:
      status = HAL_ERROR;
24003afa:	2301      	movs	r3, #1
24003afc:	73fb      	strb	r3, [r7, #15]
      break;
24003afe:	bf00      	nop
24003b00:	e001      	b.n	24003b06 <HAL_MDMA_UnRegisterCallback+0xc8>
    }
  }
  else
  {
    status = HAL_ERROR;
24003b02:	2301      	movs	r3, #1
24003b04:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
24003b06:	687b      	ldr	r3, [r7, #4]
24003b08:	2200      	movs	r2, #0
24003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
24003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
24003b10:	4618      	mov	r0, r3
24003b12:	3714      	adds	r7, #20
24003b14:	46bd      	mov	sp, r7
24003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
24003b1a:	4770      	bx	lr

24003b1c <HAL_MDMA_LinkedList_CreateNode>:
  * @param  pNodeConfig: Pointer to a MDMA_LinkNodeConfTypeDef structure that contains
  *               the configuration information for the specified MDMA Linked List Node.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_CreateNode(MDMA_LinkNodeTypeDef *pNode, MDMA_LinkNodeConfTypeDef *pNodeConfig)
{
24003b1c:	b480      	push	{r7}
24003b1e:	b085      	sub	sp, #20
24003b20:	af00      	add	r7, sp, #0
24003b22:	6078      	str	r0, [r7, #4]
24003b24:	6039      	str	r1, [r7, #0]
  uint32_t addressMask;
  uint32_t blockoffset;

  /* Check the MDMA peripheral state */
  if((pNode == NULL) || (pNodeConfig == NULL))
24003b26:	687b      	ldr	r3, [r7, #4]
24003b28:	2b00      	cmp	r3, #0
24003b2a:	d002      	beq.n	24003b32 <HAL_MDMA_LinkedList_CreateNode+0x16>
24003b2c:	683b      	ldr	r3, [r7, #0]
24003b2e:	2b00      	cmp	r3, #0
24003b30:	d101      	bne.n	24003b36 <HAL_MDMA_LinkedList_CreateNode+0x1a>
  {
    return HAL_ERROR;
24003b32:	2301      	movs	r3, #1
24003b34:	e0c8      	b.n	24003cc8 <HAL_MDMA_LinkedList_CreateNode+0x1ac>
  assert_param(IS_MDMA_TRANSFER_LENGTH(pNodeConfig->BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(pNodeConfig->BlockCount));


  /* Configure next Link node Address Register to zero */
  pNode->CLAR =  0;
24003b36:	687b      	ldr	r3, [r7, #4]
24003b38:	2200      	movs	r2, #0
24003b3a:	615a      	str	r2, [r3, #20]

  /* Configure the Link Node registers*/
  pNode->CTBR   = 0;
24003b3c:	687b      	ldr	r3, [r7, #4]
24003b3e:	2200      	movs	r2, #0
24003b40:	619a      	str	r2, [r3, #24]
  pNode->CMAR   = 0;
24003b42:	687b      	ldr	r3, [r7, #4]
24003b44:	2200      	movs	r2, #0
24003b46:	621a      	str	r2, [r3, #32]
  pNode->CMDR   = 0;
24003b48:	687b      	ldr	r3, [r7, #4]
24003b4a:	2200      	movs	r2, #0
24003b4c:	625a      	str	r2, [r3, #36]	; 0x24
  pNode->Reserved = 0;
24003b4e:	687b      	ldr	r3, [r7, #4]
24003b50:	2200      	movs	r2, #0
24003b52:	61da      	str	r2, [r3, #28]

  /* Write new CTCR Register value */
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
24003b54:	683b      	ldr	r3, [r7, #0]
24003b56:	691a      	ldr	r2, [r3, #16]
24003b58:	683b      	ldr	r3, [r7, #0]
24003b5a:	695b      	ldr	r3, [r3, #20]
24003b5c:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
24003b5e:	683b      	ldr	r3, [r7, #0]
24003b60:	699b      	ldr	r3, [r3, #24]
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
24003b62:	431a      	orrs	r2, r3
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
24003b64:	683b      	ldr	r3, [r7, #0]
24003b66:	69db      	ldr	r3, [r3, #28]
24003b68:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
24003b6a:	683b      	ldr	r3, [r7, #0]
24003b6c:	6a1b      	ldr	r3, [r3, #32]
    pNodeConfig->Init.SourceDataSize | pNodeConfig->Init.DestDataSize           | \
24003b6e:	431a      	orrs	r2, r3
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
24003b70:	683b      	ldr	r3, [r7, #0]
24003b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24003b74:	431a      	orrs	r2, r3
        pNodeConfig->Init.DestBurst                                             | \
24003b76:	683b      	ldr	r3, [r7, #0]
24003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      pNodeConfig->Init.DataAlignment| pNodeConfig->Init.SourceBurst            | \
24003b7a:	431a      	orrs	r2, r3
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24003b7c:	683b      	ldr	r3, [r7, #0]
24003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24003b80:	3b01      	subs	r3, #1
24003b82:	049b      	lsls	r3, r3, #18
        pNodeConfig->Init.DestBurst                                             | \
24003b84:	431a      	orrs	r2, r3
            pNodeConfig->Init.TransferTriggerMode;
24003b86:	683b      	ldr	r3, [r7, #0]
24003b88:	685b      	ldr	r3, [r3, #4]
          ((pNodeConfig->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24003b8a:	431a      	orrs	r2, r3
  pNode->CTCR =  pNodeConfig->Init.SourceInc | pNodeConfig->Init.DestinationInc | \
24003b8c:	687b      	ldr	r3, [r7, #4]
24003b8e:	601a      	str	r2, [r3, #0]

  /* If SW request set the CTCR register to SW Request Mode*/
  if(pNodeConfig->Init.Request == MDMA_REQUEST_SW)
24003b90:	683b      	ldr	r3, [r7, #0]
24003b92:	681b      	ldr	r3, [r3, #0]
24003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24003b98:	d105      	bne.n	24003ba6 <HAL_MDMA_LinkedList_CreateNode+0x8a>
  {
    pNode->CTCR |= MDMA_CTCR_SWRM;
24003b9a:	687b      	ldr	r3, [r7, #4]
24003b9c:	681b      	ldr	r3, [r3, #0]
24003b9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
24003ba2:	687b      	ldr	r3, [r7, #4]
24003ba4:	601a      	str	r2, [r3, #0]
  -If the request is done by SW : BWM could be set to 1 or 0.
  -If the request is done by a peripheral :
     If mask address not set (0) => BWM must be set to 0
     If mask address set (different than 0) => BWM could be set to 1 or 0
  */
  if((pNodeConfig->Init.Request == MDMA_REQUEST_SW) || (pNodeConfig->PostRequestMaskAddress != 0U))
24003ba6:	683b      	ldr	r3, [r7, #0]
24003ba8:	681b      	ldr	r3, [r3, #0]
24003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24003bae:	d003      	beq.n	24003bb8 <HAL_MDMA_LinkedList_CreateNode+0x9c>
24003bb0:	683b      	ldr	r3, [r7, #0]
24003bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24003bb4:	2b00      	cmp	r3, #0
24003bb6:	d005      	beq.n	24003bc4 <HAL_MDMA_LinkedList_CreateNode+0xa8>
  {
    pNode->CTCR |=  MDMA_CTCR_BWM;
24003bb8:	687b      	ldr	r3, [r7, #4]
24003bba:	681b      	ldr	r3, [r3, #0]
24003bbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
24003bc0:	687b      	ldr	r3, [r7, #4]
24003bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the new CBNDTR Register value */
  pNode->CBNDTR = ((pNodeConfig->BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC;
24003bc4:	683b      	ldr	r3, [r7, #0]
24003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24003bc8:	3b01      	subs	r3, #1
24003bca:	051a      	lsls	r2, r3, #20
24003bcc:	687b      	ldr	r3, [r7, #4]
24003bce:	605a      	str	r2, [r3, #4]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(pNodeConfig->Init.SourceBlockAddressOffset < 0)
24003bd0:	683b      	ldr	r3, [r7, #0]
24003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24003bd4:	2b00      	cmp	r3, #0
24003bd6:	da0e      	bge.n	24003bf6 <HAL_MDMA_LinkedList_CreateNode+0xda>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRSUM;
24003bd8:	687b      	ldr	r3, [r7, #4]
24003bda:	685b      	ldr	r3, [r3, #4]
24003bdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
24003be0:	687b      	ldr	r3, [r7, #4]
24003be2:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.SourceBlockAddressOffset);
24003be4:	683b      	ldr	r3, [r7, #0]
24003be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24003be8:	425b      	negs	r3, r3
24003bea:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR = blockoffset & 0x0000FFFFU;
24003bec:	68fb      	ldr	r3, [r7, #12]
24003bee:	b29a      	uxth	r2, r3
24003bf0:	687b      	ldr	r3, [r7, #4]
24003bf2:	611a      	str	r2, [r3, #16]
24003bf4:	e004      	b.n	24003c00 <HAL_MDMA_LinkedList_CreateNode+0xe4>
  }
  else
  {
    /*write new CBRUR Register value : source repeat block offset */
    pNode->CBRUR = (((uint32_t) pNodeConfig->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
24003bf6:	683b      	ldr	r3, [r7, #0]
24003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24003bfa:	b29a      	uxth	r2, r3
24003bfc:	687b      	ldr	r3, [r7, #4]
24003bfe:	611a      	str	r2, [r3, #16]
  }

  /* if block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(pNodeConfig->Init.DestBlockAddressOffset < 0)
24003c00:	683b      	ldr	r3, [r7, #0]
24003c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24003c04:	2b00      	cmp	r3, #0
24003c06:	da11      	bge.n	24003c2c <HAL_MDMA_LinkedList_CreateNode+0x110>
  {
    pNode->CBNDTR |= MDMA_CBNDTR_BRDUM;
24003c08:	687b      	ldr	r3, [r7, #4]
24003c0a:	685b      	ldr	r3, [r3, #4]
24003c0c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
24003c10:	687b      	ldr	r3, [r7, #4]
24003c12:	605a      	str	r2, [r3, #4]
    /*write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- pNodeConfig->Init.DestBlockAddressOffset);
24003c14:	683b      	ldr	r3, [r7, #0]
24003c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24003c18:	425b      	negs	r3, r3
24003c1a:	60fb      	str	r3, [r7, #12]
    pNode->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24003c1c:	687b      	ldr	r3, [r7, #4]
24003c1e:	691a      	ldr	r2, [r3, #16]
24003c20:	68fb      	ldr	r3, [r7, #12]
24003c22:	041b      	lsls	r3, r3, #16
24003c24:	431a      	orrs	r2, r3
24003c26:	687b      	ldr	r3, [r7, #4]
24003c28:	611a      	str	r2, [r3, #16]
24003c2a:	e007      	b.n	24003c3c <HAL_MDMA_LinkedList_CreateNode+0x120>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    pNode->CBRUR |= ((((uint32_t)pNodeConfig->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24003c2c:	687b      	ldr	r3, [r7, #4]
24003c2e:	691a      	ldr	r2, [r3, #16]
24003c30:	683b      	ldr	r3, [r7, #0]
24003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24003c34:	041b      	lsls	r3, r3, #16
24003c36:	431a      	orrs	r2, r3
24003c38:	687b      	ldr	r3, [r7, #4]
24003c3a:	611a      	str	r2, [r3, #16]
  }

  /* Configure MDMA Link Node data length */
  pNode->CBNDTR |=  pNodeConfig->BlockDataLength;
24003c3c:	687b      	ldr	r3, [r7, #4]
24003c3e:	685a      	ldr	r2, [r3, #4]
24003c40:	683b      	ldr	r3, [r7, #0]
24003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24003c44:	431a      	orrs	r2, r3
24003c46:	687b      	ldr	r3, [r7, #4]
24003c48:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Link Node destination address */
  pNode->CDAR = pNodeConfig->DstAddress;
24003c4a:	683b      	ldr	r3, [r7, #0]
24003c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
24003c4e:	687b      	ldr	r3, [r7, #4]
24003c50:	60da      	str	r2, [r3, #12]

  /* Configure MDMA Link Node Source address */
  pNode->CSAR = pNodeConfig->SrcAddress;
24003c52:	683b      	ldr	r3, [r7, #0]
24003c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
24003c56:	687b      	ldr	r3, [r7, #4]
24003c58:	609a      	str	r2, [r3, #8]

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData,  */
  if(pNodeConfig->Init.Request != MDMA_REQUEST_SW)
24003c5a:	683b      	ldr	r3, [r7, #0]
24003c5c:	681b      	ldr	r3, [r3, #0]
24003c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24003c62:	d00c      	beq.n	24003c7e <HAL_MDMA_LinkedList_CreateNode+0x162>
  {
    /* Set the HW request in CTBR register  */
    pNode->CTBR = pNodeConfig->Init.Request & MDMA_CTBR_TSEL;
24003c64:	683b      	ldr	r3, [r7, #0]
24003c66:	681b      	ldr	r3, [r3, #0]
24003c68:	b2da      	uxtb	r2, r3
24003c6a:	687b      	ldr	r3, [r7, #4]
24003c6c:	619a      	str	r2, [r3, #24]
    /* Set the HW request clear Mask and Data */
    pNode->CMAR = pNodeConfig->PostRequestMaskAddress;
24003c6e:	683b      	ldr	r3, [r7, #0]
24003c70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
24003c72:	687b      	ldr	r3, [r7, #4]
24003c74:	621a      	str	r2, [r3, #32]
    pNode->CMDR = pNodeConfig->PostRequestMaskData;
24003c76:	683b      	ldr	r3, [r7, #0]
24003c78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
24003c7a:	687b      	ldr	r3, [r7, #4]
24003c7c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  addressMask = pNodeConfig->SrcAddress & 0xFF000000U;
24003c7e:	683b      	ldr	r3, [r7, #0]
24003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24003c82:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
24003c86:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24003c88:	68bb      	ldr	r3, [r7, #8]
24003c8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003c8e:	d002      	beq.n	24003c96 <HAL_MDMA_LinkedList_CreateNode+0x17a>
24003c90:	68bb      	ldr	r3, [r7, #8]
24003c92:	2b00      	cmp	r3, #0
24003c94:	d105      	bne.n	24003ca2 <HAL_MDMA_LinkedList_CreateNode+0x186>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_SBUS;
24003c96:	687b      	ldr	r3, [r7, #4]
24003c98:	699b      	ldr	r3, [r3, #24]
24003c9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
24003c9e:	687b      	ldr	r3, [r7, #4]
24003ca0:	619a      	str	r2, [r3, #24]
  }

  addressMask = pNodeConfig->DstAddress & 0xFF000000U;
24003ca2:	683b      	ldr	r3, [r7, #0]
24003ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24003ca6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
24003caa:	60bb      	str	r3, [r7, #8]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
24003cac:	68bb      	ldr	r3, [r7, #8]
24003cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24003cb2:	d002      	beq.n	24003cba <HAL_MDMA_LinkedList_CreateNode+0x19e>
24003cb4:	68bb      	ldr	r3, [r7, #8]
24003cb6:	2b00      	cmp	r3, #0
24003cb8:	d105      	bne.n	24003cc6 <HAL_MDMA_LinkedList_CreateNode+0x1aa>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    pNode->CTBR |= MDMA_CTBR_DBUS;
24003cba:	687b      	ldr	r3, [r7, #4]
24003cbc:	699b      	ldr	r3, [r3, #24]
24003cbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
24003cc2:	687b      	ldr	r3, [r7, #4]
24003cc4:	619a      	str	r2, [r3, #24]
  }

  return HAL_OK;
24003cc6:	2300      	movs	r3, #0
}
24003cc8:	4618      	mov	r0, r3
24003cca:	3714      	adds	r7, #20
24003ccc:	46bd      	mov	sp, r7
24003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
24003cd2:	4770      	bx	lr

24003cd4 <HAL_MDMA_LinkedList_AddNode>:
  *                    at the end of the list
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_AddNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNewNode, MDMA_LinkNodeTypeDef *pPrevNode)
{
24003cd4:	b480      	push	{r7}
24003cd6:	b089      	sub	sp, #36	; 0x24
24003cd8:	af00      	add	r7, sp, #0
24003cda:	60f8      	str	r0, [r7, #12]
24003cdc:	60b9      	str	r1, [r7, #8]
24003cde:	607a      	str	r2, [r7, #4]
  MDMA_LinkNodeTypeDef *pNode;
  uint32_t counter = 0, nodeInserted = 0;
24003ce0:	2300      	movs	r3, #0
24003ce2:	61bb      	str	r3, [r7, #24]
24003ce4:	2300      	movs	r3, #0
24003ce6:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef hal_status = HAL_OK;
24003ce8:	2300      	movs	r3, #0
24003cea:	74fb      	strb	r3, [r7, #19]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNewNode == NULL))
24003cec:	68fb      	ldr	r3, [r7, #12]
24003cee:	2b00      	cmp	r3, #0
24003cf0:	d002      	beq.n	24003cf8 <HAL_MDMA_LinkedList_AddNode+0x24>
24003cf2:	68bb      	ldr	r3, [r7, #8]
24003cf4:	2b00      	cmp	r3, #0
24003cf6:	d101      	bne.n	24003cfc <HAL_MDMA_LinkedList_AddNode+0x28>
  {
    return HAL_ERROR;
24003cf8:	2301      	movs	r3, #1
24003cfa:	e0a9      	b.n	24003e50 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24003cfc:	68fb      	ldr	r3, [r7, #12]
24003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24003d02:	2b01      	cmp	r3, #1
24003d04:	d101      	bne.n	24003d0a <HAL_MDMA_LinkedList_AddNode+0x36>
24003d06:	2302      	movs	r3, #2
24003d08:	e0a2      	b.n	24003e50 <HAL_MDMA_LinkedList_AddNode+0x17c>
24003d0a:	68fb      	ldr	r3, [r7, #12]
24003d0c:	2201      	movs	r2, #1
24003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24003d12:	68fb      	ldr	r3, [r7, #12]
24003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24003d18:	b2db      	uxtb	r3, r3
24003d1a:	2b01      	cmp	r3, #1
24003d1c:	f040 8093 	bne.w	24003e46 <HAL_MDMA_LinkedList_AddNode+0x172>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24003d20:	68fb      	ldr	r3, [r7, #12]
24003d22:	2202      	movs	r2, #2
24003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if this is the first node (after the Inititlization node) */
    if((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U)
24003d28:	68fb      	ldr	r3, [r7, #12]
24003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003d2c:	2b00      	cmp	r3, #0
24003d2e:	d116      	bne.n	24003d5e <HAL_MDMA_LinkedList_AddNode+0x8a>
    {
      if(pPrevNode == NULL)
24003d30:	687b      	ldr	r3, [r7, #4]
24003d32:	2b00      	cmp	r3, #0
24003d34:	d110      	bne.n	24003d58 <HAL_MDMA_LinkedList_AddNode+0x84>
      {
        /* if this is the first node after the initialization
        connect this node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = (uint32_t)pNewNode;
24003d36:	68fb      	ldr	r3, [r7, #12]
24003d38:	681b      	ldr	r3, [r3, #0]
24003d3a:	68ba      	ldr	r2, [r7, #8]
24003d3c:	625a      	str	r2, [r3, #36]	; 0x24
        /* Set the MDMA handle First linked List node*/
        hmdma->FirstLinkedListNodeAddress = pNewNode;
24003d3e:	68fb      	ldr	r3, [r7, #12]
24003d40:	68ba      	ldr	r2, [r7, #8]
24003d42:	65da      	str	r2, [r3, #92]	; 0x5c

        /*reset New node link */
        pNewNode->CLAR = 0;
24003d44:	68bb      	ldr	r3, [r7, #8]
24003d46:	2200      	movs	r2, #0
24003d48:	615a      	str	r2, [r3, #20]

        /* Update the Handle last node address */
        hmdma->LastLinkedListNodeAddress = pNewNode;
24003d4a:	68fb      	ldr	r3, [r7, #12]
24003d4c:	68ba      	ldr	r2, [r7, #8]
24003d4e:	661a      	str	r2, [r3, #96]	; 0x60

        hmdma->LinkedListNodeCounter = 1;
24003d50:	68fb      	ldr	r3, [r7, #12]
24003d52:	2201      	movs	r2, #1
24003d54:	665a      	str	r2, [r3, #100]	; 0x64
24003d56:	e06c      	b.n	24003e32 <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
      else
      {
        hal_status = HAL_ERROR;
24003d58:	2301      	movs	r3, #1
24003d5a:	74fb      	strb	r3, [r7, #19]
24003d5c:	e069      	b.n	24003e32 <HAL_MDMA_LinkedList_AddNode+0x15e>
      }
    }
    else if(hmdma->FirstLinkedListNodeAddress != pNewNode)
24003d5e:	68fb      	ldr	r3, [r7, #12]
24003d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003d62:	68ba      	ldr	r2, [r7, #8]
24003d64:	429a      	cmp	r2, r3
24003d66:	d062      	beq.n	24003e2e <HAL_MDMA_LinkedList_AddNode+0x15a>
    {
      /* Check if the node to insert already exists*/
      pNode = hmdma->FirstLinkedListNodeAddress;
24003d68:	68fb      	ldr	r3, [r7, #12]
24003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003d6c:	61fb      	str	r3, [r7, #28]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
24003d6e:	e00c      	b.n	24003d8a <HAL_MDMA_LinkedList_AddNode+0xb6>
      {
        if(pNode->CLAR == (uint32_t)pNewNode)
24003d70:	69fb      	ldr	r3, [r7, #28]
24003d72:	695a      	ldr	r2, [r3, #20]
24003d74:	68bb      	ldr	r3, [r7, #8]
24003d76:	429a      	cmp	r2, r3
24003d78:	d101      	bne.n	24003d7e <HAL_MDMA_LinkedList_AddNode+0xaa>
        {
          hal_status = HAL_ERROR; /* error this node already exist in the linked list and it is not first node */
24003d7a:	2301      	movs	r3, #1
24003d7c:	74fb      	strb	r3, [r7, #19]
        }
        pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
24003d7e:	69fb      	ldr	r3, [r7, #28]
24003d80:	695b      	ldr	r3, [r3, #20]
24003d82:	61fb      	str	r3, [r7, #28]
        counter++;
24003d84:	69bb      	ldr	r3, [r7, #24]
24003d86:	3301      	adds	r3, #1
24003d88:	61bb      	str	r3, [r7, #24]
      while((counter < hmdma->LinkedListNodeCounter) && (hal_status == HAL_OK))
24003d8a:	68fb      	ldr	r3, [r7, #12]
24003d8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003d8e:	69ba      	ldr	r2, [r7, #24]
24003d90:	429a      	cmp	r2, r3
24003d92:	d202      	bcs.n	24003d9a <HAL_MDMA_LinkedList_AddNode+0xc6>
24003d94:	7cfb      	ldrb	r3, [r7, #19]
24003d96:	2b00      	cmp	r3, #0
24003d98:	d0ea      	beq.n	24003d70 <HAL_MDMA_LinkedList_AddNode+0x9c>
      }

      if(hal_status == HAL_OK)
24003d9a:	7cfb      	ldrb	r3, [r7, #19]
24003d9c:	2b00      	cmp	r3, #0
24003d9e:	d148      	bne.n	24003e32 <HAL_MDMA_LinkedList_AddNode+0x15e>
      {
        /* Check if the previous node is the last one in the current list or zero */
        if((pPrevNode == hmdma->LastLinkedListNodeAddress) || (pPrevNode == NULL))
24003da0:	68fb      	ldr	r3, [r7, #12]
24003da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003da4:	687a      	ldr	r2, [r7, #4]
24003da6:	429a      	cmp	r2, r3
24003da8:	d002      	beq.n	24003db0 <HAL_MDMA_LinkedList_AddNode+0xdc>
24003daa:	687b      	ldr	r3, [r7, #4]
24003dac:	2b00      	cmp	r3, #0
24003dae:	d111      	bne.n	24003dd4 <HAL_MDMA_LinkedList_AddNode+0x100>
        {
          /* insert the new node at the end of the list */
          pNewNode->CLAR = hmdma->LastLinkedListNodeAddress->CLAR;
24003db0:	68fb      	ldr	r3, [r7, #12]
24003db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003db4:	695a      	ldr	r2, [r3, #20]
24003db6:	68bb      	ldr	r3, [r7, #8]
24003db8:	615a      	str	r2, [r3, #20]
          hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)pNewNode;
24003dba:	68fb      	ldr	r3, [r7, #12]
24003dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003dbe:	68ba      	ldr	r2, [r7, #8]
24003dc0:	615a      	str	r2, [r3, #20]
          /* Update the Handle last node address */
          hmdma->LastLinkedListNodeAddress = pNewNode;
24003dc2:	68fb      	ldr	r3, [r7, #12]
24003dc4:	68ba      	ldr	r2, [r7, #8]
24003dc6:	661a      	str	r2, [r3, #96]	; 0x60
          /* Increment the linked list node counter */
          hmdma->LinkedListNodeCounter++;
24003dc8:	68fb      	ldr	r3, [r7, #12]
24003dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003dcc:	1c5a      	adds	r2, r3, #1
24003dce:	68fb      	ldr	r3, [r7, #12]
24003dd0:	665a      	str	r2, [r3, #100]	; 0x64
24003dd2:	e02e      	b.n	24003e32 <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
        else
        {
          /*insert the new node after the pPreviousNode node */
          pNode = hmdma->FirstLinkedListNodeAddress;
24003dd4:	68fb      	ldr	r3, [r7, #12]
24003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003dd8:	61fb      	str	r3, [r7, #28]
          counter = 0;
24003dda:	2300      	movs	r3, #0
24003ddc:	61bb      	str	r3, [r7, #24]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
24003dde:	e018      	b.n	24003e12 <HAL_MDMA_LinkedList_AddNode+0x13e>
          {
            counter++;
24003de0:	69bb      	ldr	r3, [r7, #24]
24003de2:	3301      	adds	r3, #1
24003de4:	61bb      	str	r3, [r7, #24]
            if(pNode == pPrevNode)
24003de6:	69fa      	ldr	r2, [r7, #28]
24003de8:	687b      	ldr	r3, [r7, #4]
24003dea:	429a      	cmp	r2, r3
24003dec:	d10e      	bne.n	24003e0c <HAL_MDMA_LinkedList_AddNode+0x138>
            {
              /*Insert the new node after the previous one */
              pNewNode->CLAR = pNode->CLAR;
24003dee:	69fb      	ldr	r3, [r7, #28]
24003df0:	695a      	ldr	r2, [r3, #20]
24003df2:	68bb      	ldr	r3, [r7, #8]
24003df4:	615a      	str	r2, [r3, #20]
              pNode->CLAR = (uint32_t)pNewNode;
24003df6:	68ba      	ldr	r2, [r7, #8]
24003df8:	69fb      	ldr	r3, [r7, #28]
24003dfa:	615a      	str	r2, [r3, #20]
              /* Increment the linked list node counter */
              hmdma->LinkedListNodeCounter++;
24003dfc:	68fb      	ldr	r3, [r7, #12]
24003dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003e00:	1c5a      	adds	r2, r3, #1
24003e02:	68fb      	ldr	r3, [r7, #12]
24003e04:	665a      	str	r2, [r3, #100]	; 0x64
              nodeInserted = 1;
24003e06:	2301      	movs	r3, #1
24003e08:	617b      	str	r3, [r7, #20]
24003e0a:	e002      	b.n	24003e12 <HAL_MDMA_LinkedList_AddNode+0x13e>
            }
            else
            {
              pNode = (MDMA_LinkNodeTypeDef *)pNode->CLAR;
24003e0c:	69fb      	ldr	r3, [r7, #28]
24003e0e:	695b      	ldr	r3, [r3, #20]
24003e10:	61fb      	str	r3, [r7, #28]
          while((counter < hmdma->LinkedListNodeCounter) && (nodeInserted == 0U))
24003e12:	68fb      	ldr	r3, [r7, #12]
24003e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003e16:	69ba      	ldr	r2, [r7, #24]
24003e18:	429a      	cmp	r2, r3
24003e1a:	d202      	bcs.n	24003e22 <HAL_MDMA_LinkedList_AddNode+0x14e>
24003e1c:	697b      	ldr	r3, [r7, #20]
24003e1e:	2b00      	cmp	r3, #0
24003e20:	d0de      	beq.n	24003de0 <HAL_MDMA_LinkedList_AddNode+0x10c>
            }
          }

          if(nodeInserted == 0U)
24003e22:	697b      	ldr	r3, [r7, #20]
24003e24:	2b00      	cmp	r3, #0
24003e26:	d104      	bne.n	24003e32 <HAL_MDMA_LinkedList_AddNode+0x15e>
          {
            hal_status = HAL_ERROR;
24003e28:	2301      	movs	r3, #1
24003e2a:	74fb      	strb	r3, [r7, #19]
24003e2c:	e001      	b.n	24003e32 <HAL_MDMA_LinkedList_AddNode+0x15e>
        }
      }
    }
    else
    {
      hal_status = HAL_ERROR;
24003e2e:	2301      	movs	r3, #1
24003e30:	74fb      	strb	r3, [r7, #19]
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24003e32:	68fb      	ldr	r3, [r7, #12]
24003e34:	2200      	movs	r2, #0
24003e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
24003e3a:	68fb      	ldr	r3, [r7, #12]
24003e3c:	2201      	movs	r2, #1
24003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return hal_status;
24003e42:	7cfb      	ldrb	r3, [r7, #19]
24003e44:	e004      	b.n	24003e50 <HAL_MDMA_LinkedList_AddNode+0x17c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24003e46:	68fb      	ldr	r3, [r7, #12]
24003e48:	2200      	movs	r2, #0
24003e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
24003e4e:	2302      	movs	r3, #2
  }
}
24003e50:	4618      	mov	r0, r3
24003e52:	3724      	adds	r7, #36	; 0x24
24003e54:	46bd      	mov	sp, r7
24003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
24003e5a:	4770      	bx	lr

24003e5c <HAL_MDMA_LinkedList_RemoveNode>:
  *                 to be removed from the list.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_RemoveNode(MDMA_HandleTypeDef *hmdma, MDMA_LinkNodeTypeDef *pNode)
{
24003e5c:	b480      	push	{r7}
24003e5e:	b087      	sub	sp, #28
24003e60:	af00      	add	r7, sp, #0
24003e62:	6078      	str	r0, [r7, #4]
24003e64:	6039      	str	r1, [r7, #0]
  MDMA_LinkNodeTypeDef *ptmpNode;
  uint32_t counter = 0, nodeDeleted = 0;
24003e66:	2300      	movs	r3, #0
24003e68:	613b      	str	r3, [r7, #16]
24003e6a:	2300      	movs	r3, #0
24003e6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef hal_status = HAL_OK;
24003e6e:	2300      	movs	r3, #0
24003e70:	72fb      	strb	r3, [r7, #11]

  /* Check the MDMA peripheral handle */
  if((hmdma == NULL) || (pNode == NULL))
24003e72:	687b      	ldr	r3, [r7, #4]
24003e74:	2b00      	cmp	r3, #0
24003e76:	d002      	beq.n	24003e7e <HAL_MDMA_LinkedList_RemoveNode+0x22>
24003e78:	683b      	ldr	r3, [r7, #0]
24003e7a:	2b00      	cmp	r3, #0
24003e7c:	d101      	bne.n	24003e82 <HAL_MDMA_LinkedList_RemoveNode+0x26>
  {
    return HAL_ERROR;
24003e7e:	2301      	movs	r3, #1
24003e80:	e099      	b.n	24003fb6 <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24003e82:	687b      	ldr	r3, [r7, #4]
24003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24003e88:	2b01      	cmp	r3, #1
24003e8a:	d101      	bne.n	24003e90 <HAL_MDMA_LinkedList_RemoveNode+0x34>
24003e8c:	2302      	movs	r3, #2
24003e8e:	e092      	b.n	24003fb6 <HAL_MDMA_LinkedList_RemoveNode+0x15a>
24003e90:	687b      	ldr	r3, [r7, #4]
24003e92:	2201      	movs	r2, #1
24003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24003e98:	687b      	ldr	r3, [r7, #4]
24003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24003e9e:	b2db      	uxtb	r3, r3
24003ea0:	2b01      	cmp	r3, #1
24003ea2:	f040 8083 	bne.w	24003fac <HAL_MDMA_LinkedList_RemoveNode+0x150>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24003ea6:	687b      	ldr	r3, [r7, #4]
24003ea8:	2202      	movs	r2, #2
24003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
24003eae:	687b      	ldr	r3, [r7, #4]
24003eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003eb2:	2b00      	cmp	r3, #0
24003eb4:	d007      	beq.n	24003ec6 <HAL_MDMA_LinkedList_RemoveNode+0x6a>
24003eb6:	687b      	ldr	r3, [r7, #4]
24003eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003eba:	2b00      	cmp	r3, #0
24003ebc:	d003      	beq.n	24003ec6 <HAL_MDMA_LinkedList_RemoveNode+0x6a>
24003ebe:	687b      	ldr	r3, [r7, #4]
24003ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003ec2:	2b00      	cmp	r3, #0
24003ec4:	d102      	bne.n	24003ecc <HAL_MDMA_LinkedList_RemoveNode+0x70>
    {
      hal_status = HAL_ERROR;
24003ec6:	2301      	movs	r3, #1
24003ec8:	72fb      	strb	r3, [r7, #11]
24003eca:	e065      	b.n	24003f98 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
    }
    else if(hmdma->FirstLinkedListNodeAddress == pNode) /* Deleting first node */
24003ecc:	687b      	ldr	r3, [r7, #4]
24003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003ed0:	683a      	ldr	r2, [r7, #0]
24003ed2:	429a      	cmp	r2, r3
24003ed4:	d130      	bne.n	24003f38 <HAL_MDMA_LinkedList_RemoveNode+0xdc>
    {
      /* Delete 1st node */
      if(hmdma->LastLinkedListNodeAddress == pNode)
24003ed6:	687b      	ldr	r3, [r7, #4]
24003ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003eda:	683a      	ldr	r2, [r7, #0]
24003edc:	429a      	cmp	r2, r3
24003ede:	d10d      	bne.n	24003efc <HAL_MDMA_LinkedList_RemoveNode+0xa0>
      {
        /*if the last node is at the same time the first one (1 single node after the init node 0)
        then update the last node too */

        hmdma->FirstLinkedListNodeAddress = 0;
24003ee0:	687b      	ldr	r3, [r7, #4]
24003ee2:	2200      	movs	r2, #0
24003ee4:	65da      	str	r2, [r3, #92]	; 0x5c
        hmdma->LastLinkedListNodeAddress  = 0;
24003ee6:	687b      	ldr	r3, [r7, #4]
24003ee8:	2200      	movs	r2, #0
24003eea:	661a      	str	r2, [r3, #96]	; 0x60
        hmdma->LinkedListNodeCounter = 0;
24003eec:	687b      	ldr	r3, [r7, #4]
24003eee:	2200      	movs	r2, #0
24003ef0:	665a      	str	r2, [r3, #100]	; 0x64

        hmdma->Instance->CLAR = 0;
24003ef2:	687b      	ldr	r3, [r7, #4]
24003ef4:	681b      	ldr	r3, [r3, #0]
24003ef6:	2200      	movs	r2, #0
24003ef8:	625a      	str	r2, [r3, #36]	; 0x24
24003efa:	e04d      	b.n	24003f98 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
      else
      {
        if((uint32_t)hmdma->FirstLinkedListNodeAddress == hmdma->LastLinkedListNodeAddress->CLAR)
24003efc:	687b      	ldr	r3, [r7, #4]
24003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003f00:	461a      	mov	r2, r3
24003f02:	687b      	ldr	r3, [r7, #4]
24003f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003f06:	695b      	ldr	r3, [r3, #20]
24003f08:	429a      	cmp	r2, r3
24003f0a:	d104      	bne.n	24003f16 <HAL_MDMA_LinkedList_RemoveNode+0xba>
        {
          /* if last node is looping to first (circular list) one update the last node connection */
          hmdma->LastLinkedListNodeAddress->CLAR = pNode->CLAR;
24003f0c:	687b      	ldr	r3, [r7, #4]
24003f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003f10:	683a      	ldr	r2, [r7, #0]
24003f12:	6952      	ldr	r2, [r2, #20]
24003f14:	615a      	str	r2, [r3, #20]
        }

        /* if deleting the first node after the initialization
        connect the next node to the node 0 by updating
        the MDMA channel CLAR register to this node address */
        hmdma->Instance->CLAR = pNode->CLAR;
24003f16:	687b      	ldr	r3, [r7, #4]
24003f18:	681b      	ldr	r3, [r3, #0]
24003f1a:	683a      	ldr	r2, [r7, #0]
24003f1c:	6952      	ldr	r2, [r2, #20]
24003f1e:	625a      	str	r2, [r3, #36]	; 0x24
        hmdma->FirstLinkedListNodeAddress = (MDMA_LinkNodeTypeDef *)hmdma->Instance->CLAR;
24003f20:	687b      	ldr	r3, [r7, #4]
24003f22:	681b      	ldr	r3, [r3, #0]
24003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24003f26:	461a      	mov	r2, r3
24003f28:	687b      	ldr	r3, [r7, #4]
24003f2a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Update the Handle node counter */
        hmdma->LinkedListNodeCounter--;
24003f2c:	687b      	ldr	r3, [r7, #4]
24003f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003f30:	1e5a      	subs	r2, r3, #1
24003f32:	687b      	ldr	r3, [r7, #4]
24003f34:	665a      	str	r2, [r3, #100]	; 0x64
24003f36:	e02f      	b.n	24003f98 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      }
    }
    else /* Deleting any other node */
    {
      /*Deleted node is not the first one : find it  */
      ptmpNode = hmdma->FirstLinkedListNodeAddress;
24003f38:	687b      	ldr	r3, [r7, #4]
24003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24003f3c:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
24003f3e:	e01e      	b.n	24003f7e <HAL_MDMA_LinkedList_RemoveNode+0x122>
      {
        counter++;
24003f40:	693b      	ldr	r3, [r7, #16]
24003f42:	3301      	adds	r3, #1
24003f44:	613b      	str	r3, [r7, #16]
        if(ptmpNode->CLAR == ((uint32_t)pNode))
24003f46:	697b      	ldr	r3, [r7, #20]
24003f48:	695a      	ldr	r2, [r3, #20]
24003f4a:	683b      	ldr	r3, [r7, #0]
24003f4c:	429a      	cmp	r2, r3
24003f4e:	d113      	bne.n	24003f78 <HAL_MDMA_LinkedList_RemoveNode+0x11c>
        {
          /* if deleting the last node */
          if(pNode == hmdma->LastLinkedListNodeAddress)
24003f50:	687b      	ldr	r3, [r7, #4]
24003f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24003f54:	683a      	ldr	r2, [r7, #0]
24003f56:	429a      	cmp	r2, r3
24003f58:	d102      	bne.n	24003f60 <HAL_MDMA_LinkedList_RemoveNode+0x104>
          {
            /*Update the linked list last node address in the handle*/
            hmdma->LastLinkedListNodeAddress = ptmpNode;
24003f5a:	687b      	ldr	r3, [r7, #4]
24003f5c:	697a      	ldr	r2, [r7, #20]
24003f5e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          /* update the next node link after deleting pMDMA_LinkedListNode */
          ptmpNode->CLAR = pNode->CLAR;
24003f60:	683b      	ldr	r3, [r7, #0]
24003f62:	695a      	ldr	r2, [r3, #20]
24003f64:	697b      	ldr	r3, [r7, #20]
24003f66:	615a      	str	r2, [r3, #20]
          nodeDeleted = 1;
24003f68:	2301      	movs	r3, #1
24003f6a:	60fb      	str	r3, [r7, #12]
          /* Update the Handle node counter */
          hmdma->LinkedListNodeCounter--;
24003f6c:	687b      	ldr	r3, [r7, #4]
24003f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003f70:	1e5a      	subs	r2, r3, #1
24003f72:	687b      	ldr	r3, [r7, #4]
24003f74:	665a      	str	r2, [r3, #100]	; 0x64
24003f76:	e002      	b.n	24003f7e <HAL_MDMA_LinkedList_RemoveNode+0x122>
        }
        else
        {
          ptmpNode = (MDMA_LinkNodeTypeDef *)ptmpNode->CLAR;
24003f78:	697b      	ldr	r3, [r7, #20]
24003f7a:	695b      	ldr	r3, [r3, #20]
24003f7c:	617b      	str	r3, [r7, #20]
      while((counter < hmdma->LinkedListNodeCounter) && (nodeDeleted == 0U))
24003f7e:	687b      	ldr	r3, [r7, #4]
24003f80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24003f82:	693a      	ldr	r2, [r7, #16]
24003f84:	429a      	cmp	r2, r3
24003f86:	d202      	bcs.n	24003f8e <HAL_MDMA_LinkedList_RemoveNode+0x132>
24003f88:	68fb      	ldr	r3, [r7, #12]
24003f8a:	2b00      	cmp	r3, #0
24003f8c:	d0d8      	beq.n	24003f40 <HAL_MDMA_LinkedList_RemoveNode+0xe4>
        }
      }

      if(nodeDeleted == 0U)
24003f8e:	68fb      	ldr	r3, [r7, #12]
24003f90:	2b00      	cmp	r3, #0
24003f92:	d101      	bne.n	24003f98 <HAL_MDMA_LinkedList_RemoveNode+0x13c>
      {
        /* last node reashed without finding the node to delete : return error */
        hal_status = HAL_ERROR;
24003f94:	2301      	movs	r3, #1
24003f96:	72fb      	strb	r3, [r7, #11]
      }
    }

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24003f98:	687b      	ldr	r3, [r7, #4]
24003f9a:	2200      	movs	r2, #0
24003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
24003fa0:	687b      	ldr	r3, [r7, #4]
24003fa2:	2201      	movs	r2, #1
24003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return hal_status;
24003fa8:	7afb      	ldrb	r3, [r7, #11]
24003faa:	e004      	b.n	24003fb6 <HAL_MDMA_LinkedList_RemoveNode+0x15a>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24003fac:	687b      	ldr	r3, [r7, #4]
24003fae:	2200      	movs	r2, #0
24003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
24003fb4:	2302      	movs	r3, #2
  }
}
24003fb6:	4618      	mov	r0, r3
24003fb8:	371c      	adds	r7, #28
24003fba:	46bd      	mov	sp, r7
24003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
24003fc0:	4770      	bx	lr

24003fc2 <HAL_MDMA_LinkedList_EnableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_EnableCircularMode(MDMA_HandleTypeDef *hmdma)
{
24003fc2:	b480      	push	{r7}
24003fc4:	b085      	sub	sp, #20
24003fc6:	af00      	add	r7, sp, #0
24003fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
24003fca:	2300      	movs	r3, #0
24003fcc:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24003fce:	687b      	ldr	r3, [r7, #4]
24003fd0:	2b00      	cmp	r3, #0
24003fd2:	d101      	bne.n	24003fd8 <HAL_MDMA_LinkedList_EnableCircularMode+0x16>
  {
    return HAL_ERROR;
24003fd4:	2301      	movs	r3, #1
24003fd6:	e031      	b.n	2400403c <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
24003fd8:	687b      	ldr	r3, [r7, #4]
24003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24003fde:	2b01      	cmp	r3, #1
24003fe0:	d101      	bne.n	24003fe6 <HAL_MDMA_LinkedList_EnableCircularMode+0x24>
24003fe2:	2302      	movs	r3, #2
24003fe4:	e02a      	b.n	2400403c <HAL_MDMA_LinkedList_EnableCircularMode+0x7a>
24003fe6:	687b      	ldr	r3, [r7, #4]
24003fe8:	2201      	movs	r2, #1
24003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24003fee:	687b      	ldr	r3, [r7, #4]
24003ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24003ff4:	b2db      	uxtb	r3, r3
24003ff6:	2b01      	cmp	r3, #1
24003ff8:	d117      	bne.n	2400402a <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24003ffa:	687b      	ldr	r3, [r7, #4]
24003ffc:	2202      	movs	r2, #2
24003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
24004002:	687b      	ldr	r3, [r7, #4]
24004004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
24004006:	2b00      	cmp	r3, #0
24004008:	d007      	beq.n	2400401a <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
2400400a:	687b      	ldr	r3, [r7, #4]
2400400c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400400e:	2b00      	cmp	r3, #0
24004010:	d003      	beq.n	2400401a <HAL_MDMA_LinkedList_EnableCircularMode+0x58>
24004012:	687b      	ldr	r3, [r7, #4]
24004014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24004016:	2b00      	cmp	r3, #0
24004018:	d102      	bne.n	24004020 <HAL_MDMA_LinkedList_EnableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
2400401a:	2301      	movs	r3, #1
2400401c:	73fb      	strb	r3, [r7, #15]
2400401e:	e004      	b.n	2400402a <HAL_MDMA_LinkedList_EnableCircularMode+0x68>
    }
    else
    {
      /* to enable circular mode Last Node should be connected to first node */
      hmdma->LastLinkedListNodeAddress->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
24004020:	687b      	ldr	r3, [r7, #4]
24004022:	6dda      	ldr	r2, [r3, #92]	; 0x5c
24004024:	687b      	ldr	r3, [r7, #4]
24004026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004028:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
2400402a:	687b      	ldr	r3, [r7, #4]
2400402c:	2200      	movs	r2, #0
2400402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
24004032:	687b      	ldr	r3, [r7, #4]
24004034:	2201      	movs	r2, #1
24004036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return hal_status;
2400403a:	7bfb      	ldrb	r3, [r7, #15]
}
2400403c:	4618      	mov	r0, r3
2400403e:	3714      	adds	r7, #20
24004040:	46bd      	mov	sp, r7
24004042:	f85d 7b04 	ldr.w	r7, [sp], #4
24004046:	4770      	bx	lr

24004048 <HAL_MDMA_LinkedList_DisableCircularMode>:
  * @param  hmdma : Pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_LinkedList_DisableCircularMode(MDMA_HandleTypeDef *hmdma)
{
24004048:	b480      	push	{r7}
2400404a:	b085      	sub	sp, #20
2400404c:	af00      	add	r7, sp, #0
2400404e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
24004050:	2300      	movs	r3, #0
24004052:	73fb      	strb	r3, [r7, #15]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24004054:	687b      	ldr	r3, [r7, #4]
24004056:	2b00      	cmp	r3, #0
24004058:	d101      	bne.n	2400405e <HAL_MDMA_LinkedList_DisableCircularMode+0x16>
  {
    return HAL_ERROR;
2400405a:	2301      	movs	r3, #1
2400405c:	e030      	b.n	240040c0 <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400405e:	687b      	ldr	r3, [r7, #4]
24004060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24004064:	2b01      	cmp	r3, #1
24004066:	d101      	bne.n	2400406c <HAL_MDMA_LinkedList_DisableCircularMode+0x24>
24004068:	2302      	movs	r3, #2
2400406a:	e029      	b.n	240040c0 <HAL_MDMA_LinkedList_DisableCircularMode+0x78>
2400406c:	687b      	ldr	r3, [r7, #4]
2400406e:	2201      	movs	r2, #1
24004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
24004074:	687b      	ldr	r3, [r7, #4]
24004076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400407a:	b2db      	uxtb	r3, r3
2400407c:	2b01      	cmp	r3, #1
2400407e:	d116      	bne.n	240040ae <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24004080:	687b      	ldr	r3, [r7, #4]
24004082:	2202      	movs	r2, #2
24004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* If first and last node are null (no nodes in the list) : return error*/
    if(((uint32_t)hmdma->FirstLinkedListNodeAddress == 0U) || ((uint32_t)hmdma->LastLinkedListNodeAddress == 0U) || (hmdma->LinkedListNodeCounter == 0U))
24004088:	687b      	ldr	r3, [r7, #4]
2400408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400408c:	2b00      	cmp	r3, #0
2400408e:	d007      	beq.n	240040a0 <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
24004090:	687b      	ldr	r3, [r7, #4]
24004092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24004094:	2b00      	cmp	r3, #0
24004096:	d003      	beq.n	240040a0 <HAL_MDMA_LinkedList_DisableCircularMode+0x58>
24004098:	687b      	ldr	r3, [r7, #4]
2400409a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400409c:	2b00      	cmp	r3, #0
2400409e:	d102      	bne.n	240040a6 <HAL_MDMA_LinkedList_DisableCircularMode+0x5e>
    {
      hal_status = HAL_ERROR;
240040a0:	2301      	movs	r3, #1
240040a2:	73fb      	strb	r3, [r7, #15]
240040a4:	e003      	b.n	240040ae <HAL_MDMA_LinkedList_DisableCircularMode+0x66>
    }
    else
    {
      /* to disable circular mode Last Node should be connected to NULL */
      hmdma->LastLinkedListNodeAddress->CLAR = 0;
240040a6:	687b      	ldr	r3, [r7, #4]
240040a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240040aa:	2200      	movs	r2, #0
240040ac:	615a      	str	r2, [r3, #20]
    }

  }
  /* Process unlocked */
  __HAL_UNLOCK(hmdma);
240040ae:	687b      	ldr	r3, [r7, #4]
240040b0:	2200      	movs	r2, #0
240040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  hmdma->State = HAL_MDMA_STATE_READY;
240040b6:	687b      	ldr	r3, [r7, #4]
240040b8:	2201      	movs	r2, #1
240040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return hal_status;
240040be:	7bfb      	ldrb	r3, [r7, #15]
}
240040c0:	4618      	mov	r0, r3
240040c2:	3714      	adds	r7, #20
240040c4:	46bd      	mov	sp, r7
240040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240040ca:	4770      	bx	lr

240040cc <HAL_MDMA_Start>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
240040cc:	b580      	push	{r7, lr}
240040ce:	b086      	sub	sp, #24
240040d0:	af02      	add	r7, sp, #8
240040d2:	60f8      	str	r0, [r7, #12]
240040d4:	60b9      	str	r1, [r7, #8]
240040d6:	607a      	str	r2, [r7, #4]
240040d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
240040da:	68fb      	ldr	r3, [r7, #12]
240040dc:	2b00      	cmp	r3, #0
240040de:	d101      	bne.n	240040e4 <HAL_MDMA_Start+0x18>
  {
    return HAL_ERROR;
240040e0:	2301      	movs	r3, #1
240040e2:	e044      	b.n	2400416e <HAL_MDMA_Start+0xa2>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
240040e4:	68fb      	ldr	r3, [r7, #12]
240040e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
240040ea:	2b01      	cmp	r3, #1
240040ec:	d101      	bne.n	240040f2 <HAL_MDMA_Start+0x26>
240040ee:	2302      	movs	r3, #2
240040f0:	e03d      	b.n	2400416e <HAL_MDMA_Start+0xa2>
240040f2:	68fb      	ldr	r3, [r7, #12]
240040f4:	2201      	movs	r2, #1
240040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240040fa:	68fb      	ldr	r3, [r7, #12]
240040fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24004100:	b2db      	uxtb	r3, r3
24004102:	2b01      	cmp	r3, #1
24004104:	d12c      	bne.n	24004160 <HAL_MDMA_Start+0x94>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
24004106:	68fb      	ldr	r3, [r7, #12]
24004108:	2202      	movs	r2, #2
2400410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
2400410e:	68fb      	ldr	r3, [r7, #12]
24004110:	2200      	movs	r2, #0
24004112:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
24004114:	68fb      	ldr	r3, [r7, #12]
24004116:	681b      	ldr	r3, [r3, #0]
24004118:	68da      	ldr	r2, [r3, #12]
2400411a:	68fb      	ldr	r3, [r7, #12]
2400411c:	681b      	ldr	r3, [r3, #0]
2400411e:	f022 0201 	bic.w	r2, r2, #1
24004122:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
24004124:	69bb      	ldr	r3, [r7, #24]
24004126:	9300      	str	r3, [sp, #0]
24004128:	683b      	ldr	r3, [r7, #0]
2400412a:	687a      	ldr	r2, [r7, #4]
2400412c:	68b9      	ldr	r1, [r7, #8]
2400412e:	68f8      	ldr	r0, [r7, #12]
24004130:	f000 fb97 	bl	24004862 <MDMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
24004134:	68fb      	ldr	r3, [r7, #12]
24004136:	681b      	ldr	r3, [r3, #0]
24004138:	68da      	ldr	r2, [r3, #12]
2400413a:	68fb      	ldr	r3, [r7, #12]
2400413c:	681b      	ldr	r3, [r3, #0]
2400413e:	f042 0201 	orr.w	r2, r2, #1
24004142:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
24004144:	68fb      	ldr	r3, [r7, #12]
24004146:	685b      	ldr	r3, [r3, #4]
24004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400414c:	d10e      	bne.n	2400416c <HAL_MDMA_Start+0xa0>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
2400414e:	68fb      	ldr	r3, [r7, #12]
24004150:	681b      	ldr	r3, [r3, #0]
24004152:	68da      	ldr	r2, [r3, #12]
24004154:	68fb      	ldr	r3, [r7, #12]
24004156:	681b      	ldr	r3, [r3, #0]
24004158:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400415c:	60da      	str	r2, [r3, #12]
2400415e:	e005      	b.n	2400416c <HAL_MDMA_Start+0xa0>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24004160:	68fb      	ldr	r3, [r7, #12]
24004162:	2200      	movs	r2, #0
24004164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
24004168:	2302      	movs	r3, #2
2400416a:	e000      	b.n	2400416e <HAL_MDMA_Start+0xa2>
  }

  return HAL_OK;
2400416c:	2300      	movs	r3, #0
}
2400416e:	4618      	mov	r0, r3
24004170:	3710      	adds	r7, #16
24004172:	46bd      	mov	sp, r7
24004174:	bd80      	pop	{r7, pc}

24004176 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
24004176:	b580      	push	{r7, lr}
24004178:	b086      	sub	sp, #24
2400417a:	af02      	add	r7, sp, #8
2400417c:	60f8      	str	r0, [r7, #12]
2400417e:	60b9      	str	r1, [r7, #8]
24004180:	607a      	str	r2, [r7, #4]
24004182:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24004184:	68fb      	ldr	r3, [r7, #12]
24004186:	2b00      	cmp	r3, #0
24004188:	d101      	bne.n	2400418e <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
2400418a:	2301      	movs	r3, #1
2400418c:	e070      	b.n	24004270 <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
2400418e:	68fb      	ldr	r3, [r7, #12]
24004190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
24004194:	2b01      	cmp	r3, #1
24004196:	d101      	bne.n	2400419c <HAL_MDMA_Start_IT+0x26>
24004198:	2302      	movs	r3, #2
2400419a:	e069      	b.n	24004270 <HAL_MDMA_Start_IT+0xfa>
2400419c:	68fb      	ldr	r3, [r7, #12]
2400419e:	2201      	movs	r2, #1
240041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
240041a4:	68fb      	ldr	r3, [r7, #12]
240041a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
240041aa:	b2db      	uxtb	r3, r3
240041ac:	2b01      	cmp	r3, #1
240041ae:	d158      	bne.n	24004262 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
240041b0:	68fb      	ldr	r3, [r7, #12]
240041b2:	2202      	movs	r2, #2
240041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
240041b8:	68fb      	ldr	r3, [r7, #12]
240041ba:	2200      	movs	r2, #0
240041bc:	669a      	str	r2, [r3, #104]	; 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
240041be:	68fb      	ldr	r3, [r7, #12]
240041c0:	681b      	ldr	r3, [r3, #0]
240041c2:	68da      	ldr	r2, [r3, #12]
240041c4:	68fb      	ldr	r3, [r7, #12]
240041c6:	681b      	ldr	r3, [r3, #0]
240041c8:	f022 0201 	bic.w	r2, r2, #1
240041cc:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
240041ce:	69bb      	ldr	r3, [r7, #24]
240041d0:	9300      	str	r3, [sp, #0]
240041d2:	683b      	ldr	r3, [r7, #0]
240041d4:	687a      	ldr	r2, [r7, #4]
240041d6:	68b9      	ldr	r1, [r7, #8]
240041d8:	68f8      	ldr	r0, [r7, #12]
240041da:	f000 fb42 	bl	24004862 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
240041de:	68fb      	ldr	r3, [r7, #12]
240041e0:	681b      	ldr	r3, [r3, #0]
240041e2:	68da      	ldr	r2, [r3, #12]
240041e4:	68fb      	ldr	r3, [r7, #12]
240041e6:	681b      	ldr	r3, [r3, #0]
240041e8:	f042 0206 	orr.w	r2, r2, #6
240041ec:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
240041ee:	68fb      	ldr	r3, [r7, #12]
240041f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240041f2:	2b00      	cmp	r3, #0
240041f4:	d007      	beq.n	24004206 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
240041f6:	68fb      	ldr	r3, [r7, #12]
240041f8:	681b      	ldr	r3, [r3, #0]
240041fa:	68da      	ldr	r2, [r3, #12]
240041fc:	68fb      	ldr	r3, [r7, #12]
240041fe:	681b      	ldr	r3, [r3, #0]
24004200:	f042 0210 	orr.w	r2, r2, #16
24004204:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
24004206:	68fb      	ldr	r3, [r7, #12]
24004208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400420a:	2b00      	cmp	r3, #0
2400420c:	d007      	beq.n	2400421e <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
2400420e:	68fb      	ldr	r3, [r7, #12]
24004210:	681b      	ldr	r3, [r3, #0]
24004212:	68da      	ldr	r2, [r3, #12]
24004214:	68fb      	ldr	r3, [r7, #12]
24004216:	681b      	ldr	r3, [r3, #0]
24004218:	f042 0208 	orr.w	r2, r2, #8
2400421c:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
2400421e:	68fb      	ldr	r3, [r7, #12]
24004220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24004222:	2b00      	cmp	r3, #0
24004224:	d007      	beq.n	24004236 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
24004226:	68fb      	ldr	r3, [r7, #12]
24004228:	681b      	ldr	r3, [r3, #0]
2400422a:	68da      	ldr	r2, [r3, #12]
2400422c:	68fb      	ldr	r3, [r7, #12]
2400422e:	681b      	ldr	r3, [r3, #0]
24004230:	f042 0220 	orr.w	r2, r2, #32
24004234:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
24004236:	68fb      	ldr	r3, [r7, #12]
24004238:	681b      	ldr	r3, [r3, #0]
2400423a:	68da      	ldr	r2, [r3, #12]
2400423c:	68fb      	ldr	r3, [r7, #12]
2400423e:	681b      	ldr	r3, [r3, #0]
24004240:	f042 0201 	orr.w	r2, r2, #1
24004244:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
24004246:	68fb      	ldr	r3, [r7, #12]
24004248:	685b      	ldr	r3, [r3, #4]
2400424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
2400424e:	d10e      	bne.n	2400426e <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
24004250:	68fb      	ldr	r3, [r7, #12]
24004252:	681b      	ldr	r3, [r3, #0]
24004254:	68da      	ldr	r2, [r3, #12]
24004256:	68fb      	ldr	r3, [r7, #12]
24004258:	681b      	ldr	r3, [r3, #0]
2400425a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
2400425e:	60da      	str	r2, [r3, #12]
24004260:	e005      	b.n	2400426e <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
24004262:	68fb      	ldr	r3, [r7, #12]
24004264:	2200      	movs	r2, #0
24004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_BUSY;
2400426a:	2302      	movs	r3, #2
2400426c:	e000      	b.n	24004270 <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
2400426e:	2300      	movs	r3, #0
}
24004270:	4618      	mov	r0, r3
24004272:	3710      	adds	r7, #16
24004274:	46bd      	mov	sp, r7
24004276:	bd80      	pop	{r7, pc}

24004278 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
24004278:	b580      	push	{r7, lr}
2400427a:	b084      	sub	sp, #16
2400427c:	af00      	add	r7, sp, #0
2400427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart =  HAL_GetTick();
24004280:	f7fd ff9c 	bl	240021bc <HAL_GetTick>
24004284:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24004286:	687b      	ldr	r3, [r7, #4]
24004288:	2b00      	cmp	r3, #0
2400428a:	d101      	bne.n	24004290 <HAL_MDMA_Abort+0x18>
  {
    return HAL_ERROR;
2400428c:	2301      	movs	r3, #1
2400428e:	e04a      	b.n	24004326 <HAL_MDMA_Abort+0xae>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
24004290:	687b      	ldr	r3, [r7, #4]
24004292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24004296:	b2db      	uxtb	r3, r3
24004298:	2b02      	cmp	r3, #2
2400429a:	d008      	beq.n	240042ae <HAL_MDMA_Abort+0x36>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
2400429c:	687b      	ldr	r3, [r7, #4]
2400429e:	2280      	movs	r2, #128	; 0x80
240042a0:	669a      	str	r2, [r3, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
240042a2:	687b      	ldr	r3, [r7, #4]
240042a4:	2200      	movs	r2, #0
240042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
240042aa:	2301      	movs	r3, #1
240042ac:	e03b      	b.n	24004326 <HAL_MDMA_Abort+0xae>
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
240042ae:	687b      	ldr	r3, [r7, #4]
240042b0:	681b      	ldr	r3, [r3, #0]
240042b2:	68da      	ldr	r2, [r3, #12]
240042b4:	687b      	ldr	r3, [r7, #4]
240042b6:	681b      	ldr	r3, [r3, #0]
240042b8:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
240042bc:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
240042be:	687b      	ldr	r3, [r7, #4]
240042c0:	681b      	ldr	r3, [r3, #0]
240042c2:	68da      	ldr	r2, [r3, #12]
240042c4:	687b      	ldr	r3, [r7, #4]
240042c6:	681b      	ldr	r3, [r3, #0]
240042c8:	f022 0201 	bic.w	r2, r2, #1
240042cc:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
240042ce:	e016      	b.n	240042fe <HAL_MDMA_Abort+0x86>
    {
      /* Check for the Timeout */
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
240042d0:	f7fd ff74 	bl	240021bc <HAL_GetTick>
240042d4:	4602      	mov	r2, r0
240042d6:	68fb      	ldr	r3, [r7, #12]
240042d8:	1ad3      	subs	r3, r2, r3
240042da:	2b05      	cmp	r3, #5
240042dc:	d90f      	bls.n	240042fe <HAL_MDMA_Abort+0x86>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
240042de:	687b      	ldr	r3, [r7, #4]
240042e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240042e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
240042e6:	687b      	ldr	r3, [r7, #4]
240042e8:	669a      	str	r2, [r3, #104]	; 0x68

        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
240042ea:	687b      	ldr	r3, [r7, #4]
240042ec:	2200      	movs	r2, #0
240042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the MDMA state */
        hmdma->State = HAL_MDMA_STATE_ERROR;
240042f2:	687b      	ldr	r3, [r7, #4]
240042f4:	2203      	movs	r2, #3
240042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        return HAL_ERROR;
240042fa:	2301      	movs	r3, #1
240042fc:	e013      	b.n	24004326 <HAL_MDMA_Abort+0xae>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
240042fe:	687b      	ldr	r3, [r7, #4]
24004300:	681b      	ldr	r3, [r3, #0]
24004302:	68db      	ldr	r3, [r3, #12]
24004304:	f003 0301 	and.w	r3, r3, #1
24004308:	2b00      	cmp	r3, #0
2400430a:	d1e1      	bne.n	240042d0 <HAL_MDMA_Abort+0x58>
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
2400430c:	687b      	ldr	r3, [r7, #4]
2400430e:	681b      	ldr	r3, [r3, #0]
24004310:	221f      	movs	r2, #31
24004312:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
24004314:	687b      	ldr	r3, [r7, #4]
24004316:	2200      	movs	r2, #0
24004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
2400431c:	687b      	ldr	r3, [r7, #4]
2400431e:	2201      	movs	r2, #1
24004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

  return HAL_OK;
24004324:	2300      	movs	r3, #0
}
24004326:	4618      	mov	r0, r3
24004328:	3710      	adds	r7, #16
2400432a:	46bd      	mov	sp, r7
2400432c:	bd80      	pop	{r7, pc}

2400432e <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
2400432e:	b480      	push	{r7}
24004330:	b083      	sub	sp, #12
24004332:	af00      	add	r7, sp, #0
24004334:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24004336:	687b      	ldr	r3, [r7, #4]
24004338:	2b00      	cmp	r3, #0
2400433a:	d101      	bne.n	24004340 <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
2400433c:	2301      	movs	r3, #1
2400433e:	e017      	b.n	24004370 <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
24004340:	687b      	ldr	r3, [r7, #4]
24004342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
24004346:	b2db      	uxtb	r3, r3
24004348:	2b02      	cmp	r3, #2
2400434a:	d004      	beq.n	24004356 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
2400434c:	687b      	ldr	r3, [r7, #4]
2400434e:	2280      	movs	r2, #128	; 0x80
24004350:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
24004352:	2301      	movs	r3, #1
24004354:	e00c      	b.n	24004370 <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
24004356:	687b      	ldr	r3, [r7, #4]
24004358:	2204      	movs	r2, #4
2400435a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
2400435e:	687b      	ldr	r3, [r7, #4]
24004360:	681b      	ldr	r3, [r3, #0]
24004362:	68da      	ldr	r2, [r3, #12]
24004364:	687b      	ldr	r3, [r7, #4]
24004366:	681b      	ldr	r3, [r3, #0]
24004368:	f022 0201 	bic.w	r2, r2, #1
2400436c:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
2400436e:	2300      	movs	r3, #0
}
24004370:	4618      	mov	r0, r3
24004372:	370c      	adds	r7, #12
24004374:	46bd      	mov	sp, r7
24004376:	f85d 7b04 	ldr.w	r7, [sp], #4
2400437a:	4770      	bx	lr

2400437c <HAL_MDMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the MDMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_PollForTransfer(MDMA_HandleTypeDef *hmdma, HAL_MDMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
2400437c:	b580      	push	{r7, lr}
2400437e:	b088      	sub	sp, #32
24004380:	af00      	add	r7, sp, #0
24004382:	60f8      	str	r0, [r7, #12]
24004384:	460b      	mov	r3, r1
24004386:	607a      	str	r2, [r7, #4]
24004388:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_MDMA_LEVEL_COMPLETE(CompleteLevel));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
2400438a:	68fb      	ldr	r3, [r7, #12]
2400438c:	2b00      	cmp	r3, #0
2400438e:	d101      	bne.n	24004394 <HAL_MDMA_PollForTransfer+0x18>
  {
    return HAL_ERROR;
24004390:	2301      	movs	r3, #1
24004392:	e0b9      	b.n	24004508 <HAL_MDMA_PollForTransfer+0x18c>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
24004394:	68fb      	ldr	r3, [r7, #12]
24004396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400439a:	b2db      	uxtb	r3, r3
2400439c:	2b02      	cmp	r3, #2
2400439e:	d004      	beq.n	240043aa <HAL_MDMA_PollForTransfer+0x2e>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
240043a0:	68fb      	ldr	r3, [r7, #12]
240043a2:	2280      	movs	r2, #128	; 0x80
240043a4:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
240043a6:	2301      	movs	r3, #1
240043a8:	e0ae      	b.n	24004508 <HAL_MDMA_PollForTransfer+0x18c>
  }

  /* Get the level transfer complete flag */
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
240043aa:	7afb      	ldrb	r3, [r7, #11]
240043ac:	2b00      	cmp	r3, #0
240043ae:	d00b      	beq.n	240043c8 <HAL_MDMA_PollForTransfer+0x4c>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
240043b0:	7afb      	ldrb	r3, [r7, #11]
240043b2:	2b01      	cmp	r3, #1
240043b4:	d006      	beq.n	240043c4 <HAL_MDMA_PollForTransfer+0x48>
               (CompleteLevel == HAL_MDMA_BLOCK_TRANSFER) ? MDMA_FLAG_BT   : \
240043b6:	7afb      	ldrb	r3, [r7, #11]
240043b8:	2b02      	cmp	r3, #2
240043ba:	d101      	bne.n	240043c0 <HAL_MDMA_PollForTransfer+0x44>
240043bc:	2308      	movs	r3, #8
240043be:	e004      	b.n	240043ca <HAL_MDMA_PollForTransfer+0x4e>
240043c0:	2304      	movs	r3, #4
240043c2:	e002      	b.n	240043ca <HAL_MDMA_PollForTransfer+0x4e>
               (CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)? MDMA_FLAG_BFTC : \
240043c4:	2310      	movs	r3, #16
240043c6:	e000      	b.n	240043ca <HAL_MDMA_PollForTransfer+0x4e>
  levelFlag = ((CompleteLevel == HAL_MDMA_FULL_TRANSFER)  ? MDMA_FLAG_CTC  : \
240043c8:	2302      	movs	r3, #2
240043ca:	61fb      	str	r3, [r7, #28]
               MDMA_FLAG_BRT);


  /* Get timeout */
  tickstart = HAL_GetTick();
240043cc:	f7fd fef6 	bl	240021bc <HAL_GetTick>
240043d0:	61b8      	str	r0, [r7, #24]

  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
240043d2:	e067      	b.n	240044a4 <HAL_MDMA_PollForTransfer+0x128>
  {
    if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
240043d4:	68fb      	ldr	r3, [r7, #12]
240043d6:	681b      	ldr	r3, [r3, #0]
240043d8:	681b      	ldr	r3, [r3, #0]
240043da:	f003 0301 	and.w	r3, r3, #1
240043de:	2b00      	cmp	r3, #0
240043e0:	d046      	beq.n	24004470 <HAL_MDMA_PollForTransfer+0xf4>
    {
      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
240043e2:	68fb      	ldr	r3, [r7, #12]
240043e4:	681b      	ldr	r3, [r3, #0]
240043e6:	689b      	ldr	r3, [r3, #8]
240043e8:	617b      	str	r3, [r7, #20]

      if((errorFlag & MDMA_CESR_TED) == 0U)
240043ea:	697b      	ldr	r3, [r7, #20]
240043ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
240043f0:	2b00      	cmp	r3, #0
240043f2:	d106      	bne.n	24004402 <HAL_MDMA_PollForTransfer+0x86>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
240043f4:	68fb      	ldr	r3, [r7, #12]
240043f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240043f8:	f043 0201 	orr.w	r2, r3, #1
240043fc:	68fb      	ldr	r3, [r7, #12]
240043fe:	669a      	str	r2, [r3, #104]	; 0x68
24004400:	e005      	b.n	2400440e <HAL_MDMA_PollForTransfer+0x92>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
24004402:	68fb      	ldr	r3, [r7, #12]
24004404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24004406:	f043 0202 	orr.w	r2, r3, #2
2400440a:	68fb      	ldr	r3, [r7, #12]
2400440c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
2400440e:	697b      	ldr	r3, [r7, #20]
24004410:	f403 7300 	and.w	r3, r3, #512	; 0x200
24004414:	2b00      	cmp	r3, #0
24004416:	d005      	beq.n	24004424 <HAL_MDMA_PollForTransfer+0xa8>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
24004418:	68fb      	ldr	r3, [r7, #12]
2400441a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400441c:	f043 0204 	orr.w	r2, r3, #4
24004420:	68fb      	ldr	r3, [r7, #12]
24004422:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
24004424:	697b      	ldr	r3, [r7, #20]
24004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400442a:	2b00      	cmp	r3, #0
2400442c:	d005      	beq.n	2400443a <HAL_MDMA_PollForTransfer+0xbe>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
2400442e:	68fb      	ldr	r3, [r7, #12]
24004430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24004432:	f043 0208 	orr.w	r2, r3, #8
24004436:	68fb      	ldr	r3, [r7, #12]
24004438:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
2400443a:	697b      	ldr	r3, [r7, #20]
2400443c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24004440:	2b00      	cmp	r3, #0
24004442:	d005      	beq.n	24004450 <HAL_MDMA_PollForTransfer+0xd4>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
24004444:	68fb      	ldr	r3, [r7, #12]
24004446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24004448:	f043 0210 	orr.w	r2, r3, #16
2400444c:	68fb      	ldr	r3, [r7, #12]
2400444e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
24004450:	697b      	ldr	r3, [r7, #20]
24004452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
24004456:	2b00      	cmp	r3, #0
24004458:	d005      	beq.n	24004466 <HAL_MDMA_PollForTransfer+0xea>
      {
        /* Update error code : Block Size error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
2400445a:	68fb      	ldr	r3, [r7, #12]
2400445c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400445e:	f043 0220 	orr.w	r2, r3, #32
24004462:	68fb      	ldr	r3, [r7, #12]
24004464:	669a      	str	r2, [r3, #104]	; 0x68
      }

      (void) HAL_MDMA_Abort(hmdma); /* if error then abort the current transfer */
24004466:	68f8      	ldr	r0, [r7, #12]
24004468:	f7ff ff06 	bl	24004278 <HAL_MDMA_Abort>
          - Clear all transfer flags
          - Unlock
          - Set the State
      */

      return HAL_ERROR;
2400446c:	2301      	movs	r3, #1
2400446e:	e04b      	b.n	24004508 <HAL_MDMA_PollForTransfer+0x18c>

    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
24004470:	687b      	ldr	r3, [r7, #4]
24004472:	f1b3 3fff 	cmp.w	r3, #4294967295
24004476:	d015      	beq.n	240044a4 <HAL_MDMA_PollForTransfer+0x128>
    {
      if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
24004478:	f7fd fea0 	bl	240021bc <HAL_GetTick>
2400447c:	4602      	mov	r2, r0
2400447e:	69bb      	ldr	r3, [r7, #24]
24004480:	1ad3      	subs	r3, r2, r3
24004482:	687a      	ldr	r2, [r7, #4]
24004484:	429a      	cmp	r2, r3
24004486:	d302      	bcc.n	2400448e <HAL_MDMA_PollForTransfer+0x112>
24004488:	687b      	ldr	r3, [r7, #4]
2400448a:	2b00      	cmp	r3, #0
2400448c:	d10a      	bne.n	240044a4 <HAL_MDMA_PollForTransfer+0x128>
      {
        /* Update error code */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
2400448e:	68fb      	ldr	r3, [r7, #12]
24004490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24004492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
24004496:	68fb      	ldr	r3, [r7, #12]
24004498:	669a      	str	r2, [r3, #104]	; 0x68

        (void) HAL_MDMA_Abort(hmdma); /* if timeout then abort the current transfer */
2400449a:	68f8      	ldr	r0, [r7, #12]
2400449c:	f7ff feec 	bl	24004278 <HAL_MDMA_Abort>
            - Clear all transfer flags
            - Unlock
            - Set the State
        */

        return HAL_ERROR;
240044a0:	2301      	movs	r3, #1
240044a2:	e031      	b.n	24004508 <HAL_MDMA_PollForTransfer+0x18c>
  while(__HAL_MDMA_GET_FLAG(hmdma, levelFlag) == 0U)
240044a4:	68fb      	ldr	r3, [r7, #12]
240044a6:	681b      	ldr	r3, [r3, #0]
240044a8:	681a      	ldr	r2, [r3, #0]
240044aa:	69fb      	ldr	r3, [r7, #28]
240044ac:	4013      	ands	r3, r2
240044ae:	2b00      	cmp	r3, #0
240044b0:	d090      	beq.n	240043d4 <HAL_MDMA_PollForTransfer+0x58>
      }
    }
  }

  /* Clear the transfer level flag */
  if(CompleteLevel == HAL_MDMA_BUFFER_TRANSFER)
240044b2:	7afb      	ldrb	r3, [r7, #11]
240044b4:	2b01      	cmp	r3, #1
240044b6:	d104      	bne.n	240044c2 <HAL_MDMA_PollForTransfer+0x146>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
240044b8:	68fb      	ldr	r3, [r7, #12]
240044ba:	681b      	ldr	r3, [r3, #0]
240044bc:	2210      	movs	r2, #16
240044be:	605a      	str	r2, [r3, #4]
240044c0:	e021      	b.n	24004506 <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_BLOCK_TRANSFER)
240044c2:	7afb      	ldrb	r3, [r7, #11]
240044c4:	2b02      	cmp	r3, #2
240044c6:	d104      	bne.n	240044d2 <HAL_MDMA_PollForTransfer+0x156>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT));
240044c8:	68fb      	ldr	r3, [r7, #12]
240044ca:	681b      	ldr	r3, [r3, #0]
240044cc:	2218      	movs	r2, #24
240044ce:	605a      	str	r2, [r3, #4]
240044d0:	e019      	b.n	24004506 <HAL_MDMA_PollForTransfer+0x18a>

  }
  else if(CompleteLevel == HAL_MDMA_REPEAT_BLOCK_TRANSFER)
240044d2:	7afb      	ldrb	r3, [r7, #11]
240044d4:	2b03      	cmp	r3, #3
240044d6:	d104      	bne.n	240044e2 <HAL_MDMA_PollForTransfer+0x166>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BFTC | MDMA_FLAG_BT | MDMA_FLAG_BRT));
240044d8:	68fb      	ldr	r3, [r7, #12]
240044da:	681b      	ldr	r3, [r3, #0]
240044dc:	221c      	movs	r2, #28
240044de:	605a      	str	r2, [r3, #4]
240044e0:	e011      	b.n	24004506 <HAL_MDMA_PollForTransfer+0x18a>
  }
  else if(CompleteLevel == HAL_MDMA_FULL_TRANSFER)
240044e2:	7afb      	ldrb	r3, [r7, #11]
240044e4:	2b00      	cmp	r3, #0
240044e6:	d10c      	bne.n	24004502 <HAL_MDMA_PollForTransfer+0x186>
  {
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC | MDMA_FLAG_CTC));
240044e8:	68fb      	ldr	r3, [r7, #12]
240044ea:	681b      	ldr	r3, [r3, #0]
240044ec:	221e      	movs	r2, #30
240044ee:	605a      	str	r2, [r3, #4]

    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
240044f0:	68fb      	ldr	r3, [r7, #12]
240044f2:	2200      	movs	r2, #0
240044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hmdma->State = HAL_MDMA_STATE_READY;
240044f8:	68fb      	ldr	r3, [r7, #12]
240044fa:	2201      	movs	r2, #1
240044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
24004500:	e001      	b.n	24004506 <HAL_MDMA_PollForTransfer+0x18a>
  }
  else
  {
    return HAL_ERROR;
24004502:	2301      	movs	r3, #1
24004504:	e000      	b.n	24004508 <HAL_MDMA_PollForTransfer+0x18c>
  }

  return HAL_OK;
24004506:	2300      	movs	r3, #0
}
24004508:	4618      	mov	r0, r3
2400450a:	3720      	adds	r7, #32
2400450c:	46bd      	mov	sp, r7
2400450e:	bd80      	pop	{r7, pc}

24004510 <HAL_MDMA_GenerateSWRequest>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_GenerateSWRequest(MDMA_HandleTypeDef *hmdma)
{
24004510:	b480      	push	{r7}
24004512:	b085      	sub	sp, #20
24004514:	af00      	add	r7, sp, #0
24004516:	6078      	str	r0, [r7, #4]
  uint32_t request_mode;

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
24004518:	687b      	ldr	r3, [r7, #4]
2400451a:	2b00      	cmp	r3, #0
2400451c:	d101      	bne.n	24004522 <HAL_MDMA_GenerateSWRequest+0x12>
  {
    return HAL_ERROR;
2400451e:	2301      	movs	r3, #1
24004520:	e02a      	b.n	24004578 <HAL_MDMA_GenerateSWRequest+0x68>
  }

  /* Get the softawre request mode */
  request_mode = hmdma->Instance->CTCR & MDMA_CTCR_SWRM;
24004522:	687b      	ldr	r3, [r7, #4]
24004524:	681b      	ldr	r3, [r3, #0]
24004526:	691b      	ldr	r3, [r3, #16]
24004528:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
2400452c:	60fb      	str	r3, [r7, #12]

  if((hmdma->Instance->CCR &  MDMA_CCR_EN) == 0U)
2400452e:	687b      	ldr	r3, [r7, #4]
24004530:	681b      	ldr	r3, [r3, #0]
24004532:	68db      	ldr	r3, [r3, #12]
24004534:	f003 0301 	and.w	r3, r3, #1
24004538:	2b00      	cmp	r3, #0
2400453a:	d104      	bne.n	24004546 <HAL_MDMA_GenerateSWRequest+0x36>
  {
    /* if no Transfer on going (MDMA enable bit not set) retrun error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
2400453c:	687b      	ldr	r3, [r7, #4]
2400453e:	2280      	movs	r2, #128	; 0x80
24004540:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
24004542:	2301      	movs	r3, #1
24004544:	e018      	b.n	24004578 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else if(((hmdma->Instance->CISR &  MDMA_CISR_CRQA) != 0U) || (request_mode == 0U))
24004546:	687b      	ldr	r3, [r7, #4]
24004548:	681b      	ldr	r3, [r3, #0]
2400454a:	681b      	ldr	r3, [r3, #0]
2400454c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24004550:	2b00      	cmp	r3, #0
24004552:	d102      	bne.n	2400455a <HAL_MDMA_GenerateSWRequest+0x4a>
24004554:	68fb      	ldr	r3, [r7, #12]
24004556:	2b00      	cmp	r3, #0
24004558:	d105      	bne.n	24004566 <HAL_MDMA_GenerateSWRequest+0x56>
  {
    /* if an MDMA ongoing request has not yet end or if request mode is not SW request retrun error */
    hmdma->ErrorCode = HAL_MDMA_ERROR_BUSY;
2400455a:	687b      	ldr	r3, [r7, #4]
2400455c:	f44f 7280 	mov.w	r2, #256	; 0x100
24004560:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
24004562:	2301      	movs	r3, #1
24004564:	e008      	b.n	24004578 <HAL_MDMA_GenerateSWRequest+0x68>
  }
  else
  {
    /* Set the SW request bit to activate the request on the Channel */
    hmdma->Instance->CCR |= MDMA_CCR_SWRQ;
24004566:	687b      	ldr	r3, [r7, #4]
24004568:	681b      	ldr	r3, [r3, #0]
2400456a:	68da      	ldr	r2, [r3, #12]
2400456c:	687b      	ldr	r3, [r7, #4]
2400456e:	681b      	ldr	r3, [r3, #0]
24004570:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
24004574:	60da      	str	r2, [r3, #12]

    return HAL_OK;
24004576:	2300      	movs	r3, #0
  }
}
24004578:	4618      	mov	r0, r3
2400457a:	3714      	adds	r7, #20
2400457c:	46bd      	mov	sp, r7
2400457e:	f85d 7b04 	ldr.w	r7, [sp], #4
24004582:	4770      	bx	lr

24004584 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
24004584:	b580      	push	{r7, lr}
24004586:	b086      	sub	sp, #24
24004588:	af00      	add	r7, sp, #0
2400458a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
2400458c:	2300      	movs	r3, #0
2400458e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
24004590:	4b9a      	ldr	r3, [pc, #616]	; (240047fc <HAL_MDMA_IRQHandler+0x278>)
24004592:	681b      	ldr	r3, [r3, #0]
24004594:	4a9a      	ldr	r2, [pc, #616]	; (24004800 <HAL_MDMA_IRQHandler+0x27c>)
24004596:	fba2 2303 	umull	r2, r3, r2, r3
2400459a:	0a9b      	lsrs	r3, r3, #10
2400459c:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
2400459e:	687b      	ldr	r3, [r7, #4]
240045a0:	681b      	ldr	r3, [r3, #0]
240045a2:	461a      	mov	r2, r3
240045a4:	4b97      	ldr	r3, [pc, #604]	; (24004804 <HAL_MDMA_IRQHandler+0x280>)
240045a6:	4413      	add	r3, r2
240045a8:	099b      	lsrs	r3, r3, #6
240045aa:	f003 031f 	and.w	r3, r3, #31
240045ae:	2201      	movs	r2, #1
240045b0:	fa02 f303 	lsl.w	r3, r2, r3
240045b4:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
240045b6:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
240045ba:	681a      	ldr	r2, [r3, #0]
240045bc:	693b      	ldr	r3, [r7, #16]
240045be:	4013      	ands	r3, r2
240045c0:	2b00      	cmp	r3, #0
240045c2:	f000 812e 	beq.w	24004822 <HAL_MDMA_IRQHandler+0x29e>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
240045c6:	687b      	ldr	r3, [r7, #4]
240045c8:	681b      	ldr	r3, [r3, #0]
240045ca:	681b      	ldr	r3, [r3, #0]
240045cc:	f003 0301 	and.w	r3, r3, #1
240045d0:	2b00      	cmp	r3, #0
240045d2:	d054      	beq.n	2400467e <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
240045d4:	687b      	ldr	r3, [r7, #4]
240045d6:	681b      	ldr	r3, [r3, #0]
240045d8:	68db      	ldr	r3, [r3, #12]
240045da:	f003 0302 	and.w	r3, r3, #2
240045de:	2b00      	cmp	r3, #0
240045e0:	d04d      	beq.n	2400467e <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
240045e2:	687b      	ldr	r3, [r7, #4]
240045e4:	681b      	ldr	r3, [r3, #0]
240045e6:	68da      	ldr	r2, [r3, #12]
240045e8:	687b      	ldr	r3, [r7, #4]
240045ea:	681b      	ldr	r3, [r3, #0]
240045ec:	f022 0202 	bic.w	r2, r2, #2
240045f0:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
240045f2:	687b      	ldr	r3, [r7, #4]
240045f4:	681b      	ldr	r3, [r3, #0]
240045f6:	689b      	ldr	r3, [r3, #8]
240045f8:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
240045fa:	68fb      	ldr	r3, [r7, #12]
240045fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
24004600:	2b00      	cmp	r3, #0
24004602:	d106      	bne.n	24004612 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
24004604:	687b      	ldr	r3, [r7, #4]
24004606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24004608:	f043 0201 	orr.w	r2, r3, #1
2400460c:	687b      	ldr	r3, [r7, #4]
2400460e:	669a      	str	r2, [r3, #104]	; 0x68
24004610:	e005      	b.n	2400461e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
24004612:	687b      	ldr	r3, [r7, #4]
24004614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24004616:	f043 0202 	orr.w	r2, r3, #2
2400461a:	687b      	ldr	r3, [r7, #4]
2400461c:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
2400461e:	68fb      	ldr	r3, [r7, #12]
24004620:	f403 7300 	and.w	r3, r3, #512	; 0x200
24004624:	2b00      	cmp	r3, #0
24004626:	d005      	beq.n	24004634 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
24004628:	687b      	ldr	r3, [r7, #4]
2400462a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400462c:	f043 0204 	orr.w	r2, r3, #4
24004630:	687b      	ldr	r3, [r7, #4]
24004632:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
24004634:	68fb      	ldr	r3, [r7, #12]
24004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400463a:	2b00      	cmp	r3, #0
2400463c:	d005      	beq.n	2400464a <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
2400463e:	687b      	ldr	r3, [r7, #4]
24004640:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24004642:	f043 0208 	orr.w	r2, r3, #8
24004646:	687b      	ldr	r3, [r7, #4]
24004648:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
2400464a:	68fb      	ldr	r3, [r7, #12]
2400464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
24004650:	2b00      	cmp	r3, #0
24004652:	d005      	beq.n	24004660 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
24004654:	687b      	ldr	r3, [r7, #4]
24004656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24004658:	f043 0210 	orr.w	r2, r3, #16
2400465c:	687b      	ldr	r3, [r7, #4]
2400465e:	669a      	str	r2, [r3, #104]	; 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
24004660:	68fb      	ldr	r3, [r7, #12]
24004662:	f403 6300 	and.w	r3, r3, #2048	; 0x800
24004666:	2b00      	cmp	r3, #0
24004668:	d005      	beq.n	24004676 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
2400466a:	687b      	ldr	r3, [r7, #4]
2400466c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2400466e:	f043 0220 	orr.w	r2, r3, #32
24004672:	687b      	ldr	r3, [r7, #4]
24004674:	669a      	str	r2, [r3, #104]	; 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
24004676:	687b      	ldr	r3, [r7, #4]
24004678:	681b      	ldr	r3, [r3, #0]
2400467a:	2201      	movs	r2, #1
2400467c:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
2400467e:	687b      	ldr	r3, [r7, #4]
24004680:	681b      	ldr	r3, [r3, #0]
24004682:	681b      	ldr	r3, [r3, #0]
24004684:	f003 0310 	and.w	r3, r3, #16
24004688:	2b00      	cmp	r3, #0
2400468a:	d012      	beq.n	240046b2 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
2400468c:	687b      	ldr	r3, [r7, #4]
2400468e:	681b      	ldr	r3, [r3, #0]
24004690:	68db      	ldr	r3, [r3, #12]
24004692:	f003 0320 	and.w	r3, r3, #32
24004696:	2b00      	cmp	r3, #0
24004698:	d00b      	beq.n	240046b2 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
2400469a:	687b      	ldr	r3, [r7, #4]
2400469c:	681b      	ldr	r3, [r3, #0]
2400469e:	2210      	movs	r2, #16
240046a0:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
240046a2:	687b      	ldr	r3, [r7, #4]
240046a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240046a6:	2b00      	cmp	r3, #0
240046a8:	d003      	beq.n	240046b2 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
240046aa:	687b      	ldr	r3, [r7, #4]
240046ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240046ae:	6878      	ldr	r0, [r7, #4]
240046b0:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
240046b2:	687b      	ldr	r3, [r7, #4]
240046b4:	681b      	ldr	r3, [r3, #0]
240046b6:	681b      	ldr	r3, [r3, #0]
240046b8:	f003 0308 	and.w	r3, r3, #8
240046bc:	2b00      	cmp	r3, #0
240046be:	d012      	beq.n	240046e6 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
240046c0:	687b      	ldr	r3, [r7, #4]
240046c2:	681b      	ldr	r3, [r3, #0]
240046c4:	68db      	ldr	r3, [r3, #12]
240046c6:	f003 0310 	and.w	r3, r3, #16
240046ca:	2b00      	cmp	r3, #0
240046cc:	d00b      	beq.n	240046e6 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
240046ce:	687b      	ldr	r3, [r7, #4]
240046d0:	681b      	ldr	r3, [r3, #0]
240046d2:	2208      	movs	r2, #8
240046d4:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
240046d6:	687b      	ldr	r3, [r7, #4]
240046d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240046da:	2b00      	cmp	r3, #0
240046dc:	d003      	beq.n	240046e6 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
240046de:	687b      	ldr	r3, [r7, #4]
240046e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240046e2:	6878      	ldr	r0, [r7, #4]
240046e4:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
240046e6:	687b      	ldr	r3, [r7, #4]
240046e8:	681b      	ldr	r3, [r3, #0]
240046ea:	681b      	ldr	r3, [r3, #0]
240046ec:	f003 0304 	and.w	r3, r3, #4
240046f0:	2b00      	cmp	r3, #0
240046f2:	d012      	beq.n	2400471a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
240046f4:	687b      	ldr	r3, [r7, #4]
240046f6:	681b      	ldr	r3, [r3, #0]
240046f8:	68db      	ldr	r3, [r3, #12]
240046fa:	f003 0308 	and.w	r3, r3, #8
240046fe:	2b00      	cmp	r3, #0
24004700:	d00b      	beq.n	2400471a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
24004702:	687b      	ldr	r3, [r7, #4]
24004704:	681b      	ldr	r3, [r3, #0]
24004706:	2204      	movs	r2, #4
24004708:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
2400470a:	687b      	ldr	r3, [r7, #4]
2400470c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400470e:	2b00      	cmp	r3, #0
24004710:	d003      	beq.n	2400471a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
24004712:	687b      	ldr	r3, [r7, #4]
24004714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24004716:	6878      	ldr	r0, [r7, #4]
24004718:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
2400471a:	687b      	ldr	r3, [r7, #4]
2400471c:	681b      	ldr	r3, [r3, #0]
2400471e:	681b      	ldr	r3, [r3, #0]
24004720:	f003 0302 	and.w	r3, r3, #2
24004724:	2b00      	cmp	r3, #0
24004726:	d039      	beq.n	2400479c <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
24004728:	687b      	ldr	r3, [r7, #4]
2400472a:	681b      	ldr	r3, [r3, #0]
2400472c:	68db      	ldr	r3, [r3, #12]
2400472e:	f003 0304 	and.w	r3, r3, #4
24004732:	2b00      	cmp	r3, #0
24004734:	d032      	beq.n	2400479c <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
24004736:	687b      	ldr	r3, [r7, #4]
24004738:	681b      	ldr	r3, [r3, #0]
2400473a:	68da      	ldr	r2, [r3, #12]
2400473c:	687b      	ldr	r3, [r7, #4]
2400473e:	681b      	ldr	r3, [r3, #0]
24004740:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
24004744:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
24004746:	687b      	ldr	r3, [r7, #4]
24004748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400474c:	b2db      	uxtb	r3, r3
2400474e:	2b04      	cmp	r3, #4
24004750:	d110      	bne.n	24004774 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
24004752:	687b      	ldr	r3, [r7, #4]
24004754:	2200      	movs	r2, #0
24004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
2400475a:	687b      	ldr	r3, [r7, #4]
2400475c:	2201      	movs	r2, #1
2400475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        if(hmdma->XferAbortCallback != NULL)
24004762:	687b      	ldr	r3, [r7, #4]
24004764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24004766:	2b00      	cmp	r3, #0
24004768:	d05d      	beq.n	24004826 <HAL_MDMA_IRQHandler+0x2a2>
        {
          hmdma->XferAbortCallback(hmdma);
2400476a:	687b      	ldr	r3, [r7, #4]
2400476c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400476e:	6878      	ldr	r0, [r7, #4]
24004770:	4798      	blx	r3
        }
        return;
24004772:	e058      	b.n	24004826 <HAL_MDMA_IRQHandler+0x2a2>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
24004774:	687b      	ldr	r3, [r7, #4]
24004776:	681b      	ldr	r3, [r3, #0]
24004778:	2202      	movs	r2, #2
2400477a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
2400477c:	687b      	ldr	r3, [r7, #4]
2400477e:	2200      	movs	r2, #0
24004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
24004784:	687b      	ldr	r3, [r7, #4]
24004786:	2201      	movs	r2, #1
24004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if(hmdma->XferCpltCallback != NULL)
2400478c:	687b      	ldr	r3, [r7, #4]
2400478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24004790:	2b00      	cmp	r3, #0
24004792:	d003      	beq.n	2400479c <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
24004794:	687b      	ldr	r3, [r7, #4]
24004796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24004798:	6878      	ldr	r0, [r7, #4]
2400479a:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
2400479c:	687b      	ldr	r3, [r7, #4]
2400479e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
240047a0:	2b00      	cmp	r3, #0
240047a2:	d041      	beq.n	24004828 <HAL_MDMA_IRQHandler+0x2a4>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
240047a4:	687b      	ldr	r3, [r7, #4]
240047a6:	2204      	movs	r2, #4
240047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
240047ac:	687b      	ldr	r3, [r7, #4]
240047ae:	681b      	ldr	r3, [r3, #0]
240047b0:	68da      	ldr	r2, [r3, #12]
240047b2:	687b      	ldr	r3, [r7, #4]
240047b4:	681b      	ldr	r3, [r3, #0]
240047b6:	f022 0201 	bic.w	r2, r2, #1
240047ba:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
240047bc:	68bb      	ldr	r3, [r7, #8]
240047be:	3301      	adds	r3, #1
240047c0:	60bb      	str	r3, [r7, #8]
240047c2:	697a      	ldr	r2, [r7, #20]
240047c4:	429a      	cmp	r2, r3
240047c6:	d307      	bcc.n	240047d8 <HAL_MDMA_IRQHandler+0x254>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
240047c8:	687b      	ldr	r3, [r7, #4]
240047ca:	681b      	ldr	r3, [r3, #0]
240047cc:	68db      	ldr	r3, [r3, #12]
240047ce:	f003 0301 	and.w	r3, r3, #1
240047d2:	2b00      	cmp	r3, #0
240047d4:	d1f2      	bne.n	240047bc <HAL_MDMA_IRQHandler+0x238>
240047d6:	e000      	b.n	240047da <HAL_MDMA_IRQHandler+0x256>
        break;
240047d8:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
240047da:	687b      	ldr	r3, [r7, #4]
240047dc:	2200      	movs	r2, #0
240047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
240047e2:	687b      	ldr	r3, [r7, #4]
240047e4:	681b      	ldr	r3, [r3, #0]
240047e6:	68db      	ldr	r3, [r3, #12]
240047e8:	f003 0301 	and.w	r3, r3, #1
240047ec:	2b00      	cmp	r3, #0
240047ee:	d00b      	beq.n	24004808 <HAL_MDMA_IRQHandler+0x284>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
240047f0:	687b      	ldr	r3, [r7, #4]
240047f2:	2203      	movs	r2, #3
240047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
240047f8:	e00a      	b.n	24004810 <HAL_MDMA_IRQHandler+0x28c>
240047fa:	bf00      	nop
240047fc:	240004a4 	.word	0x240004a4
24004800:	1b4e81b5 	.word	0x1b4e81b5
24004804:	adffffc0 	.word	0xadffffc0
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
24004808:	687b      	ldr	r3, [r7, #4]
2400480a:	2201      	movs	r2, #1
2400480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
24004810:	687b      	ldr	r3, [r7, #4]
24004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24004814:	2b00      	cmp	r3, #0
24004816:	d007      	beq.n	24004828 <HAL_MDMA_IRQHandler+0x2a4>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
24004818:	687b      	ldr	r3, [r7, #4]
2400481a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400481c:	6878      	ldr	r0, [r7, #4]
2400481e:	4798      	blx	r3
24004820:	e002      	b.n	24004828 <HAL_MDMA_IRQHandler+0x2a4>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
24004822:	bf00      	nop
24004824:	e000      	b.n	24004828 <HAL_MDMA_IRQHandler+0x2a4>
        return;
24004826:	bf00      	nop
    }
  }
}
24004828:	3718      	adds	r7, #24
2400482a:	46bd      	mov	sp, r7
2400482c:	bd80      	pop	{r7, pc}

2400482e <HAL_MDMA_GetState>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL state
  */
HAL_MDMA_StateTypeDef HAL_MDMA_GetState(MDMA_HandleTypeDef *hmdma)
{
2400482e:	b480      	push	{r7}
24004830:	b083      	sub	sp, #12
24004832:	af00      	add	r7, sp, #0
24004834:	6078      	str	r0, [r7, #4]
  return hmdma->State;
24004836:	687b      	ldr	r3, [r7, #4]
24004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
2400483c:	b2db      	uxtb	r3, r3
}
2400483e:	4618      	mov	r0, r3
24004840:	370c      	adds	r7, #12
24004842:	46bd      	mov	sp, r7
24004844:	f85d 7b04 	ldr.w	r7, [sp], #4
24004848:	4770      	bx	lr

2400484a <HAL_MDMA_GetError>:
  * @param  hmdma : pointer to a MDMA_HandleTypeDef structure that contains
  *              the configuration information for the specified MDMA Channel.
  * @retval MDMA Error Code
  */
uint32_t HAL_MDMA_GetError(MDMA_HandleTypeDef *hmdma)
{
2400484a:	b480      	push	{r7}
2400484c:	b083      	sub	sp, #12
2400484e:	af00      	add	r7, sp, #0
24004850:	6078      	str	r0, [r7, #4]
  return hmdma->ErrorCode;
24004852:	687b      	ldr	r3, [r7, #4]
24004854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
24004856:	4618      	mov	r0, r3
24004858:	370c      	adds	r7, #12
2400485a:	46bd      	mov	sp, r7
2400485c:	f85d 7b04 	ldr.w	r7, [sp], #4
24004860:	4770      	bx	lr

24004862 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transfered
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
24004862:	b480      	push	{r7}
24004864:	b087      	sub	sp, #28
24004866:	af00      	add	r7, sp, #0
24004868:	60f8      	str	r0, [r7, #12]
2400486a:	60b9      	str	r1, [r7, #8]
2400486c:	607a      	str	r2, [r7, #4]
2400486e:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
24004870:	68fb      	ldr	r3, [r7, #12]
24004872:	681b      	ldr	r3, [r3, #0]
24004874:	695a      	ldr	r2, [r3, #20]
24004876:	4b32      	ldr	r3, [pc, #200]	; (24004940 <MDMA_SetConfig+0xde>)
24004878:	4013      	ands	r3, r2
2400487a:	683a      	ldr	r2, [r7, #0]
2400487c:	f3c2 0110 	ubfx	r1, r2, #0, #17
24004880:	68fa      	ldr	r2, [r7, #12]
24004882:	6812      	ldr	r2, [r2, #0]
24004884:	430b      	orrs	r3, r1
24004886:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
24004888:	68fb      	ldr	r3, [r7, #12]
2400488a:	681b      	ldr	r3, [r3, #0]
2400488c:	695b      	ldr	r3, [r3, #20]
2400488e:	f3c3 0113 	ubfx	r1, r3, #0, #20
24004892:	6a3b      	ldr	r3, [r7, #32]
24004894:	3b01      	subs	r3, #1
24004896:	051a      	lsls	r2, r3, #20
24004898:	68fb      	ldr	r3, [r7, #12]
2400489a:	681b      	ldr	r3, [r3, #0]
2400489c:	430a      	orrs	r2, r1
2400489e:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
240048a0:	68fb      	ldr	r3, [r7, #12]
240048a2:	681b      	ldr	r3, [r3, #0]
240048a4:	221f      	movs	r2, #31
240048a6:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
240048a8:	68fb      	ldr	r3, [r7, #12]
240048aa:	681b      	ldr	r3, [r3, #0]
240048ac:	687a      	ldr	r2, [r7, #4]
240048ae:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
240048b0:	68fb      	ldr	r3, [r7, #12]
240048b2:	681b      	ldr	r3, [r3, #0]
240048b4:	68ba      	ldr	r2, [r7, #8]
240048b6:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
240048b8:	68bb      	ldr	r3, [r7, #8]
240048ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
240048be:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
240048c0:	697b      	ldr	r3, [r7, #20]
240048c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240048c6:	d002      	beq.n	240048ce <MDMA_SetConfig+0x6c>
240048c8:	697b      	ldr	r3, [r7, #20]
240048ca:	2b00      	cmp	r3, #0
240048cc:	d108      	bne.n	240048e0 <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
240048ce:	68fb      	ldr	r3, [r7, #12]
240048d0:	681b      	ldr	r3, [r3, #0]
240048d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240048d4:	68fb      	ldr	r3, [r7, #12]
240048d6:	681b      	ldr	r3, [r3, #0]
240048d8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240048dc:	629a      	str	r2, [r3, #40]	; 0x28
240048de:	e007      	b.n	240048f0 <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
240048e0:	68fb      	ldr	r3, [r7, #12]
240048e2:	681b      	ldr	r3, [r3, #0]
240048e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240048e6:	68fb      	ldr	r3, [r7, #12]
240048e8:	681b      	ldr	r3, [r3, #0]
240048ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
240048ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
240048f0:	687b      	ldr	r3, [r7, #4]
240048f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
240048f6:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
240048f8:	697b      	ldr	r3, [r7, #20]
240048fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240048fe:	d002      	beq.n	24004906 <MDMA_SetConfig+0xa4>
24004900:	697b      	ldr	r3, [r7, #20]
24004902:	2b00      	cmp	r3, #0
24004904:	d108      	bne.n	24004918 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
24004906:	68fb      	ldr	r3, [r7, #12]
24004908:	681b      	ldr	r3, [r3, #0]
2400490a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2400490c:	68fb      	ldr	r3, [r7, #12]
2400490e:	681b      	ldr	r3, [r3, #0]
24004910:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24004914:	629a      	str	r2, [r3, #40]	; 0x28
24004916:	e007      	b.n	24004928 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
24004918:	68fb      	ldr	r3, [r7, #12]
2400491a:	681b      	ldr	r3, [r3, #0]
2400491c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2400491e:	68fb      	ldr	r3, [r7, #12]
24004920:	681b      	ldr	r3, [r3, #0]
24004922:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
24004926:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
24004928:	68fb      	ldr	r3, [r7, #12]
2400492a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
2400492c:	68fb      	ldr	r3, [r7, #12]
2400492e:	681b      	ldr	r3, [r3, #0]
24004930:	625a      	str	r2, [r3, #36]	; 0x24
}
24004932:	bf00      	nop
24004934:	371c      	adds	r7, #28
24004936:	46bd      	mov	sp, r7
24004938:	f85d 7b04 	ldr.w	r7, [sp], #4
2400493c:	4770      	bx	lr
2400493e:	bf00      	nop
24004940:	fffe0000 	.word	0xfffe0000

24004944 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
24004944:	b480      	push	{r7}
24004946:	b085      	sub	sp, #20
24004948:	af00      	add	r7, sp, #0
2400494a:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
2400494c:	687b      	ldr	r3, [r7, #4]
2400494e:	68d9      	ldr	r1, [r3, #12]
24004950:	687b      	ldr	r3, [r7, #4]
24004952:	691a      	ldr	r2, [r3, #16]
24004954:	687b      	ldr	r3, [r7, #4]
24004956:	681b      	ldr	r3, [r3, #0]
24004958:	430a      	orrs	r2, r1
2400495a:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
2400495c:	687b      	ldr	r3, [r7, #4]
2400495e:	695a      	ldr	r2, [r3, #20]
24004960:	687b      	ldr	r3, [r7, #4]
24004962:	699b      	ldr	r3, [r3, #24]
24004964:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
24004966:	687b      	ldr	r3, [r7, #4]
24004968:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
2400496a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
2400496c:	687b      	ldr	r3, [r7, #4]
2400496e:	6a1b      	ldr	r3, [r3, #32]
24004970:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24004972:	687b      	ldr	r3, [r7, #4]
24004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
24004976:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24004978:	687b      	ldr	r3, [r7, #4]
2400497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400497c:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
2400497e:	687b      	ldr	r3, [r7, #4]
24004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
24004982:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24004984:	687b      	ldr	r3, [r7, #4]
24004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24004988:	3b01      	subs	r3, #1
2400498a:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
2400498c:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
24004990:	687b      	ldr	r3, [r7, #4]
24004992:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
24004994:	687b      	ldr	r3, [r7, #4]
24004996:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
24004998:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
2400499a:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
2400499c:	687b      	ldr	r3, [r7, #4]
2400499e:	685b      	ldr	r3, [r3, #4]
240049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
240049a4:	d107      	bne.n	240049b6 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
240049a6:	687b      	ldr	r3, [r7, #4]
240049a8:	681b      	ldr	r3, [r3, #0]
240049aa:	691a      	ldr	r2, [r3, #16]
240049ac:	687b      	ldr	r3, [r7, #4]
240049ae:	681b      	ldr	r3, [r3, #0]
240049b0:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
240049b4:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
240049b6:	687b      	ldr	r3, [r7, #4]
240049b8:	681b      	ldr	r3, [r3, #0]
240049ba:	2200      	movs	r2, #0
240049bc:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
240049be:	687b      	ldr	r3, [r7, #4]
240049c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240049c2:	2b00      	cmp	r3, #0
240049c4:	da11      	bge.n	240049ea <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
240049c6:	687b      	ldr	r3, [r7, #4]
240049c8:	681b      	ldr	r3, [r3, #0]
240049ca:	695a      	ldr	r2, [r3, #20]
240049cc:	687b      	ldr	r3, [r7, #4]
240049ce:	681b      	ldr	r3, [r3, #0]
240049d0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
240049d4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
240049d6:	687b      	ldr	r3, [r7, #4]
240049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240049da:	425b      	negs	r3, r3
240049dc:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
240049de:	687b      	ldr	r3, [r7, #4]
240049e0:	681b      	ldr	r3, [r3, #0]
240049e2:	68fa      	ldr	r2, [r7, #12]
240049e4:	b292      	uxth	r2, r2
240049e6:	621a      	str	r2, [r3, #32]
240049e8:	e006      	b.n	240049f8 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
240049ea:	687b      	ldr	r3, [r7, #4]
240049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240049ee:	461a      	mov	r2, r3
240049f0:	687b      	ldr	r3, [r7, #4]
240049f2:	681b      	ldr	r3, [r3, #0]
240049f4:	b292      	uxth	r2, r2
240049f6:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
240049f8:	687b      	ldr	r3, [r7, #4]
240049fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240049fc:	2b00      	cmp	r3, #0
240049fe:	da15      	bge.n	24004a2c <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
24004a00:	687b      	ldr	r3, [r7, #4]
24004a02:	681b      	ldr	r3, [r3, #0]
24004a04:	695a      	ldr	r2, [r3, #20]
24004a06:	687b      	ldr	r3, [r7, #4]
24004a08:	681b      	ldr	r3, [r3, #0]
24004a0a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
24004a0e:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
24004a10:	687b      	ldr	r3, [r7, #4]
24004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24004a14:	425b      	negs	r3, r3
24004a16:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24004a18:	687b      	ldr	r3, [r7, #4]
24004a1a:	681b      	ldr	r3, [r3, #0]
24004a1c:	6a19      	ldr	r1, [r3, #32]
24004a1e:	68fb      	ldr	r3, [r7, #12]
24004a20:	041a      	lsls	r2, r3, #16
24004a22:	687b      	ldr	r3, [r7, #4]
24004a24:	681b      	ldr	r3, [r3, #0]
24004a26:	430a      	orrs	r2, r1
24004a28:	621a      	str	r2, [r3, #32]
24004a2a:	e009      	b.n	24004a40 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
24004a2c:	687b      	ldr	r3, [r7, #4]
24004a2e:	681b      	ldr	r3, [r3, #0]
24004a30:	6a19      	ldr	r1, [r3, #32]
24004a32:	687b      	ldr	r3, [r7, #4]
24004a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24004a36:	041a      	lsls	r2, r3, #16
24004a38:	687b      	ldr	r3, [r7, #4]
24004a3a:	681b      	ldr	r3, [r3, #0]
24004a3c:	430a      	orrs	r2, r1
24004a3e:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
24004a40:	687b      	ldr	r3, [r7, #4]
24004a42:	685b      	ldr	r3, [r3, #4]
24004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24004a48:	d006      	beq.n	24004a58 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
24004a4a:	687b      	ldr	r3, [r7, #4]
24004a4c:	685a      	ldr	r2, [r3, #4]
24004a4e:	687b      	ldr	r3, [r7, #4]
24004a50:	681b      	ldr	r3, [r3, #0]
24004a52:	b2d2      	uxtb	r2, r2
24004a54:	629a      	str	r2, [r3, #40]	; 0x28
24004a56:	e003      	b.n	24004a60 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
24004a58:	687b      	ldr	r3, [r7, #4]
24004a5a:	681b      	ldr	r3, [r3, #0]
24004a5c:	2200      	movs	r2, #0
24004a5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
24004a60:	687b      	ldr	r3, [r7, #4]
24004a62:	681b      	ldr	r3, [r3, #0]
24004a64:	2200      	movs	r2, #0
24004a66:	625a      	str	r2, [r3, #36]	; 0x24
}
24004a68:	bf00      	nop
24004a6a:	3714      	adds	r7, #20
24004a6c:	46bd      	mov	sp, r7
24004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
24004a72:	4770      	bx	lr

24004a74 <HAL_PWR_DeInit>:
  *         The prototype is kept just to maintain compatibility with other
  *         products.
  * @retval None.
  */
void HAL_PWR_DeInit (void)
{
24004a74:	b480      	push	{r7}
24004a76:	af00      	add	r7, sp, #0
}
24004a78:	bf00      	nop
24004a7a:	46bd      	mov	sp, r7
24004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
24004a80:	4770      	bx	lr

24004a82 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
24004a82:	b480      	push	{r7}
24004a84:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
24004a86:	4b05      	ldr	r3, [pc, #20]	; (24004a9c <HAL_PWR_EnableBkUpAccess+0x1a>)
24004a88:	681b      	ldr	r3, [r3, #0]
24004a8a:	4a04      	ldr	r2, [pc, #16]	; (24004a9c <HAL_PWR_EnableBkUpAccess+0x1a>)
24004a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24004a90:	6013      	str	r3, [r2, #0]
}
24004a92:	bf00      	nop
24004a94:	46bd      	mov	sp, r7
24004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
24004a9a:	4770      	bx	lr
24004a9c:	58024800 	.word	0x58024800

24004aa0 <HAL_PWR_DisableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_DisableBkUpAccess (void)
{
24004aa0:	b480      	push	{r7}
24004aa2:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
  CLEAR_BIT (PWR->CR1, PWR_CR1_DBP);
24004aa4:	4b05      	ldr	r3, [pc, #20]	; (24004abc <HAL_PWR_DisableBkUpAccess+0x1c>)
24004aa6:	681b      	ldr	r3, [r3, #0]
24004aa8:	4a04      	ldr	r2, [pc, #16]	; (24004abc <HAL_PWR_DisableBkUpAccess+0x1c>)
24004aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24004aae:	6013      	str	r3, [r2, #0]
}
24004ab0:	bf00      	nop
24004ab2:	46bd      	mov	sp, r7
24004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
24004ab8:	4770      	bx	lr
24004aba:	bf00      	nop
24004abc:	58024800 	.word	0x58024800

24004ac0 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
24004ac0:	b480      	push	{r7}
24004ac2:	b083      	sub	sp, #12
24004ac4:	af00      	add	r7, sp, #0
24004ac6:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
24004ac8:	687b      	ldr	r3, [r7, #4]
24004aca:	2b00      	cmp	r3, #0
24004acc:	d069      	beq.n	24004ba2 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
24004ace:	4b38      	ldr	r3, [pc, #224]	; (24004bb0 <HAL_PWR_ConfigPVD+0xf0>)
24004ad0:	681b      	ldr	r3, [r3, #0]
24004ad2:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
24004ad6:	687b      	ldr	r3, [r7, #4]
24004ad8:	681b      	ldr	r3, [r3, #0]
24004ada:	4935      	ldr	r1, [pc, #212]	; (24004bb0 <HAL_PWR_ConfigPVD+0xf0>)
24004adc:	4313      	orrs	r3, r2
24004ade:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
24004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24004ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24004ae8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24004aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24004af0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
24004af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24004af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24004afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24004b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24004b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
24004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24004b0c:	681b      	ldr	r3, [r3, #0]
24004b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24004b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24004b16:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
24004b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24004b1c:	685b      	ldr	r3, [r3, #4]
24004b1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24004b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24004b26:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
24004b28:	687b      	ldr	r3, [r7, #4]
24004b2a:	685b      	ldr	r3, [r3, #4]
24004b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24004b30:	2b00      	cmp	r3, #0
24004b32:	d009      	beq.n	24004b48 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
24004b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24004b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
24004b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24004b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24004b44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
24004b48:	687b      	ldr	r3, [r7, #4]
24004b4a:	685b      	ldr	r3, [r3, #4]
24004b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24004b50:	2b00      	cmp	r3, #0
24004b52:	d009      	beq.n	24004b68 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
24004b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24004b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24004b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24004b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24004b64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
24004b68:	687b      	ldr	r3, [r7, #4]
24004b6a:	685b      	ldr	r3, [r3, #4]
24004b6c:	f003 0301 	and.w	r3, r3, #1
24004b70:	2b00      	cmp	r3, #0
24004b72:	d007      	beq.n	24004b84 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
24004b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24004b78:	681b      	ldr	r3, [r3, #0]
24004b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24004b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24004b82:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
24004b84:	687b      	ldr	r3, [r7, #4]
24004b86:	685b      	ldr	r3, [r3, #4]
24004b88:	f003 0302 	and.w	r3, r3, #2
24004b8c:	2b00      	cmp	r3, #0
24004b8e:	d009      	beq.n	24004ba4 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
24004b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24004b94:	685b      	ldr	r3, [r3, #4]
24004b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24004b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24004b9e:	6053      	str	r3, [r2, #4]
24004ba0:	e000      	b.n	24004ba4 <HAL_PWR_ConfigPVD+0xe4>
    return;
24004ba2:	bf00      	nop
  }
}
24004ba4:	370c      	adds	r7, #12
24004ba6:	46bd      	mov	sp, r7
24004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
24004bac:	4770      	bx	lr
24004bae:	bf00      	nop
24004bb0:	58024800 	.word	0x58024800

24004bb4 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
24004bb4:	b480      	push	{r7}
24004bb6:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
24004bb8:	4b05      	ldr	r3, [pc, #20]	; (24004bd0 <HAL_PWR_EnablePVD+0x1c>)
24004bba:	681b      	ldr	r3, [r3, #0]
24004bbc:	4a04      	ldr	r2, [pc, #16]	; (24004bd0 <HAL_PWR_EnablePVD+0x1c>)
24004bbe:	f043 0310 	orr.w	r3, r3, #16
24004bc2:	6013      	str	r3, [r2, #0]
}
24004bc4:	bf00      	nop
24004bc6:	46bd      	mov	sp, r7
24004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
24004bcc:	4770      	bx	lr
24004bce:	bf00      	nop
24004bd0:	58024800 	.word	0x58024800

24004bd4 <HAL_PWR_DisablePVD>:
/**
  * @brief Disable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_DisablePVD (void)
{
24004bd4:	b480      	push	{r7}
24004bd6:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_PVDEN);
24004bd8:	4b05      	ldr	r3, [pc, #20]	; (24004bf0 <HAL_PWR_DisablePVD+0x1c>)
24004bda:	681b      	ldr	r3, [r3, #0]
24004bdc:	4a04      	ldr	r2, [pc, #16]	; (24004bf0 <HAL_PWR_DisablePVD+0x1c>)
24004bde:	f023 0310 	bic.w	r3, r3, #16
24004be2:	6013      	str	r3, [r2, #0]
}
24004be4:	bf00      	nop
24004be6:	46bd      	mov	sp, r7
24004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
24004bec:	4770      	bx	lr
24004bee:	bf00      	nop
24004bf0:	58024800 	.word	0x58024800

24004bf4 <HAL_PWR_EnableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_EnableWakeUpPin (uint32_t WakeUpPinPolarity)
{
24004bf4:	b480      	push	{r7}
24004bf6:	b083      	sub	sp, #12
24004bf8:	af00      	add	r7, sp, #0
24004bfa:	6078      	str	r0, [r7, #4]

  /*
     Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge).
  */
  MODIFY_REG (PWR->WKUPEPR, PWR_EWUP_MASK, WakeUpPinPolarity);
24004bfc:	4b06      	ldr	r3, [pc, #24]	; (24004c18 <HAL_PWR_EnableWakeUpPin+0x24>)
24004bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24004c00:	4b06      	ldr	r3, [pc, #24]	; (24004c1c <HAL_PWR_EnableWakeUpPin+0x28>)
24004c02:	4013      	ands	r3, r2
24004c04:	4904      	ldr	r1, [pc, #16]	; (24004c18 <HAL_PWR_EnableWakeUpPin+0x24>)
24004c06:	687a      	ldr	r2, [r7, #4]
24004c08:	4313      	orrs	r3, r2
24004c0a:	628b      	str	r3, [r1, #40]	; 0x28
}
24004c0c:	bf00      	nop
24004c0e:	370c      	adds	r7, #12
24004c10:	46bd      	mov	sp, r7
24004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
24004c16:	4770      	bx	lr
24004c18:	58024800 	.word	0x58024800
24004c1c:	f000c0c0 	.word	0xf000c0c0

24004c20 <HAL_PWR_DisableWakeUpPin>:
  *         and PWR_WAKEUP_PIN5_LOW are available only for devices that includes
  *         GPIOI port.
  * @retval None.
  */
void HAL_PWR_DisableWakeUpPin (uint32_t WakeUpPinx)
{
24004c20:	b480      	push	{r7}
24004c22:	b083      	sub	sp, #12
24004c24:	af00      	add	r7, sp, #0
24004c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPinx));

  /* Disable the wake up pin selected */
  CLEAR_BIT (PWR->WKUPEPR, (PWR_WKUPEPR_WKUPEN & WakeUpPinx));
24004c28:	4b07      	ldr	r3, [pc, #28]	; (24004c48 <HAL_PWR_DisableWakeUpPin+0x28>)
24004c2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24004c2c:	687b      	ldr	r3, [r7, #4]
24004c2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24004c32:	43db      	mvns	r3, r3
24004c34:	4904      	ldr	r1, [pc, #16]	; (24004c48 <HAL_PWR_DisableWakeUpPin+0x28>)
24004c36:	4013      	ands	r3, r2
24004c38:	628b      	str	r3, [r1, #40]	; 0x28
}
24004c3a:	bf00      	nop
24004c3c:	370c      	adds	r7, #12
24004c3e:	46bd      	mov	sp, r7
24004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
24004c44:	4770      	bx	lr
24004c46:	bf00      	nop
24004c48:	58024800 	.word	0x58024800

24004c4c <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
24004c4c:	b480      	push	{r7}
24004c4e:	b083      	sub	sp, #12
24004c50:	af00      	add	r7, sp, #0
24004c52:	6078      	str	r0, [r7, #4]
24004c54:	460b      	mov	r3, r1
24004c56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_SLEEP_ENTRY (SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24004c58:	4b08      	ldr	r3, [pc, #32]	; (24004c7c <HAL_PWR_EnterSLEEPMode+0x30>)
24004c5a:	691b      	ldr	r3, [r3, #16]
24004c5c:	4a07      	ldr	r2, [pc, #28]	; (24004c7c <HAL_PWR_EnterSLEEPMode+0x30>)
24004c5e:	f023 0304 	bic.w	r3, r3, #4
24004c62:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
24004c64:	78fb      	ldrb	r3, [r7, #3]
24004c66:	2b01      	cmp	r3, #1
24004c68:	d101      	bne.n	24004c6e <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
24004c6a:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
24004c6c:	e000      	b.n	24004c70 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
24004c6e:	bf20      	wfe
}
24004c70:	bf00      	nop
24004c72:	370c      	adds	r7, #12
24004c74:	46bd      	mov	sp, r7
24004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
24004c7a:	4770      	bx	lr
24004c7c:	e000ed00 	.word	0xe000ed00

24004c80 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
24004c80:	b480      	push	{r7}
24004c82:	b083      	sub	sp, #12
24004c84:	af00      	add	r7, sp, #0
24004c86:	6078      	str	r0, [r7, #4]
24004c88:	460b      	mov	r3, r1
24004c8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
24004c8c:	4b17      	ldr	r3, [pc, #92]	; (24004cec <HAL_PWR_EnterSTOPMode+0x6c>)
24004c8e:	681b      	ldr	r3, [r3, #0]
24004c90:	f023 0201 	bic.w	r2, r3, #1
24004c94:	4915      	ldr	r1, [pc, #84]	; (24004cec <HAL_PWR_EnterSTOPMode+0x6c>)
24004c96:	687b      	ldr	r3, [r7, #4]
24004c98:	4313      	orrs	r3, r2
24004c9a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
24004c9c:	4b13      	ldr	r3, [pc, #76]	; (24004cec <HAL_PWR_EnterSTOPMode+0x6c>)
24004c9e:	691b      	ldr	r3, [r3, #16]
24004ca0:	4a12      	ldr	r2, [pc, #72]	; (24004cec <HAL_PWR_EnterSTOPMode+0x6c>)
24004ca2:	f023 0305 	bic.w	r3, r3, #5
24004ca6:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24004ca8:	4b10      	ldr	r3, [pc, #64]	; (24004cec <HAL_PWR_EnterSTOPMode+0x6c>)
24004caa:	691b      	ldr	r3, [r3, #16]
24004cac:	4a0f      	ldr	r2, [pc, #60]	; (24004cec <HAL_PWR_EnterSTOPMode+0x6c>)
24004cae:	f023 0302 	bic.w	r3, r3, #2
24004cb2:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24004cb4:	4b0e      	ldr	r3, [pc, #56]	; (24004cf0 <HAL_PWR_EnterSTOPMode+0x70>)
24004cb6:	691b      	ldr	r3, [r3, #16]
24004cb8:	4a0d      	ldr	r2, [pc, #52]	; (24004cf0 <HAL_PWR_EnterSTOPMode+0x70>)
24004cba:	f043 0304 	orr.w	r3, r3, #4
24004cbe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24004cc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004cc4:	f3bf 8f6f 	isb	sy
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
24004cc8:	78fb      	ldrb	r3, [r7, #3]
24004cca:	2b01      	cmp	r3, #1
24004ccc:	d101      	bne.n	24004cd2 <HAL_PWR_EnterSTOPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI ();
24004cce:	bf30      	wfi
24004cd0:	e000      	b.n	24004cd4 <HAL_PWR_EnterSTOPMode+0x54>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
24004cd2:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24004cd4:	4b06      	ldr	r3, [pc, #24]	; (24004cf0 <HAL_PWR_EnterSTOPMode+0x70>)
24004cd6:	691b      	ldr	r3, [r3, #16]
24004cd8:	4a05      	ldr	r2, [pc, #20]	; (24004cf0 <HAL_PWR_EnterSTOPMode+0x70>)
24004cda:	f023 0304 	bic.w	r3, r3, #4
24004cde:	6113      	str	r3, [r2, #16]
}
24004ce0:	bf00      	nop
24004ce2:	370c      	adds	r7, #12
24004ce4:	46bd      	mov	sp, r7
24004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
24004cea:	4770      	bx	lr
24004cec:	58024800 	.word	0x58024800
24004cf0:	e000ed00 	.word	0xe000ed00

24004cf4 <HAL_PWR_EnterSTANDBYMode>:
  * @note   It is recommended to disable all regulators before entring STANDBY
  *         mode for power consumption saving purpose.
  * @retval None.
  */
void HAL_PWR_EnterSTANDBYMode (void)
{
24004cf4:	b480      	push	{r7}
24004cf6:	af00      	add	r7, sp, #0
    SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
    SET_BIT (PWR->CPU2CR, (PWR_CPU2CR_PDDS_D2 | PWR_CPU2CR_PDDS_D3));
  }
#else /* Single core devices */
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
24004cf8:	4b0d      	ldr	r3, [pc, #52]	; (24004d30 <HAL_PWR_EnterSTANDBYMode+0x3c>)
24004cfa:	691b      	ldr	r3, [r3, #16]
24004cfc:	4a0c      	ldr	r2, [pc, #48]	; (24004d30 <HAL_PWR_EnterSTANDBYMode+0x3c>)
24004cfe:	f043 0305 	orr.w	r3, r3, #5
24004d02:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Enter DSTANDBY mode when Cortex-M7 enters DEEP-SLEEP */
  SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24004d04:	4b0a      	ldr	r3, [pc, #40]	; (24004d30 <HAL_PWR_EnterSTANDBYMode+0x3c>)
24004d06:	691b      	ldr	r3, [r3, #16]
24004d08:	4a09      	ldr	r2, [pc, #36]	; (24004d30 <HAL_PWR_EnterSTANDBYMode+0x3c>)
24004d0a:	f043 0302 	orr.w	r3, r3, #2
24004d0e:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
24004d10:	4b08      	ldr	r3, [pc, #32]	; (24004d34 <HAL_PWR_EnterSTANDBYMode+0x40>)
24004d12:	691b      	ldr	r3, [r3, #16]
24004d14:	4a07      	ldr	r2, [pc, #28]	; (24004d34 <HAL_PWR_EnterSTANDBYMode+0x40>)
24004d16:	f043 0304 	orr.w	r3, r3, #4
24004d1a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24004d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
24004d20:	f3bf 8f6f 	isb	sy
#if defined (__CC_ARM)
  __force_stores();
#endif /* defined (__CC_ARM) */

  /* Request Wait For Interrupt */
  __WFI ();
24004d24:	bf30      	wfi
}
24004d26:	bf00      	nop
24004d28:	46bd      	mov	sp, r7
24004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
24004d2e:	4770      	bx	lr
24004d30:	58024800 	.word	0x58024800
24004d34:	e000ed00 	.word	0xe000ed00

24004d38 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run
  *         only on interruptions handling.
  * @retval None.
  */
void HAL_PWR_EnableSleepOnExit (void)
{
24004d38:	b480      	push	{r7}
24004d3a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
24004d3c:	4b05      	ldr	r3, [pc, #20]	; (24004d54 <HAL_PWR_EnableSleepOnExit+0x1c>)
24004d3e:	691b      	ldr	r3, [r3, #16]
24004d40:	4a04      	ldr	r2, [pc, #16]	; (24004d54 <HAL_PWR_EnableSleepOnExit+0x1c>)
24004d42:	f043 0302 	orr.w	r3, r3, #2
24004d46:	6113      	str	r3, [r2, #16]
}
24004d48:	bf00      	nop
24004d4a:	46bd      	mov	sp, r7
24004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
24004d50:	4770      	bx	lr
24004d52:	bf00      	nop
24004d54:	e000ed00 	.word	0xe000ed00

24004d58 <HAL_PWR_DisableSleepOnExit>:
  * @note   Clears SLEEPONEXIT bit of SCR register. When this bit is set, the
  *         processor re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit (void)
{
24004d58:	b480      	push	{r7}
24004d5a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex-Mx System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPONEXIT_Msk);
24004d5c:	4b05      	ldr	r3, [pc, #20]	; (24004d74 <HAL_PWR_DisableSleepOnExit+0x1c>)
24004d5e:	691b      	ldr	r3, [r3, #16]
24004d60:	4a04      	ldr	r2, [pc, #16]	; (24004d74 <HAL_PWR_DisableSleepOnExit+0x1c>)
24004d62:	f023 0302 	bic.w	r3, r3, #2
24004d66:	6113      	str	r3, [r2, #16]
}
24004d68:	bf00      	nop
24004d6a:	46bd      	mov	sp, r7
24004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
24004d70:	4770      	bx	lr
24004d72:	bf00      	nop
24004d74:	e000ed00 	.word	0xe000ed00

24004d78 <HAL_PWR_EnableSEVOnPend>:
  *         pending event / interrupt even if it's disabled or has insufficient
  *         priority to cause exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_EnableSEVOnPend (void)
{
24004d78:	b480      	push	{r7}
24004d7a:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex-Mx System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
24004d7c:	4b05      	ldr	r3, [pc, #20]	; (24004d94 <HAL_PWR_EnableSEVOnPend+0x1c>)
24004d7e:	691b      	ldr	r3, [r3, #16]
24004d80:	4a04      	ldr	r2, [pc, #16]	; (24004d94 <HAL_PWR_EnableSEVOnPend+0x1c>)
24004d82:	f043 0310 	orr.w	r3, r3, #16
24004d86:	6113      	str	r3, [r2, #16]
}
24004d88:	bf00      	nop
24004d8a:	46bd      	mov	sp, r7
24004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
24004d90:	4770      	bx	lr
24004d92:	bf00      	nop
24004d94:	e000ed00 	.word	0xe000ed00

24004d98 <HAL_PWR_DisableSEVOnPend>:
  * @note   Resets SEVONPEND bit of SCR register. When this bit is reset, only
  *         enabled pending causes exception entry wakes up the Cortex-Mx.
  * @retval None.
  */
void HAL_PWR_DisableSEVOnPend (void)
{
24004d98:	b480      	push	{r7}
24004d9a:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SEVONPEND_Msk);
24004d9c:	4b05      	ldr	r3, [pc, #20]	; (24004db4 <HAL_PWR_DisableSEVOnPend+0x1c>)
24004d9e:	691b      	ldr	r3, [r3, #16]
24004da0:	4a04      	ldr	r2, [pc, #16]	; (24004db4 <HAL_PWR_DisableSEVOnPend+0x1c>)
24004da2:	f023 0310 	bic.w	r3, r3, #16
24004da6:	6113      	str	r3, [r2, #16]
}
24004da8:	bf00      	nop
24004daa:	46bd      	mov	sp, r7
24004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
24004db0:	4770      	bx	lr
24004db2:	bf00      	nop
24004db4:	e000ed00 	.word	0xe000ed00

24004db8 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None.
  */
void HAL_PWR_PVD_IRQHandler (void)
{
24004db8:	b580      	push	{r7, lr}
24004dba:	af00      	add	r7, sp, #0
      HAL_PWR_PVDCallback ();
    }
  }
#else /* Single core devices */
  /* PVD EXTI line interrupt detected */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
24004dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24004dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24004dc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24004dcc:	d10b      	bne.n	24004de6 <HAL_PWR_PVD_IRQHandler+0x2e>
  {
    /* Clear PWR EXTI pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
24004dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24004dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24004dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24004dde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback ();
24004de2:	f000 f802 	bl	24004dea <HAL_PWR_PVDCallback>
  }
#endif /* defined (DUAL_CORE) */
}
24004de6:	bf00      	nop
24004de8:	bd80      	pop	{r7, pc}

24004dea <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWR_PVDCallback (void)
{
24004dea:	b480      	push	{r7}
24004dec:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
24004dee:	bf00      	nop
24004df0:	46bd      	mov	sp, r7
24004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
24004df6:	4770      	bx	lr

24004df8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
24004df8:	b580      	push	{r7, lr}
24004dfa:	b084      	sub	sp, #16
24004dfc:	af00      	add	r7, sp, #0
24004dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
24004e00:	4b19      	ldr	r3, [pc, #100]	; (24004e68 <HAL_PWREx_ConfigSupply+0x70>)
24004e02:	68db      	ldr	r3, [r3, #12]
24004e04:	f003 0304 	and.w	r3, r3, #4
24004e08:	2b04      	cmp	r3, #4
24004e0a:	d00a      	beq.n	24004e22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
24004e0c:	4b16      	ldr	r3, [pc, #88]	; (24004e68 <HAL_PWREx_ConfigSupply+0x70>)
24004e0e:	68db      	ldr	r3, [r3, #12]
24004e10:	f003 0307 	and.w	r3, r3, #7
24004e14:	687a      	ldr	r2, [r7, #4]
24004e16:	429a      	cmp	r2, r3
24004e18:	d001      	beq.n	24004e1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
24004e1a:	2301      	movs	r3, #1
24004e1c:	e01f      	b.n	24004e5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
24004e1e:	2300      	movs	r3, #0
24004e20:	e01d      	b.n	24004e5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
24004e22:	4b11      	ldr	r3, [pc, #68]	; (24004e68 <HAL_PWREx_ConfigSupply+0x70>)
24004e24:	68db      	ldr	r3, [r3, #12]
24004e26:	f023 0207 	bic.w	r2, r3, #7
24004e2a:	490f      	ldr	r1, [pc, #60]	; (24004e68 <HAL_PWREx_ConfigSupply+0x70>)
24004e2c:	687b      	ldr	r3, [r7, #4]
24004e2e:	4313      	orrs	r3, r2
24004e30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
24004e32:	f7fd f9c3 	bl	240021bc <HAL_GetTick>
24004e36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24004e38:	e009      	b.n	24004e4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24004e3a:	f7fd f9bf 	bl	240021bc <HAL_GetTick>
24004e3e:	4602      	mov	r2, r0
24004e40:	68fb      	ldr	r3, [r7, #12]
24004e42:	1ad3      	subs	r3, r2, r3
24004e44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24004e48:	d901      	bls.n	24004e4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
24004e4a:	2301      	movs	r3, #1
24004e4c:	e007      	b.n	24004e5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24004e4e:	4b06      	ldr	r3, [pc, #24]	; (24004e68 <HAL_PWREx_ConfigSupply+0x70>)
24004e50:	685b      	ldr	r3, [r3, #4]
24004e52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24004e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24004e5a:	d1ee      	bne.n	24004e3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
24004e5c:	2300      	movs	r3, #0
}
24004e5e:	4618      	mov	r0, r3
24004e60:	3710      	adds	r7, #16
24004e62:	46bd      	mov	sp, r7
24004e64:	bd80      	pop	{r7, pc}
24004e66:	bf00      	nop
24004e68:	58024800 	.word	0x58024800

24004e6c <HAL_PWREx_GetSupplyConfig>:
/**
  * @brief Get the power supply configuration.
  * @retval The supply configuration.
  */
uint32_t HAL_PWREx_GetSupplyConfig (void)
{
24004e6c:	b480      	push	{r7}
24004e6e:	af00      	add	r7, sp, #0
  return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
24004e70:	4b04      	ldr	r3, [pc, #16]	; (24004e84 <HAL_PWREx_GetSupplyConfig+0x18>)
24004e72:	68db      	ldr	r3, [r3, #12]
24004e74:	f003 0307 	and.w	r3, r3, #7
}
24004e78:	4618      	mov	r0, r3
24004e7a:	46bd      	mov	sp, r7
24004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
24004e80:	4770      	bx	lr
24004e82:	bf00      	nop
24004e84:	58024800 	.word	0x58024800

24004e88 <HAL_PWREx_ControlVoltageScaling>:
  *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
  *         low power mode.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
{
24004e88:	b580      	push	{r7, lr}
24004e8a:	b084      	sub	sp, #16
24004e8c:	af00      	add	r7, sp, #0
24004e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));

  /* Get the voltage scaling  */
  if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
24004e90:	4b3f      	ldr	r3, [pc, #252]	; (24004f90 <HAL_PWREx_ControlVoltageScaling+0x108>)
24004e92:	685b      	ldr	r3, [r3, #4]
24004e94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24004e98:	687a      	ldr	r2, [r7, #4]
24004e9a:	429a      	cmp	r2, r3
24004e9c:	d101      	bne.n	24004ea2 <HAL_PWREx_ControlVoltageScaling+0x1a>
  {
    /* Old and new voltage scaling configuration match : nothing to do */
    return HAL_OK;
24004e9e:	2300      	movs	r3, #0
24004ea0:	e072      	b.n	24004f88 <HAL_PWREx_ControlVoltageScaling+0x100>
#if defined (PWR_SRDCR_VOS)
  /* Set the voltage range */
  MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#else
#if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
24004ea2:	687b      	ldr	r3, [r7, #4]
24004ea4:	2b00      	cmp	r3, #0
24004ea6:	d129      	bne.n	24004efc <HAL_PWREx_ControlVoltageScaling+0x74>
  {
    if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
24004ea8:	4b39      	ldr	r3, [pc, #228]	; (24004f90 <HAL_PWREx_ControlVoltageScaling+0x108>)
24004eaa:	68db      	ldr	r3, [r3, #12]
24004eac:	f003 0302 	and.w	r3, r3, #2
24004eb0:	2b02      	cmp	r3, #2
24004eb2:	d121      	bne.n	24004ef8 <HAL_PWREx_ControlVoltageScaling+0x70>
    {
      /* Set the voltage range */
      MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
24004eb4:	4b36      	ldr	r3, [pc, #216]	; (24004f90 <HAL_PWREx_ControlVoltageScaling+0x108>)
24004eb6:	699b      	ldr	r3, [r3, #24]
24004eb8:	4a35      	ldr	r2, [pc, #212]	; (24004f90 <HAL_PWREx_ControlVoltageScaling+0x108>)
24004eba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
24004ebe:	6193      	str	r3, [r2, #24]

      /* Get tick */
      tickstart = HAL_GetTick ();
24004ec0:	f7fd f97c 	bl	240021bc <HAL_GetTick>
24004ec4:	60f8      	str	r0, [r7, #12]

      /* Wait till voltage level flag is set */
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24004ec6:	e009      	b.n	24004edc <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24004ec8:	f7fd f978 	bl	240021bc <HAL_GetTick>
24004ecc:	4602      	mov	r2, r0
24004ece:	68fb      	ldr	r3, [r7, #12]
24004ed0:	1ad3      	subs	r3, r2, r3
24004ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24004ed6:	d901      	bls.n	24004edc <HAL_PWREx_ControlVoltageScaling+0x54>
        {
          return HAL_ERROR;
24004ed8:	2301      	movs	r3, #1
24004eda:	e055      	b.n	24004f88 <HAL_PWREx_ControlVoltageScaling+0x100>
      while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24004edc:	4b2c      	ldr	r3, [pc, #176]	; (24004f90 <HAL_PWREx_ControlVoltageScaling+0x108>)
24004ede:	685b      	ldr	r3, [r3, #4]
24004ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24004ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24004ee8:	d1ee      	bne.n	24004ec8 <HAL_PWREx_ControlVoltageScaling+0x40>
        }
      }

      /* Enable the PWR overdrive */
      SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
24004eea:	4b2a      	ldr	r3, [pc, #168]	; (24004f94 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004eee:	4a29      	ldr	r2, [pc, #164]	; (24004f94 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24004ef0:	f043 0301 	orr.w	r3, r3, #1
24004ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
24004ef6:	e031      	b.n	24004f5c <HAL_PWREx_ControlVoltageScaling+0xd4>
    }
    else
    {
      /* The voltage scale 0 is only possible when LDO regulator is enabled */
      return HAL_ERROR;
24004ef8:	2301      	movs	r3, #1
24004efa:	e045      	b.n	24004f88 <HAL_PWREx_ControlVoltageScaling+0x100>
    }
  }
  else
  {
    if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
24004efc:	4b24      	ldr	r3, [pc, #144]	; (24004f90 <HAL_PWREx_ControlVoltageScaling+0x108>)
24004efe:	685b      	ldr	r3, [r3, #4]
24004f00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
24004f04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
24004f08:	d120      	bne.n	24004f4c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
24004f0a:	4b22      	ldr	r3, [pc, #136]	; (24004f94 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004f0e:	f003 0301 	and.w	r3, r3, #1
24004f12:	2b00      	cmp	r3, #0
24004f14:	d01a      	beq.n	24004f4c <HAL_PWREx_ControlVoltageScaling+0xc4>
      {
        /* Disable the PWR overdrive */
        CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
24004f16:	4b1f      	ldr	r3, [pc, #124]	; (24004f94 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24004f1a:	4a1e      	ldr	r2, [pc, #120]	; (24004f94 <HAL_PWREx_ControlVoltageScaling+0x10c>)
24004f1c:	f023 0301 	bic.w	r3, r3, #1
24004f20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Get tick */
        tickstart = HAL_GetTick ();
24004f22:	f7fd f94b 	bl	240021bc <HAL_GetTick>
24004f26:	60f8      	str	r0, [r7, #12]

        /* Wait till voltage level flag is set */
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24004f28:	e009      	b.n	24004f3e <HAL_PWREx_ControlVoltageScaling+0xb6>
        {
          if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
24004f2a:	f7fd f947 	bl	240021bc <HAL_GetTick>
24004f2e:	4602      	mov	r2, r0
24004f30:	68fb      	ldr	r3, [r7, #12]
24004f32:	1ad3      	subs	r3, r2, r3
24004f34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24004f38:	d901      	bls.n	24004f3e <HAL_PWREx_ControlVoltageScaling+0xb6>
          {
            return HAL_ERROR;
24004f3a:	2301      	movs	r3, #1
24004f3c:	e024      	b.n	24004f88 <HAL_PWREx_ControlVoltageScaling+0x100>
        while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24004f3e:	4b14      	ldr	r3, [pc, #80]	; (24004f90 <HAL_PWREx_ControlVoltageScaling+0x108>)
24004f40:	685b      	ldr	r3, [r3, #4]
24004f42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24004f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24004f4a:	d1ee      	bne.n	24004f2a <HAL_PWREx_ControlVoltageScaling+0xa2>
        }
      }
    }

    /* Set the voltage range */
    MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
24004f4c:	4b10      	ldr	r3, [pc, #64]	; (24004f90 <HAL_PWREx_ControlVoltageScaling+0x108>)
24004f4e:	699b      	ldr	r3, [r3, #24]
24004f50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24004f54:	490e      	ldr	r1, [pc, #56]	; (24004f90 <HAL_PWREx_ControlVoltageScaling+0x108>)
24004f56:	687b      	ldr	r3, [r7, #4]
24004f58:	4313      	orrs	r3, r2
24004f5a:	618b      	str	r3, [r1, #24]
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
#endif /* defined (SYSCFG_PWRCR_ODEN) */
#endif /* defined (PWR_SRDCR_VOS) */

  /* Get tick */
  tickstart = HAL_GetTick ();
24004f5c:	f7fd f92e 	bl	240021bc <HAL_GetTick>
24004f60:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24004f62:	e009      	b.n	24004f78 <HAL_PWREx_ControlVoltageScaling+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
24004f64:	f7fd f92a 	bl	240021bc <HAL_GetTick>
24004f68:	4602      	mov	r2, r0
24004f6a:	68fb      	ldr	r3, [r7, #12]
24004f6c:	1ad3      	subs	r3, r2, r3
24004f6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24004f72:	d901      	bls.n	24004f78 <HAL_PWREx_ControlVoltageScaling+0xf0>
    {
      return HAL_ERROR;
24004f74:	2301      	movs	r3, #1
24004f76:	e007      	b.n	24004f88 <HAL_PWREx_ControlVoltageScaling+0x100>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
24004f78:	4b05      	ldr	r3, [pc, #20]	; (24004f90 <HAL_PWREx_ControlVoltageScaling+0x108>)
24004f7a:	685b      	ldr	r3, [r3, #4]
24004f7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24004f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24004f84:	d1ee      	bne.n	24004f64 <HAL_PWREx_ControlVoltageScaling+0xdc>
    }
  }

  return HAL_OK;
24004f86:	2300      	movs	r3, #0
}
24004f88:	4618      	mov	r0, r3
24004f8a:	3710      	adds	r7, #16
24004f8c:	46bd      	mov	sp, r7
24004f8e:	bd80      	pop	{r7, pc}
24004f90:	58024800 	.word	0x58024800
24004f94:	58000400 	.word	0x58000400

24004f98 <HAL_PWREx_GetVoltageRange>:
  * @brief Get the main internal regulator output voltage. Reflecting the last
  *        VOS value applied to the PMU.
  * @retval The current applied VOS selection.
  */
uint32_t HAL_PWREx_GetVoltageRange (void)
{
24004f98:	b480      	push	{r7}
24004f9a:	af00      	add	r7, sp, #0
  /* Get the active voltage scaling */
  return (PWR->CSR1 & PWR_CSR1_ACTVOS);
24004f9c:	4b04      	ldr	r3, [pc, #16]	; (24004fb0 <HAL_PWREx_GetVoltageRange+0x18>)
24004f9e:	685b      	ldr	r3, [r3, #4]
24004fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
24004fa4:	4618      	mov	r0, r3
24004fa6:	46bd      	mov	sp, r7
24004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
24004fac:	4770      	bx	lr
24004fae:	bf00      	nop
24004fb0:	58024800 	.word	0x58024800

24004fb4 <HAL_PWREx_ControlStopModeVoltageScaling>:
  * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
  *         when exiting from system Stop mode.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
{
24004fb4:	b480      	push	{r7}
24004fb6:	b083      	sub	sp, #12
24004fb8:	af00      	add	r7, sp, #0
24004fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));

  /* Return the stop mode voltage range */
  MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
24004fbc:	4b07      	ldr	r3, [pc, #28]	; (24004fdc <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
24004fbe:	681b      	ldr	r3, [r3, #0]
24004fc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
24004fc4:	4905      	ldr	r1, [pc, #20]	; (24004fdc <HAL_PWREx_ControlStopModeVoltageScaling+0x28>)
24004fc6:	687b      	ldr	r3, [r7, #4]
24004fc8:	4313      	orrs	r3, r2
24004fca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
24004fcc:	2300      	movs	r3, #0
}
24004fce:	4618      	mov	r0, r3
24004fd0:	370c      	adds	r7, #12
24004fd2:	46bd      	mov	sp, r7
24004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
24004fd8:	4770      	bx	lr
24004fda:	bf00      	nop
24004fdc:	58024800 	.word	0x58024800

24004fe0 <HAL_PWREx_GetStopModeVoltageRange>:
/**
  * @brief Get the main internal regulator output voltage in STOP mode.
  * @retval The actual applied VOS selection.
  */
uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
{
24004fe0:	b480      	push	{r7}
24004fe2:	af00      	add	r7, sp, #0
  /* Return the stop voltage scaling */
  return (PWR->CR1 & PWR_CR1_SVOS);
24004fe4:	4b04      	ldr	r3, [pc, #16]	; (24004ff8 <HAL_PWREx_GetStopModeVoltageRange+0x18>)
24004fe6:	681b      	ldr	r3, [r3, #0]
24004fe8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
24004fec:	4618      	mov	r0, r3
24004fee:	46bd      	mov	sp, r7
24004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
24004ff4:	4770      	bx	lr
24004ff6:	bf00      	nop
24004ff8:	58024800 	.word	0x58024800

24004ffc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
24004ffc:	b480      	push	{r7}
24004ffe:	b085      	sub	sp, #20
24005000:	af00      	add	r7, sp, #0
24005002:	60f8      	str	r0, [r7, #12]
24005004:	460b      	mov	r3, r1
24005006:	607a      	str	r2, [r7, #4]
24005008:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
2400500a:	4b1f      	ldr	r3, [pc, #124]	; (24005088 <HAL_PWREx_EnterSTOPMode+0x8c>)
2400500c:	681b      	ldr	r3, [r3, #0]
2400500e:	f023 0201 	bic.w	r2, r3, #1
24005012:	491d      	ldr	r1, [pc, #116]	; (24005088 <HAL_PWREx_EnterSTOPMode+0x8c>)
24005014:	68fb      	ldr	r3, [r7, #12]
24005016:	4313      	orrs	r3, r2
24005018:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
2400501a:	687b      	ldr	r3, [r7, #4]
2400501c:	2b00      	cmp	r3, #0
2400501e:	d11c      	bne.n	2400505a <HAL_PWREx_EnterSTOPMode+0x5e>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
24005020:	4b19      	ldr	r3, [pc, #100]	; (24005088 <HAL_PWREx_EnterSTOPMode+0x8c>)
24005022:	691b      	ldr	r3, [r3, #16]
24005024:	4a18      	ldr	r2, [pc, #96]	; (24005088 <HAL_PWREx_EnterSTOPMode+0x8c>)
24005026:	f023 0301 	bic.w	r3, r3, #1
2400502a:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2400502c:	4b17      	ldr	r3, [pc, #92]	; (2400508c <HAL_PWREx_EnterSTOPMode+0x90>)
2400502e:	691b      	ldr	r3, [r3, #16]
24005030:	4a16      	ldr	r2, [pc, #88]	; (2400508c <HAL_PWREx_EnterSTOPMode+0x90>)
24005032:	f043 0304 	orr.w	r3, r3, #4
24005036:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
24005038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
2400503c:	f3bf 8f6f 	isb	sy
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
24005040:	7afb      	ldrb	r3, [r7, #11]
24005042:	2b01      	cmp	r3, #1
24005044:	d101      	bne.n	2400504a <HAL_PWREx_EnterSTOPMode+0x4e>
    {
      /* Request Wait For Interrupt */
      __WFI ();
24005046:	bf30      	wfi
24005048:	e000      	b.n	2400504c <HAL_PWREx_EnterSTOPMode+0x50>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
2400504a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
2400504c:	4b0f      	ldr	r3, [pc, #60]	; (2400508c <HAL_PWREx_EnterSTOPMode+0x90>)
2400504e:	691b      	ldr	r3, [r3, #16]
24005050:	4a0e      	ldr	r2, [pc, #56]	; (2400508c <HAL_PWREx_EnterSTOPMode+0x90>)
24005052:	f023 0304 	bic.w	r3, r3, #4
24005056:	6113      	str	r3, [r2, #16]
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
24005058:	e00f      	b.n	2400507a <HAL_PWREx_EnterSTOPMode+0x7e>
  else if (Domain == PWR_D2_DOMAIN)
2400505a:	687b      	ldr	r3, [r7, #4]
2400505c:	2b01      	cmp	r3, #1
2400505e:	d106      	bne.n	2400506e <HAL_PWREx_EnterSTOPMode+0x72>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
24005060:	4b09      	ldr	r3, [pc, #36]	; (24005088 <HAL_PWREx_EnterSTOPMode+0x8c>)
24005062:	691b      	ldr	r3, [r3, #16]
24005064:	4a08      	ldr	r2, [pc, #32]	; (24005088 <HAL_PWREx_EnterSTOPMode+0x8c>)
24005066:	f023 0302 	bic.w	r3, r3, #2
2400506a:	6113      	str	r3, [r2, #16]
}
2400506c:	e005      	b.n	2400507a <HAL_PWREx_EnterSTOPMode+0x7e>
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
2400506e:	4b06      	ldr	r3, [pc, #24]	; (24005088 <HAL_PWREx_EnterSTOPMode+0x8c>)
24005070:	691b      	ldr	r3, [r3, #16]
24005072:	4a05      	ldr	r2, [pc, #20]	; (24005088 <HAL_PWREx_EnterSTOPMode+0x8c>)
24005074:	f023 0304 	bic.w	r3, r3, #4
24005078:	6113      	str	r3, [r2, #16]
}
2400507a:	bf00      	nop
2400507c:	3714      	adds	r7, #20
2400507e:	46bd      	mov	sp, r7
24005080:	f85d 7b04 	ldr.w	r7, [sp], #4
24005084:	4770      	bx	lr
24005086:	bf00      	nop
24005088:	58024800 	.word	0x58024800
2400508c:	e000ed00 	.word	0xe000ed00

24005090 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
24005090:	b480      	push	{r7}
24005092:	af00      	add	r7, sp, #0
  {
    __SEV ();
    __WFE ();
  }
#else
  __WFE ();
24005094:	bf20      	wfe
#endif /* defined (DUAL_CORE) */
}
24005096:	bf00      	nop
24005098:	46bd      	mov	sp, r7
2400509a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400509e:	4770      	bx	lr

240050a0 <HAL_PWREx_EnterSTANDBYMode>:
  *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
  *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
  * @retval None
  */
void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
{
240050a0:	b480      	push	{r7}
240050a2:	b083      	sub	sp, #12
240050a4:	af00      	add	r7, sp, #0
240050a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
240050a8:	687b      	ldr	r3, [r7, #4]
240050aa:	2b00      	cmp	r3, #0
240050ac:	d10d      	bne.n	240050ca <HAL_PWREx_EnterSTANDBYMode+0x2a>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
240050ae:	4b12      	ldr	r3, [pc, #72]	; (240050f8 <HAL_PWREx_EnterSTANDBYMode+0x58>)
240050b0:	691b      	ldr	r3, [r3, #16]
240050b2:	4a11      	ldr	r2, [pc, #68]	; (240050f8 <HAL_PWREx_EnterSTANDBYMode+0x58>)
240050b4:	f043 0301 	orr.w	r3, r3, #1
240050b8:	6113      	str	r3, [r2, #16]
    /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
    SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
#endif /*DUAL_CORE*/

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
240050ba:	4b10      	ldr	r3, [pc, #64]	; (240050fc <HAL_PWREx_EnterSTANDBYMode+0x5c>)
240050bc:	691b      	ldr	r3, [r3, #16]
240050be:	4a0f      	ldr	r2, [pc, #60]	; (240050fc <HAL_PWREx_EnterSTANDBYMode+0x5c>)
240050c0:	f043 0304 	orr.w	r3, r3, #4
240050c4:	6113      	str	r3, [r2, #16]
#if defined (__CC_ARM)
    __force_stores ();
#endif /* defined (__CC_ARM) */

    /* Request Wait For Interrupt */
    __WFI ();
240050c6:	bf30      	wfi
#if defined (DUAL_CORE)
    /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
    SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
#endif /* defined (DUAL_CORE) */
  }
}
240050c8:	e00f      	b.n	240050ea <HAL_PWREx_EnterSTANDBYMode+0x4a>
  else if (Domain == PWR_D2_DOMAIN)
240050ca:	687b      	ldr	r3, [r7, #4]
240050cc:	2b01      	cmp	r3, #1
240050ce:	d106      	bne.n	240050de <HAL_PWREx_EnterSTANDBYMode+0x3e>
    SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
240050d0:	4b09      	ldr	r3, [pc, #36]	; (240050f8 <HAL_PWREx_EnterSTANDBYMode+0x58>)
240050d2:	691b      	ldr	r3, [r3, #16]
240050d4:	4a08      	ldr	r2, [pc, #32]	; (240050f8 <HAL_PWREx_EnterSTANDBYMode+0x58>)
240050d6:	f043 0302 	orr.w	r3, r3, #2
240050da:	6113      	str	r3, [r2, #16]
}
240050dc:	e005      	b.n	240050ea <HAL_PWREx_EnterSTANDBYMode+0x4a>
    SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
240050de:	4b06      	ldr	r3, [pc, #24]	; (240050f8 <HAL_PWREx_EnterSTANDBYMode+0x58>)
240050e0:	691b      	ldr	r3, [r3, #16]
240050e2:	4a05      	ldr	r2, [pc, #20]	; (240050f8 <HAL_PWREx_EnterSTANDBYMode+0x58>)
240050e4:	f043 0304 	orr.w	r3, r3, #4
240050e8:	6113      	str	r3, [r2, #16]
}
240050ea:	bf00      	nop
240050ec:	370c      	adds	r7, #12
240050ee:	46bd      	mov	sp, r7
240050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
240050f4:	4770      	bx	lr
240050f6:	bf00      	nop
240050f8:	58024800 	.word	0x58024800
240050fc:	e000ed00 	.word	0xe000ed00

24005100 <HAL_PWREx_ConfigD3Domain>:
  *                                     regardless of the CPU sub-system low
  *                                     power mode.
  * @retval None
  */
void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
{
24005100:	b480      	push	{r7}
24005102:	b083      	sub	sp, #12
24005104:	af00      	add	r7, sp, #0
24005106:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_D3_STATE (D3State));

  /* Keep D3/SRD in run mode */
  MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
24005108:	4b06      	ldr	r3, [pc, #24]	; (24005124 <HAL_PWREx_ConfigD3Domain+0x24>)
2400510a:	691b      	ldr	r3, [r3, #16]
2400510c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
24005110:	4904      	ldr	r1, [pc, #16]	; (24005124 <HAL_PWREx_ConfigD3Domain+0x24>)
24005112:	687b      	ldr	r3, [r7, #4]
24005114:	4313      	orrs	r3, r2
24005116:	610b      	str	r3, [r1, #16]
}
24005118:	bf00      	nop
2400511a:	370c      	adds	r7, #12
2400511c:	46bd      	mov	sp, r7
2400511e:	f85d 7b04 	ldr.w	r7, [sp], #4
24005122:	4770      	bx	lr
24005124:	58024800 	.word	0x58024800

24005128 <HAL_PWREx_EnableFlashPowerDown>:
  *         obtain the best trade-off between low-power consumption and restart
  *         time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_EnableFlashPowerDown (void)
{
24005128:	b480      	push	{r7}
2400512a:	af00      	add	r7, sp, #0
  /* Enable the Flash Power Down */
  SET_BIT (PWR->CR1, PWR_CR1_FLPS);
2400512c:	4b05      	ldr	r3, [pc, #20]	; (24005144 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
2400512e:	681b      	ldr	r3, [r3, #0]
24005130:	4a04      	ldr	r2, [pc, #16]	; (24005144 <HAL_PWREx_EnableFlashPowerDown+0x1c>)
24005132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
24005136:	6013      	str	r3, [r2, #0]
}
24005138:	bf00      	nop
2400513a:	46bd      	mov	sp, r7
2400513c:	f85d 7b04 	ldr.w	r7, [sp], #4
24005140:	4770      	bx	lr
24005142:	bf00      	nop
24005144:	58024800 	.word	0x58024800

24005148 <HAL_PWREx_DisableFlashPowerDown>:
  *         to obtain the best trade-off between low-power consumption and
  *         restart time when exiting from DStop mode.
  * @retval None.
  */
void HAL_PWREx_DisableFlashPowerDown (void)
{
24005148:	b480      	push	{r7}
2400514a:	af00      	add	r7, sp, #0
  /* Disable the Flash Power Down */
  CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
2400514c:	4b05      	ldr	r3, [pc, #20]	; (24005164 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
2400514e:	681b      	ldr	r3, [r3, #0]
24005150:	4a04      	ldr	r2, [pc, #16]	; (24005164 <HAL_PWREx_DisableFlashPowerDown+0x1c>)
24005152:	f423 7300 	bic.w	r3, r3, #512	; 0x200
24005156:	6013      	str	r3, [r2, #0]
}
24005158:	bf00      	nop
2400515a:	46bd      	mov	sp, r7
2400515c:	f85d 7b04 	ldr.w	r7, [sp], #4
24005160:	4770      	bx	lr
24005162:	bf00      	nop
24005164:	58024800 	.word	0x58024800

24005168 <HAL_PWREx_EnableWakeUpPin>:
  *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
  *         Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
{
24005168:	b480      	push	{r7}
2400516a:	b08f      	sub	sp, #60	; 0x3c
2400516c:	af00      	add	r7, sp, #0
2400516e:	6078      	str	r0, [r7, #4]
  uint32_t pinConfig;
  uint32_t regMask;
  const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
24005170:	f44f 3340 	mov.w	r3, #196608	; 0x30000
24005174:	637b      	str	r3, [r7, #52]	; 0x34
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
  assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
  assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));

  pinConfig = sPinParams->WakeUpPin | \
24005176:	687b      	ldr	r3, [r7, #4]
24005178:	681a      	ldr	r2, [r3, #0]
              (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP1_Pos) & 0x1FU)) | \
2400517a:	687b      	ldr	r3, [r7, #4]
2400517c:	6859      	ldr	r1, [r3, #4]
2400517e:	687b      	ldr	r3, [r7, #4]
24005180:	681b      	ldr	r3, [r3, #0]
24005182:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
24005184:	693b      	ldr	r3, [r7, #16]
24005186:	fa93 f3a3 	rbit	r3, r3
2400518a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
2400518c:	68fb      	ldr	r3, [r7, #12]
2400518e:	fab3 f383 	clz	r3, r3
24005192:	b2db      	uxtb	r3, r3
24005194:	3308      	adds	r3, #8
24005196:	f003 031f 	and.w	r3, r3, #31
2400519a:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
2400519e:	431a      	orrs	r2, r3
              (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) + PWR_WKUPEPR_WKUPPUPD1_Pos) & 0x1FU));
240051a0:	687b      	ldr	r3, [r7, #4]
240051a2:	6899      	ldr	r1, [r3, #8]
240051a4:	687b      	ldr	r3, [r7, #4]
240051a6:	681b      	ldr	r3, [r3, #0]
240051a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240051aa:	69bb      	ldr	r3, [r7, #24]
240051ac:	fa93 f3a3 	rbit	r3, r3
240051b0:	617b      	str	r3, [r7, #20]
  return result;
240051b2:	697b      	ldr	r3, [r7, #20]
240051b4:	fab3 f383 	clz	r3, r3
240051b8:	b2db      	uxtb	r3, r3
240051ba:	3308      	adds	r3, #8
240051bc:	005b      	lsls	r3, r3, #1
240051be:	f003 031e 	and.w	r3, r3, #30
240051c2:	fa01 f303 	lsl.w	r3, r1, r3
  pinConfig = sPinParams->WakeUpPin | \
240051c6:	4313      	orrs	r3, r2
240051c8:	633b      	str	r3, [r7, #48]	; 0x30

  regMask   = sPinParams->WakeUpPin | \
240051ca:	687b      	ldr	r3, [r7, #4]
240051cc:	681a      	ldr	r2, [r3, #0]
              (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
240051ce:	687b      	ldr	r3, [r7, #4]
240051d0:	681b      	ldr	r3, [r3, #0]
240051d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240051d4:	6a3b      	ldr	r3, [r7, #32]
240051d6:	fa93 f3a3 	rbit	r3, r3
240051da:	61fb      	str	r3, [r7, #28]
  return result;
240051dc:	69fb      	ldr	r3, [r7, #28]
240051de:	fab3 f383 	clz	r3, r3
240051e2:	b2db      	uxtb	r3, r3
240051e4:	f003 031f 	and.w	r3, r3, #31
240051e8:	f44f 7180 	mov.w	r1, #256	; 0x100
240051ec:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
240051f0:	431a      	orrs	r2, r3
              (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET) & 0x1FU));
240051f2:	687b      	ldr	r3, [r7, #4]
240051f4:	681b      	ldr	r3, [r3, #0]
240051f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
240051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
240051fa:	fa93 f3a3 	rbit	r3, r3
240051fe:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
24005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24005202:	fab3 f383 	clz	r3, r3
24005206:	b2db      	uxtb	r3, r3
24005208:	005b      	lsls	r3, r3, #1
2400520a:	f003 031e 	and.w	r3, r3, #30
2400520e:	6b79      	ldr	r1, [r7, #52]	; 0x34
24005210:	fa01 f303 	lsl.w	r3, r1, r3
  regMask   = sPinParams->WakeUpPin | \
24005214:	4313      	orrs	r3, r2
24005216:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Enable and Specify the Wake-Up pin polarity and the pull configuration
     for the event detection (rising or falling edge) */
  MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
24005218:	4b0e      	ldr	r3, [pc, #56]	; (24005254 <HAL_PWREx_EnableWakeUpPin+0xec>)
2400521a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
2400521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2400521e:	43db      	mvns	r3, r3
24005220:	401a      	ands	r2, r3
24005222:	490c      	ldr	r1, [pc, #48]	; (24005254 <HAL_PWREx_EnableWakeUpPin+0xec>)
24005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24005226:	4313      	orrs	r3, r2
24005228:	628b      	str	r3, [r1, #40]	; 0x28
#ifndef DUAL_CORE
  /* Configure the Wakeup Pin EXTI Line */
  MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos));
2400522a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24005232:	f023 52fc 	bic.w	r2, r3, #528482304	; 0x1f800000
24005236:	687b      	ldr	r3, [r7, #4]
24005238:	681b      	ldr	r3, [r3, #0]
2400523a:	05db      	lsls	r3, r3, #23
2400523c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
24005240:	4313      	orrs	r3, r2
24005242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
#endif /* !DUAL_CORE */
}
24005246:	bf00      	nop
24005248:	373c      	adds	r7, #60	; 0x3c
2400524a:	46bd      	mov	sp, r7
2400524c:	f85d 7b04 	ldr.w	r7, [sp], #4
24005250:	4770      	bx	lr
24005252:	bf00      	nop
24005254:	58024800 	.word	0x58024800

24005258 <HAL_PWREx_DisableWakeUpPin>:
  * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
  *         devices that support GPIOI port.
  * @retval None
  */
void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
{
24005258:	b480      	push	{r7}
2400525a:	b083      	sub	sp, #12
2400525c:	af00      	add	r7, sp, #0
2400525e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));

  /* Disable the WakeUpPin */
  CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
24005260:	4b06      	ldr	r3, [pc, #24]	; (2400527c <HAL_PWREx_DisableWakeUpPin+0x24>)
24005262:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24005264:	687b      	ldr	r3, [r7, #4]
24005266:	43db      	mvns	r3, r3
24005268:	4904      	ldr	r1, [pc, #16]	; (2400527c <HAL_PWREx_DisableWakeUpPin+0x24>)
2400526a:	4013      	ands	r3, r2
2400526c:	628b      	str	r3, [r1, #40]	; 0x28
}
2400526e:	bf00      	nop
24005270:	370c      	adds	r7, #12
24005272:	46bd      	mov	sp, r7
24005274:	f85d 7b04 	ldr.w	r7, [sp], #4
24005278:	4770      	bx	lr
2400527a:	bf00      	nop
2400527c:	58024800 	.word	0x58024800

24005280 <HAL_PWREx_GetWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval The Wake-Up pin flag.
  */
uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
{
24005280:	b480      	push	{r7}
24005282:	b083      	sub	sp, #12
24005284:	af00      	add	r7, sp, #0
24005286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Return the wake up pin flag */
  return (PWR->WKUPFR & WakeUpFlag);
24005288:	4b04      	ldr	r3, [pc, #16]	; (2400529c <HAL_PWREx_GetWakeupFlag+0x1c>)
2400528a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
2400528c:	687b      	ldr	r3, [r7, #4]
2400528e:	4013      	ands	r3, r2
}
24005290:	4618      	mov	r0, r3
24005292:	370c      	adds	r7, #12
24005294:	46bd      	mov	sp, r7
24005296:	f85d 7b04 	ldr.w	r7, [sp], #4
2400529a:	4770      	bx	lr
2400529c:	58024800 	.word	0x58024800

240052a0 <HAL_PWREx_ClearWakeupFlag>:
  * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
  *         devices that support GPIOI port.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
{
240052a0:	b480      	push	{r7}
240052a2:	b083      	sub	sp, #12
240052a4:	af00      	add	r7, sp, #0
240052a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));

  /* Clear the wake up event received from wake up pin x */
  SET_BIT (PWR->WKUPCR, WakeUpFlag);
240052a8:	4b0a      	ldr	r3, [pc, #40]	; (240052d4 <HAL_PWREx_ClearWakeupFlag+0x34>)
240052aa:	6a1a      	ldr	r2, [r3, #32]
240052ac:	4909      	ldr	r1, [pc, #36]	; (240052d4 <HAL_PWREx_ClearWakeupFlag+0x34>)
240052ae:	687b      	ldr	r3, [r7, #4]
240052b0:	4313      	orrs	r3, r2
240052b2:	620b      	str	r3, [r1, #32]

  /* Check if the wake up event is well cleared */
  if ((PWR->WKUPFR & WakeUpFlag) != 0U)
240052b4:	4b07      	ldr	r3, [pc, #28]	; (240052d4 <HAL_PWREx_ClearWakeupFlag+0x34>)
240052b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
240052b8:	687b      	ldr	r3, [r7, #4]
240052ba:	4013      	ands	r3, r2
240052bc:	2b00      	cmp	r3, #0
240052be:	d001      	beq.n	240052c4 <HAL_PWREx_ClearWakeupFlag+0x24>
  {
    return HAL_ERROR;
240052c0:	2301      	movs	r3, #1
240052c2:	e000      	b.n	240052c6 <HAL_PWREx_ClearWakeupFlag+0x26>
  }

  return HAL_OK;
240052c4:	2300      	movs	r3, #0
}
240052c6:	4618      	mov	r0, r3
240052c8:	370c      	adds	r7, #12
240052ca:	46bd      	mov	sp, r7
240052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
240052d0:	4770      	bx	lr
240052d2:	bf00      	nop
240052d4:	58024800 	.word	0x58024800

240052d8 <HAL_PWREx_WAKEUP_PIN_IRQHandler>:
  * @brief This function handles the PWR WAKEUP PIN interrupt request.
  * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
  * @retval None.
  */
void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
{
240052d8:	b580      	push	{r7, lr}
240052da:	af00      	add	r7, sp, #0
  /* Wakeup pin EXTI line interrupt detected */
  if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
240052dc:	4b2a      	ldr	r3, [pc, #168]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
240052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240052e0:	f003 0301 	and.w	r3, r3, #1
240052e4:	2b00      	cmp	r3, #0
240052e6:	d008      	beq.n	240052fa <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x22>
  {
    /* Clear PWR WKUPF1 flag */
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
240052e8:	4b27      	ldr	r3, [pc, #156]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
240052ea:	6a1b      	ldr	r3, [r3, #32]
240052ec:	4a26      	ldr	r2, [pc, #152]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
240052ee:	f043 0301 	orr.w	r3, r3, #1
240052f2:	6213      	str	r3, [r2, #32]

    /* PWR WKUP1 interrupt user callback */
    HAL_PWREx_WKUP1_Callback ();
240052f4:	f000 f84a 	bl	2400538c <HAL_PWREx_WKUP1_Callback>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);

    /* PWR WKUP6 interrupt user callback */
    HAL_PWREx_WKUP6_Callback ();
  }
}
240052f8:	e043      	b.n	24005382 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
240052fa:	4b23      	ldr	r3, [pc, #140]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
240052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240052fe:	f003 0302 	and.w	r3, r3, #2
24005302:	2b00      	cmp	r3, #0
24005304:	d008      	beq.n	24005318 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x40>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
24005306:	4b20      	ldr	r3, [pc, #128]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24005308:	6a1b      	ldr	r3, [r3, #32]
2400530a:	4a1f      	ldr	r2, [pc, #124]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
2400530c:	f043 0302 	orr.w	r3, r3, #2
24005310:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP2_Callback ();
24005312:	f000 f842 	bl	2400539a <HAL_PWREx_WKUP2_Callback>
}
24005316:	e034      	b.n	24005382 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
24005318:	4b1b      	ldr	r3, [pc, #108]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
2400531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400531c:	f003 0304 	and.w	r3, r3, #4
24005320:	2b00      	cmp	r3, #0
24005322:	d008      	beq.n	24005336 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x5e>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
24005324:	4b18      	ldr	r3, [pc, #96]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24005326:	6a1b      	ldr	r3, [r3, #32]
24005328:	4a17      	ldr	r2, [pc, #92]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
2400532a:	f043 0304 	orr.w	r3, r3, #4
2400532e:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP3_Callback ();
24005330:	f000 f83a 	bl	240053a8 <HAL_PWREx_WKUP3_Callback>
}
24005334:	e025      	b.n	24005382 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
24005336:	4b14      	ldr	r3, [pc, #80]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2400533a:	f003 0308 	and.w	r3, r3, #8
2400533e:	2b00      	cmp	r3, #0
24005340:	d008      	beq.n	24005354 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x7c>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
24005342:	4b11      	ldr	r3, [pc, #68]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24005344:	6a1b      	ldr	r3, [r3, #32]
24005346:	4a10      	ldr	r2, [pc, #64]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24005348:	f043 0308 	orr.w	r3, r3, #8
2400534c:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP4_Callback ();
2400534e:	f000 f832 	bl	240053b6 <HAL_PWREx_WKUP4_Callback>
}
24005352:	e016      	b.n	24005382 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
  else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
24005354:	4b0c      	ldr	r3, [pc, #48]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24005358:	f003 0310 	and.w	r3, r3, #16
2400535c:	2b00      	cmp	r3, #0
2400535e:	d008      	beq.n	24005372 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0x9a>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
24005360:	4b09      	ldr	r3, [pc, #36]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24005362:	6a1b      	ldr	r3, [r3, #32]
24005364:	4a08      	ldr	r2, [pc, #32]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24005366:	f043 0310 	orr.w	r3, r3, #16
2400536a:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP5_Callback ();
2400536c:	f000 f82a 	bl	240053c4 <HAL_PWREx_WKUP5_Callback>
}
24005370:	e007      	b.n	24005382 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xaa>
    __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
24005372:	4b05      	ldr	r3, [pc, #20]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24005374:	6a1b      	ldr	r3, [r3, #32]
24005376:	4a04      	ldr	r2, [pc, #16]	; (24005388 <HAL_PWREx_WAKEUP_PIN_IRQHandler+0xb0>)
24005378:	f043 0320 	orr.w	r3, r3, #32
2400537c:	6213      	str	r3, [r2, #32]
    HAL_PWREx_WKUP6_Callback ();
2400537e:	f000 f828 	bl	240053d2 <HAL_PWREx_WKUP6_Callback>
}
24005382:	bf00      	nop
24005384:	bd80      	pop	{r7, pc}
24005386:	bf00      	nop
24005388:	58024800 	.word	0x58024800

2400538c <HAL_PWREx_WKUP1_Callback>:
/**
  * @brief PWR WKUP1 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP1_Callback (void)
{
2400538c:	b480      	push	{r7}
2400538e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP1Callback can be implemented in the user file
  */
}
24005390:	bf00      	nop
24005392:	46bd      	mov	sp, r7
24005394:	f85d 7b04 	ldr.w	r7, [sp], #4
24005398:	4770      	bx	lr

2400539a <HAL_PWREx_WKUP2_Callback>:
/**
  * @brief PWR WKUP2 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP2_Callback (void)
{
2400539a:	b480      	push	{r7}
2400539c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP2Callback can be implemented in the user file
  */
}
2400539e:	bf00      	nop
240053a0:	46bd      	mov	sp, r7
240053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
240053a6:	4770      	bx	lr

240053a8 <HAL_PWREx_WKUP3_Callback>:
/**
  * @brief PWR WKUP3 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP3_Callback (void)
{
240053a8:	b480      	push	{r7}
240053aa:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP3Callback can be implemented in the user file
  */
}
240053ac:	bf00      	nop
240053ae:	46bd      	mov	sp, r7
240053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
240053b4:	4770      	bx	lr

240053b6 <HAL_PWREx_WKUP4_Callback>:
/**
  * @brief PWR WKUP4 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP4_Callback (void)
{
240053b6:	b480      	push	{r7}
240053b8:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP4Callback can be implemented in the user file
  */
}
240053ba:	bf00      	nop
240053bc:	46bd      	mov	sp, r7
240053be:	f85d 7b04 	ldr.w	r7, [sp], #4
240053c2:	4770      	bx	lr

240053c4 <HAL_PWREx_WKUP5_Callback>:
/**
  * @brief PWR WKUP5 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP5_Callback (void)
{
240053c4:	b480      	push	{r7}
240053c6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP5Callback can be implemented in the user file
  */
}
240053c8:	bf00      	nop
240053ca:	46bd      	mov	sp, r7
240053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
240053d0:	4770      	bx	lr

240053d2 <HAL_PWREx_WKUP6_Callback>:
/**
  * @brief PWR WKUP6 interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_WKUP6_Callback (void)
{
240053d2:	b480      	push	{r7}
240053d4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWREx_WKUP6Callback can be implemented in the user file
  */
}
240053d6:	bf00      	nop
240053d8:	46bd      	mov	sp, r7
240053da:	f85d 7b04 	ldr.w	r7, [sp], #4
240053de:	4770      	bx	lr

240053e0 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
{
240053e0:	b580      	push	{r7, lr}
240053e2:	b082      	sub	sp, #8
240053e4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the Backup regulator */
  SET_BIT (PWR->CR2, PWR_CR2_BREN);
240053e6:	4b10      	ldr	r3, [pc, #64]	; (24005428 <HAL_PWREx_EnableBkUpReg+0x48>)
240053e8:	689b      	ldr	r3, [r3, #8]
240053ea:	4a0f      	ldr	r2, [pc, #60]	; (24005428 <HAL_PWREx_EnableBkUpReg+0x48>)
240053ec:	f043 0301 	orr.w	r3, r3, #1
240053f0:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
240053f2:	f7fc fee3 	bl	240021bc <HAL_GetTick>
240053f6:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
240053f8:	e009      	b.n	2400540e <HAL_PWREx_EnableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
240053fa:	f7fc fedf 	bl	240021bc <HAL_GetTick>
240053fe:	4602      	mov	r2, r0
24005400:	687b      	ldr	r3, [r7, #4]
24005402:	1ad3      	subs	r3, r2, r3
24005404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24005408:	d901      	bls.n	2400540e <HAL_PWREx_EnableBkUpReg+0x2e>
    {
      return HAL_ERROR;
2400540a:	2301      	movs	r3, #1
2400540c:	e007      	b.n	2400541e <HAL_PWREx_EnableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
2400540e:	4b06      	ldr	r3, [pc, #24]	; (24005428 <HAL_PWREx_EnableBkUpReg+0x48>)
24005410:	689b      	ldr	r3, [r3, #8]
24005412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24005416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400541a:	d1ee      	bne.n	240053fa <HAL_PWREx_EnableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
2400541c:	2300      	movs	r3, #0
}
2400541e:	4618      	mov	r0, r3
24005420:	3708      	adds	r7, #8
24005422:	46bd      	mov	sp, r7
24005424:	bd80      	pop	{r7, pc}
24005426:	bf00      	nop
24005428:	58024800 	.word	0x58024800

2400542c <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disable the Backup Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
{
2400542c:	b580      	push	{r7, lr}
2400542e:	b082      	sub	sp, #8
24005430:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the Backup regulator */
  CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
24005432:	4b10      	ldr	r3, [pc, #64]	; (24005474 <HAL_PWREx_DisableBkUpReg+0x48>)
24005434:	689b      	ldr	r3, [r3, #8]
24005436:	4a0f      	ldr	r2, [pc, #60]	; (24005474 <HAL_PWREx_DisableBkUpReg+0x48>)
24005438:	f023 0301 	bic.w	r3, r3, #1
2400543c:	6093      	str	r3, [r2, #8]

  /* Get tick */
  tickstart = HAL_GetTick ();
2400543e:	f7fc febd 	bl	240021bc <HAL_GetTick>
24005442:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is reset */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
24005444:	e009      	b.n	2400545a <HAL_PWREx_DisableBkUpReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24005446:	f7fc feb9 	bl	240021bc <HAL_GetTick>
2400544a:	4602      	mov	r2, r0
2400544c:	687b      	ldr	r3, [r7, #4]
2400544e:	1ad3      	subs	r3, r2, r3
24005450:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
24005454:	d901      	bls.n	2400545a <HAL_PWREx_DisableBkUpReg+0x2e>
    {
      return HAL_ERROR;
24005456:	2301      	movs	r3, #1
24005458:	e007      	b.n	2400546a <HAL_PWREx_DisableBkUpReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
2400545a:	4b06      	ldr	r3, [pc, #24]	; (24005474 <HAL_PWREx_DisableBkUpReg+0x48>)
2400545c:	689b      	ldr	r3, [r3, #8]
2400545e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24005462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24005466:	d0ee      	beq.n	24005446 <HAL_PWREx_DisableBkUpReg+0x1a>
    }
  }

  return HAL_OK;
24005468:	2300      	movs	r3, #0
}
2400546a:	4618      	mov	r0, r3
2400546c:	3708      	adds	r7, #8
2400546e:	46bd      	mov	sp, r7
24005470:	bd80      	pop	{r7, pc}
24005472:	bf00      	nop
24005474:	58024800 	.word	0x58024800

24005478 <HAL_PWREx_EnableUSBReg>:
/**
  * @brief Enable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
{
24005478:	b580      	push	{r7, lr}
2400547a:	b082      	sub	sp, #8
2400547c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Enable the USB regulator */
  SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
2400547e:	4b10      	ldr	r3, [pc, #64]	; (240054c0 <HAL_PWREx_EnableUSBReg+0x48>)
24005480:	68db      	ldr	r3, [r3, #12]
24005482:	4a0f      	ldr	r2, [pc, #60]	; (240054c0 <HAL_PWREx_EnableUSBReg+0x48>)
24005484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
24005488:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
2400548a:	f7fc fe97 	bl	240021bc <HAL_GetTick>
2400548e:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
24005490:	e009      	b.n	240054a6 <HAL_PWREx_EnableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
24005492:	f7fc fe93 	bl	240021bc <HAL_GetTick>
24005496:	4602      	mov	r2, r0
24005498:	687b      	ldr	r3, [r7, #4]
2400549a:	1ad3      	subs	r3, r2, r3
2400549c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240054a0:	d901      	bls.n	240054a6 <HAL_PWREx_EnableUSBReg+0x2e>
    {
      return HAL_ERROR;
240054a2:	2301      	movs	r3, #1
240054a4:	e007      	b.n	240054b6 <HAL_PWREx_EnableUSBReg+0x3e>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
240054a6:	4b06      	ldr	r3, [pc, #24]	; (240054c0 <HAL_PWREx_EnableUSBReg+0x48>)
240054a8:	68db      	ldr	r3, [r3, #12]
240054aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
240054ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240054b2:	d1ee      	bne.n	24005492 <HAL_PWREx_EnableUSBReg+0x1a>
    }
  }

  return HAL_OK;
240054b4:	2300      	movs	r3, #0
}
240054b6:	4618      	mov	r0, r3
240054b8:	3708      	adds	r7, #8
240054ba:	46bd      	mov	sp, r7
240054bc:	bd80      	pop	{r7, pc}
240054be:	bf00      	nop
240054c0:	58024800 	.word	0x58024800

240054c4 <HAL_PWREx_DisableUSBReg>:
/**
  * @brief Disable the USB Regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
{
240054c4:	b580      	push	{r7, lr}
240054c6:	b082      	sub	sp, #8
240054c8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the USB regulator */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
240054ca:	4b10      	ldr	r3, [pc, #64]	; (2400550c <HAL_PWREx_DisableUSBReg+0x48>)
240054cc:	68db      	ldr	r3, [r3, #12]
240054ce:	4a0f      	ldr	r2, [pc, #60]	; (2400550c <HAL_PWREx_DisableUSBReg+0x48>)
240054d0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
240054d4:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
240054d6:	f7fc fe71 	bl	240021bc <HAL_GetTick>
240054da:	6078      	str	r0, [r7, #4]

  /* Wait till the USB regulator ready flag is reset */
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
240054dc:	e009      	b.n	240054f2 <HAL_PWREx_DisableUSBReg+0x2e>
  {
    if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
240054de:	f7fc fe6d 	bl	240021bc <HAL_GetTick>
240054e2:	4602      	mov	r2, r0
240054e4:	687b      	ldr	r3, [r7, #4]
240054e6:	1ad3      	subs	r3, r2, r3
240054e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
240054ec:	d901      	bls.n	240054f2 <HAL_PWREx_DisableUSBReg+0x2e>
    {
      return HAL_ERROR;
240054ee:	2301      	movs	r3, #1
240054f0:	e007      	b.n	24005502 <HAL_PWREx_DisableUSBReg+0x3e>
  while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
240054f2:	4b06      	ldr	r3, [pc, #24]	; (2400550c <HAL_PWREx_DisableUSBReg+0x48>)
240054f4:	68db      	ldr	r3, [r3, #12]
240054f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
240054fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
240054fe:	d0ee      	beq.n	240054de <HAL_PWREx_DisableUSBReg+0x1a>
    }
  }

  return HAL_OK;
24005500:	2300      	movs	r3, #0
}
24005502:	4618      	mov	r0, r3
24005504:	3708      	adds	r7, #8
24005506:	46bd      	mov	sp, r7
24005508:	bd80      	pop	{r7, pc}
2400550a:	bf00      	nop
2400550c:	58024800 	.word	0x58024800

24005510 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
24005510:	b480      	push	{r7}
24005512:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
24005514:	4b05      	ldr	r3, [pc, #20]	; (2400552c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
24005516:	68db      	ldr	r3, [r3, #12]
24005518:	4a04      	ldr	r2, [pc, #16]	; (2400552c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
2400551a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2400551e:	60d3      	str	r3, [r2, #12]
}
24005520:	bf00      	nop
24005522:	46bd      	mov	sp, r7
24005524:	f85d 7b04 	ldr.w	r7, [sp], #4
24005528:	4770      	bx	lr
2400552a:	bf00      	nop
2400552c:	58024800 	.word	0x58024800

24005530 <HAL_PWREx_DisableUSBVoltageDetector>:
/**
  * @brief Disable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_DisableUSBVoltageDetector (void)
{
24005530:	b480      	push	{r7}
24005532:	af00      	add	r7, sp, #0
  /* Disable the USB voltage detector */
  CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
24005534:	4b05      	ldr	r3, [pc, #20]	; (2400554c <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
24005536:	68db      	ldr	r3, [r3, #12]
24005538:	4a04      	ldr	r2, [pc, #16]	; (2400554c <HAL_PWREx_DisableUSBVoltageDetector+0x1c>)
2400553a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
2400553e:	60d3      	str	r3, [r2, #12]
}
24005540:	bf00      	nop
24005542:	46bd      	mov	sp, r7
24005544:	f85d 7b04 	ldr.w	r7, [sp], #4
24005548:	4770      	bx	lr
2400554a:	bf00      	nop
2400554c:	58024800 	.word	0x58024800

24005550 <HAL_PWREx_EnableBatteryCharging>:
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
  *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
  * @retval None.
  */
void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
{
24005550:	b480      	push	{r7}
24005552:	b083      	sub	sp, #12
24005554:	af00      	add	r7, sp, #0
24005556:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));

  /* Specify the charging resistor */
  MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
24005558:	4b09      	ldr	r3, [pc, #36]	; (24005580 <HAL_PWREx_EnableBatteryCharging+0x30>)
2400555a:	68db      	ldr	r3, [r3, #12]
2400555c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
24005560:	4907      	ldr	r1, [pc, #28]	; (24005580 <HAL_PWREx_EnableBatteryCharging+0x30>)
24005562:	687b      	ldr	r3, [r7, #4]
24005564:	4313      	orrs	r3, r2
24005566:	60cb      	str	r3, [r1, #12]

  /* Enable the Battery charging */
  SET_BIT (PWR->CR3, PWR_CR3_VBE);
24005568:	4b05      	ldr	r3, [pc, #20]	; (24005580 <HAL_PWREx_EnableBatteryCharging+0x30>)
2400556a:	68db      	ldr	r3, [r3, #12]
2400556c:	4a04      	ldr	r2, [pc, #16]	; (24005580 <HAL_PWREx_EnableBatteryCharging+0x30>)
2400556e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24005572:	60d3      	str	r3, [r2, #12]
}
24005574:	bf00      	nop
24005576:	370c      	adds	r7, #12
24005578:	46bd      	mov	sp, r7
2400557a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400557e:	4770      	bx	lr
24005580:	58024800 	.word	0x58024800

24005584 <HAL_PWREx_DisableBatteryCharging>:
/**
  * @brief Disable the Battery charging.
  * @retval None.
  */
void HAL_PWREx_DisableBatteryCharging (void)
{
24005584:	b480      	push	{r7}
24005586:	af00      	add	r7, sp, #0
  /* Disable the Battery charging */
  CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
24005588:	4b05      	ldr	r3, [pc, #20]	; (240055a0 <HAL_PWREx_DisableBatteryCharging+0x1c>)
2400558a:	68db      	ldr	r3, [r3, #12]
2400558c:	4a04      	ldr	r2, [pc, #16]	; (240055a0 <HAL_PWREx_DisableBatteryCharging+0x1c>)
2400558e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
24005592:	60d3      	str	r3, [r2, #12]
}
24005594:	bf00      	nop
24005596:	46bd      	mov	sp, r7
24005598:	f85d 7b04 	ldr.w	r7, [sp], #4
2400559c:	4770      	bx	lr
2400559e:	bf00      	nop
240055a0:	58024800 	.word	0x58024800

240055a4 <HAL_PWREx_EnableMonitoring>:
/**
  * @brief Enable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_EnableMonitoring (void)
{
240055a4:	b480      	push	{r7}
240055a6:	af00      	add	r7, sp, #0
  /* Enable the VBAT and Temperature monitoring */
  SET_BIT (PWR->CR2, PWR_CR2_MONEN);
240055a8:	4b05      	ldr	r3, [pc, #20]	; (240055c0 <HAL_PWREx_EnableMonitoring+0x1c>)
240055aa:	689b      	ldr	r3, [r3, #8]
240055ac:	4a04      	ldr	r2, [pc, #16]	; (240055c0 <HAL_PWREx_EnableMonitoring+0x1c>)
240055ae:	f043 0310 	orr.w	r3, r3, #16
240055b2:	6093      	str	r3, [r2, #8]
}
240055b4:	bf00      	nop
240055b6:	46bd      	mov	sp, r7
240055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
240055bc:	4770      	bx	lr
240055be:	bf00      	nop
240055c0:	58024800 	.word	0x58024800

240055c4 <HAL_PWREx_DisableMonitoring>:
/**
  * @brief Disable the VBAT and temperature monitoring.
  * @retval HAL status.
  */
void HAL_PWREx_DisableMonitoring (void)
{
240055c4:	b480      	push	{r7}
240055c6:	af00      	add	r7, sp, #0
  /* Disable the VBAT and Temperature monitoring */
  CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
240055c8:	4b05      	ldr	r3, [pc, #20]	; (240055e0 <HAL_PWREx_DisableMonitoring+0x1c>)
240055ca:	689b      	ldr	r3, [r3, #8]
240055cc:	4a04      	ldr	r2, [pc, #16]	; (240055e0 <HAL_PWREx_DisableMonitoring+0x1c>)
240055ce:	f023 0310 	bic.w	r3, r3, #16
240055d2:	6093      	str	r3, [r2, #8]
}
240055d4:	bf00      	nop
240055d6:	46bd      	mov	sp, r7
240055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
240055dc:	4770      	bx	lr
240055de:	bf00      	nop
240055e0:	58024800 	.word	0x58024800

240055e4 <HAL_PWREx_GetTemperatureLevel>:
  * @brief Indicate whether the junction temperature is between, above or below
  *        the thresholds.
  * @retval Temperature level.
  */
uint32_t HAL_PWREx_GetTemperatureLevel (void)
{
240055e4:	b480      	push	{r7}
240055e6:	b083      	sub	sp, #12
240055e8:	af00      	add	r7, sp, #0
  uint32_t tempLevel, regValue;

  /* Read the temperature flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
240055ea:	4b0f      	ldr	r3, [pc, #60]	; (24005628 <HAL_PWREx_GetTemperatureLevel+0x44>)
240055ec:	689b      	ldr	r3, [r3, #8]
240055ee:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
240055f2:	603b      	str	r3, [r7, #0]

  /* Check if the temperature is below the threshold */
  if (regValue == PWR_CR2_TEMPL)
240055f4:	683b      	ldr	r3, [r7, #0]
240055f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240055fa:	d103      	bne.n	24005604 <HAL_PWREx_GetTemperatureLevel+0x20>
  {
    tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
240055fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
24005600:	607b      	str	r3, [r7, #4]
24005602:	e009      	b.n	24005618 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* Check if the temperature is above the threshold */
  else if (regValue == PWR_CR2_TEMPH)
24005604:	683b      	ldr	r3, [r7, #0]
24005606:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
2400560a:	d103      	bne.n	24005614 <HAL_PWREx_GetTemperatureLevel+0x30>
  {
    tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
2400560c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
24005610:	607b      	str	r3, [r7, #4]
24005612:	e001      	b.n	24005618 <HAL_PWREx_GetTemperatureLevel+0x34>
  }
  /* The temperature is between the thresholds */
  else
  {
    tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
24005614:	2300      	movs	r3, #0
24005616:	607b      	str	r3, [r7, #4]
  }

  return tempLevel;
24005618:	687b      	ldr	r3, [r7, #4]
}
2400561a:	4618      	mov	r0, r3
2400561c:	370c      	adds	r7, #12
2400561e:	46bd      	mov	sp, r7
24005620:	f85d 7b04 	ldr.w	r7, [sp], #4
24005624:	4770      	bx	lr
24005626:	bf00      	nop
24005628:	58024800 	.word	0x58024800

2400562c <HAL_PWREx_GetVBATLevel>:
  * @brief Indicate whether the Battery voltage level is between, above or below
  *        the thresholds.
  * @retval VBAT level.
  */
uint32_t HAL_PWREx_GetVBATLevel (void)
{
2400562c:	b480      	push	{r7}
2400562e:	b083      	sub	sp, #12
24005630:	af00      	add	r7, sp, #0
  uint32_t VBATLevel, regValue;

  /* Read the VBAT flags */
  regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
24005632:	4b0f      	ldr	r3, [pc, #60]	; (24005670 <HAL_PWREx_GetVBATLevel+0x44>)
24005634:	689b      	ldr	r3, [r3, #8]
24005636:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
2400563a:	603b      	str	r3, [r7, #0]

  /* Check if the VBAT is below the threshold */
  if (regValue == PWR_CR2_VBATL)
2400563c:	683b      	ldr	r3, [r7, #0]
2400563e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24005642:	d103      	bne.n	2400564c <HAL_PWREx_GetVBATLevel+0x20>
  {
    VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
24005644:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
24005648:	607b      	str	r3, [r7, #4]
2400564a:	e009      	b.n	24005660 <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* Check if the VBAT is above the threshold */
  else if (regValue == PWR_CR2_VBATH)
2400564c:	683b      	ldr	r3, [r7, #0]
2400564e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24005652:	d103      	bne.n	2400565c <HAL_PWREx_GetVBATLevel+0x30>
  {
    VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
24005654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
24005658:	607b      	str	r3, [r7, #4]
2400565a:	e001      	b.n	24005660 <HAL_PWREx_GetVBATLevel+0x34>
  }
  /* The VBAT is between the thresholds */
  else
  {
    VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
2400565c:	2300      	movs	r3, #0
2400565e:	607b      	str	r3, [r7, #4]
  }

  return VBATLevel;
24005660:	687b      	ldr	r3, [r7, #4]
}
24005662:	4618      	mov	r0, r3
24005664:	370c      	adds	r7, #12
24005666:	46bd      	mov	sp, r7
24005668:	f85d 7b04 	ldr.w	r7, [sp], #4
2400566c:	4770      	bx	lr
2400566e:	bf00      	nop
24005670:	58024800 	.word	0x58024800

24005674 <HAL_PWREx_ConfigAVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
{
24005674:	b480      	push	{r7}
24005676:	b083      	sub	sp, #12
24005678:	af00      	add	r7, sp, #0
2400567a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
  assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));

  /* Set the ALS[18:17] bits according to AVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
2400567c:	4b37      	ldr	r3, [pc, #220]	; (2400575c <HAL_PWREx_ConfigAVD+0xe8>)
2400567e:	681b      	ldr	r3, [r3, #0]
24005680:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
24005684:	687b      	ldr	r3, [r7, #4]
24005686:	681b      	ldr	r3, [r3, #0]
24005688:	4934      	ldr	r1, [pc, #208]	; (2400575c <HAL_PWREx_ConfigAVD+0xe8>)
2400568a:	4313      	orrs	r3, r2
2400568c:	600b      	str	r3, [r1, #0]

  /* Clear any previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
2400568e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24005692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24005696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400569a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400569e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_AVD_EXTI_DISABLE_IT ();
240056a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240056a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
240056aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240056ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240056b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
240056b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240056ba:	681b      	ldr	r3, [r3, #0]
240056bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240056c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240056c4:	6013      	str	r3, [r2, #0]
  __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
240056c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240056ca:	685b      	ldr	r3, [r3, #4]
240056cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240056d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240056d4:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Configure the interrupt mode */
  if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
240056d6:	687b      	ldr	r3, [r7, #4]
240056d8:	685b      	ldr	r3, [r3, #4]
240056da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240056de:	2b00      	cmp	r3, #0
240056e0:	d009      	beq.n	240056f6 <HAL_PWREx_ConfigAVD+0x82>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_IT ();
240056e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240056e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
240056ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240056ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240056f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the event mode */
  if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
240056f6:	687b      	ldr	r3, [r7, #4]
240056f8:	685b      	ldr	r3, [r3, #4]
240056fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240056fe:	2b00      	cmp	r3, #0
24005700:	d009      	beq.n	24005716 <HAL_PWREx_ConfigAVD+0xa2>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
24005702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24005706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
2400570a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400570e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24005712:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
24005716:	687b      	ldr	r3, [r7, #4]
24005718:	685b      	ldr	r3, [r3, #4]
2400571a:	f003 0301 	and.w	r3, r3, #1
2400571e:	2b00      	cmp	r3, #0
24005720:	d007      	beq.n	24005732 <HAL_PWREx_ConfigAVD+0xbe>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
24005722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24005726:	681b      	ldr	r3, [r3, #0]
24005728:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400572c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24005730:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
24005732:	687b      	ldr	r3, [r7, #4]
24005734:	685b      	ldr	r3, [r3, #4]
24005736:	f003 0302 	and.w	r3, r3, #2
2400573a:	2b00      	cmp	r3, #0
2400573c:	d007      	beq.n	2400574e <HAL_PWREx_ConfigAVD+0xda>
  {
    __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
2400573e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24005742:	685b      	ldr	r3, [r3, #4]
24005744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24005748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400574c:	6053      	str	r3, [r2, #4]
  }
}
2400574e:	bf00      	nop
24005750:	370c      	adds	r7, #12
24005752:	46bd      	mov	sp, r7
24005754:	f85d 7b04 	ldr.w	r7, [sp], #4
24005758:	4770      	bx	lr
2400575a:	bf00      	nop
2400575c:	58024800 	.word	0x58024800

24005760 <HAL_PWREx_EnableAVD>:
/**
  * @brief Enable the Analog Voltage Detector (AVD).
  * @retval None.
  */
void HAL_PWREx_EnableAVD (void)
{
24005760:	b480      	push	{r7}
24005762:	af00      	add	r7, sp, #0
  /* Enable the Analog Voltage Detector */
  SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
24005764:	4b05      	ldr	r3, [pc, #20]	; (2400577c <HAL_PWREx_EnableAVD+0x1c>)
24005766:	681b      	ldr	r3, [r3, #0]
24005768:	4a04      	ldr	r2, [pc, #16]	; (2400577c <HAL_PWREx_EnableAVD+0x1c>)
2400576a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400576e:	6013      	str	r3, [r2, #0]
}
24005770:	bf00      	nop
24005772:	46bd      	mov	sp, r7
24005774:	f85d 7b04 	ldr.w	r7, [sp], #4
24005778:	4770      	bx	lr
2400577a:	bf00      	nop
2400577c:	58024800 	.word	0x58024800

24005780 <HAL_PWREx_DisableAVD>:
/**
  * @brief Disable the Analog Voltage Detector(AVD).
  * @retval None.
  */
void HAL_PWREx_DisableAVD (void)
{
24005780:	b480      	push	{r7}
24005782:	af00      	add	r7, sp, #0
  /* Disable the Analog Voltage Detector */
  CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
24005784:	4b05      	ldr	r3, [pc, #20]	; (2400579c <HAL_PWREx_DisableAVD+0x1c>)
24005786:	681b      	ldr	r3, [r3, #0]
24005788:	4a04      	ldr	r2, [pc, #16]	; (2400579c <HAL_PWREx_DisableAVD+0x1c>)
2400578a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2400578e:	6013      	str	r3, [r2, #0]
}
24005790:	bf00      	nop
24005792:	46bd      	mov	sp, r7
24005794:	f85d 7b04 	ldr.w	r7, [sp], #4
24005798:	4770      	bx	lr
2400579a:	bf00      	nop
2400579c:	58024800 	.word	0x58024800

240057a0 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
240057a0:	b580      	push	{r7, lr}
240057a2:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
240057a4:	4b1b      	ldr	r3, [pc, #108]	; (24005814 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
240057a6:	681b      	ldr	r3, [r3, #0]
240057a8:	f003 0310 	and.w	r3, r3, #16
240057ac:	2b00      	cmp	r3, #0
240057ae:	d014      	beq.n	240057da <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
240057b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240057b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240057bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240057c0:	d10b      	bne.n	240057da <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
240057c2:	f7ff fb12 	bl	24004dea <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
240057c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240057ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240057ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
240057d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240057d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
240057da:	4b0e      	ldr	r3, [pc, #56]	; (24005814 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
240057dc:	681b      	ldr	r3, [r3, #0]
240057de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240057e2:	2b00      	cmp	r3, #0
240057e4:	d014      	beq.n	24005810 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
240057e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
240057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
240057ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240057f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240057f6:	d10b      	bne.n	24005810 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
240057f8:	f000 f80e 	bl	24005818 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
240057fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
24005800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
24005804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
24005808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2400580c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
24005810:	bf00      	nop
24005812:	bd80      	pop	{r7, pc}
24005814:	58024800 	.word	0x58024800

24005818 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
24005818:	b480      	push	{r7}
2400581a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
2400581c:	bf00      	nop
2400581e:	46bd      	mov	sp, r7
24005820:	f85d 7b04 	ldr.w	r7, [sp], #4
24005824:	4770      	bx	lr
24005826:	bf00      	nop

24005828 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
24005828:	b580      	push	{r7, lr}
2400582a:	b086      	sub	sp, #24
2400582c:	af02      	add	r7, sp, #8
2400582e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24005830:	f7fc fcc4 	bl	240021bc <HAL_GetTick>
24005834:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
24005836:	687b      	ldr	r3, [r7, #4]
24005838:	2b00      	cmp	r3, #0
2400583a:	d101      	bne.n	24005840 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
2400583c:	2301      	movs	r3, #1
2400583e:	e05f      	b.n	24005900 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
24005840:	687b      	ldr	r3, [r7, #4]
24005842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24005846:	b2db      	uxtb	r3, r3
24005848:	2b00      	cmp	r3, #0
2400584a:	d107      	bne.n	2400585c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
2400584c:	6878      	ldr	r0, [r7, #4]
2400584e:	f7fb facf 	bl	24000df0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
24005852:	f241 3188 	movw	r1, #5000	; 0x1388
24005856:	6878      	ldr	r0, [r7, #4]
24005858:	f001 f978 	bl	24006b4c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
2400585c:	687b      	ldr	r3, [r7, #4]
2400585e:	681b      	ldr	r3, [r3, #0]
24005860:	681b      	ldr	r3, [r3, #0]
24005862:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
24005866:	687b      	ldr	r3, [r7, #4]
24005868:	689b      	ldr	r3, [r3, #8]
2400586a:	3b01      	subs	r3, #1
2400586c:	021a      	lsls	r2, r3, #8
2400586e:	687b      	ldr	r3, [r7, #4]
24005870:	681b      	ldr	r3, [r3, #0]
24005872:	430a      	orrs	r2, r1
24005874:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24005876:	687b      	ldr	r3, [r7, #4]
24005878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400587a:	9300      	str	r3, [sp, #0]
2400587c:	68fb      	ldr	r3, [r7, #12]
2400587e:	2200      	movs	r2, #0
24005880:	2120      	movs	r1, #32
24005882:	6878      	ldr	r0, [r7, #4]
24005884:	f001 fa71 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24005888:	4603      	mov	r3, r0
2400588a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
2400588c:	7afb      	ldrb	r3, [r7, #11]
2400588e:	2b00      	cmp	r3, #0
24005890:	d135      	bne.n	240058fe <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
24005892:	687b      	ldr	r3, [r7, #4]
24005894:	681b      	ldr	r3, [r3, #0]
24005896:	681a      	ldr	r2, [r3, #0]
24005898:	4b1b      	ldr	r3, [pc, #108]	; (24005908 <HAL_QSPI_Init+0xe0>)
2400589a:	4013      	ands	r3, r2
2400589c:	687a      	ldr	r2, [r7, #4]
2400589e:	6852      	ldr	r2, [r2, #4]
240058a0:	0611      	lsls	r1, r2, #24
240058a2:	687a      	ldr	r2, [r7, #4]
240058a4:	68d2      	ldr	r2, [r2, #12]
240058a6:	4311      	orrs	r1, r2
240058a8:	687a      	ldr	r2, [r7, #4]
240058aa:	69d2      	ldr	r2, [r2, #28]
240058ac:	4311      	orrs	r1, r2
240058ae:	687a      	ldr	r2, [r7, #4]
240058b0:	6a12      	ldr	r2, [r2, #32]
240058b2:	4311      	orrs	r1, r2
240058b4:	687a      	ldr	r2, [r7, #4]
240058b6:	6812      	ldr	r2, [r2, #0]
240058b8:	430b      	orrs	r3, r1
240058ba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
240058bc:	687b      	ldr	r3, [r7, #4]
240058be:	681b      	ldr	r3, [r3, #0]
240058c0:	685a      	ldr	r2, [r3, #4]
240058c2:	4b12      	ldr	r3, [pc, #72]	; (2400590c <HAL_QSPI_Init+0xe4>)
240058c4:	4013      	ands	r3, r2
240058c6:	687a      	ldr	r2, [r7, #4]
240058c8:	6912      	ldr	r2, [r2, #16]
240058ca:	0411      	lsls	r1, r2, #16
240058cc:	687a      	ldr	r2, [r7, #4]
240058ce:	6952      	ldr	r2, [r2, #20]
240058d0:	4311      	orrs	r1, r2
240058d2:	687a      	ldr	r2, [r7, #4]
240058d4:	6992      	ldr	r2, [r2, #24]
240058d6:	4311      	orrs	r1, r2
240058d8:	687a      	ldr	r2, [r7, #4]
240058da:	6812      	ldr	r2, [r2, #0]
240058dc:	430b      	orrs	r3, r1
240058de:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
240058e0:	687b      	ldr	r3, [r7, #4]
240058e2:	681b      	ldr	r3, [r3, #0]
240058e4:	681a      	ldr	r2, [r3, #0]
240058e6:	687b      	ldr	r3, [r7, #4]
240058e8:	681b      	ldr	r3, [r3, #0]
240058ea:	f042 0201 	orr.w	r2, r2, #1
240058ee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240058f0:	687b      	ldr	r3, [r7, #4]
240058f2:	2200      	movs	r2, #0
240058f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
240058f6:	687b      	ldr	r3, [r7, #4]
240058f8:	2201      	movs	r2, #1
240058fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
240058fe:	7afb      	ldrb	r3, [r7, #11]
}
24005900:	4618      	mov	r0, r3
24005902:	3710      	adds	r7, #16
24005904:	46bd      	mov	sp, r7
24005906:	bd80      	pop	{r7, pc}
24005908:	00ffff2f 	.word	0x00ffff2f
2400590c:	ffe0f8fe 	.word	0xffe0f8fe

24005910 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
24005910:	b580      	push	{r7, lr}
24005912:	b082      	sub	sp, #8
24005914:	af00      	add	r7, sp, #0
24005916:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
24005918:	687b      	ldr	r3, [r7, #4]
2400591a:	2b00      	cmp	r3, #0
2400591c:	d101      	bne.n	24005922 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
2400591e:	2301      	movs	r3, #1
24005920:	e012      	b.n	24005948 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
24005922:	687b      	ldr	r3, [r7, #4]
24005924:	681b      	ldr	r3, [r3, #0]
24005926:	681a      	ldr	r2, [r3, #0]
24005928:	687b      	ldr	r3, [r7, #4]
2400592a:	681b      	ldr	r3, [r3, #0]
2400592c:	f022 0201 	bic.w	r2, r2, #1
24005930:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
24005932:	6878      	ldr	r0, [r7, #4]
24005934:	f7fb faf8 	bl	24000f28 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24005938:	687b      	ldr	r3, [r7, #4]
2400593a:	2200      	movs	r2, #0
2400593c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
2400593e:	687b      	ldr	r3, [r7, #4]
24005940:	2200      	movs	r2, #0
24005942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
24005946:	2300      	movs	r3, #0
}
24005948:	4618      	mov	r0, r3
2400594a:	3708      	adds	r7, #8
2400594c:	46bd      	mov	sp, r7
2400594e:	bd80      	pop	{r7, pc}
  * @brief Initialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
24005950:	b480      	push	{r7}
24005952:	b083      	sub	sp, #12
24005954:	af00      	add	r7, sp, #0
24005956:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
24005958:	bf00      	nop
2400595a:	370c      	adds	r7, #12
2400595c:	46bd      	mov	sp, r7
2400595e:	f85d 7b04 	ldr.w	r7, [sp], #4
24005962:	4770      	bx	lr
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
24005964:	b480      	push	{r7}
24005966:	b083      	sub	sp, #12
24005968:	af00      	add	r7, sp, #0
2400596a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
2400596c:	bf00      	nop
2400596e:	370c      	adds	r7, #12
24005970:	46bd      	mov	sp, r7
24005972:	f85d 7b04 	ldr.w	r7, [sp], #4
24005976:	4770      	bx	lr

24005978 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi : QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
24005978:	b580      	push	{r7, lr}
2400597a:	b086      	sub	sp, #24
2400597c:	af00      	add	r7, sp, #0
2400597e:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
24005980:	687b      	ldr	r3, [r7, #4]
24005982:	681b      	ldr	r3, [r3, #0]
24005984:	689b      	ldr	r3, [r3, #8]
24005986:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
24005988:	687b      	ldr	r3, [r7, #4]
2400598a:	681b      	ldr	r3, [r3, #0]
2400598c:	681b      	ldr	r3, [r3, #0]
2400598e:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
24005990:	697b      	ldr	r3, [r7, #20]
24005992:	f003 0304 	and.w	r3, r3, #4
24005996:	2b00      	cmp	r3, #0
24005998:	d064      	beq.n	24005a64 <HAL_QSPI_IRQHandler+0xec>
2400599a:	693b      	ldr	r3, [r7, #16]
2400599c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240059a0:	2b00      	cmp	r3, #0
240059a2:	d05f      	beq.n	24005a64 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
240059a4:	687b      	ldr	r3, [r7, #4]
240059a6:	681b      	ldr	r3, [r3, #0]
240059a8:	3320      	adds	r3, #32
240059aa:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
240059ac:	687b      	ldr	r3, [r7, #4]
240059ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240059b2:	b2db      	uxtb	r3, r3
240059b4:	2b12      	cmp	r3, #18
240059b6:	d125      	bne.n	24005a04 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
240059b8:	e01c      	b.n	240059f4 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
240059ba:	687b      	ldr	r3, [r7, #4]
240059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240059be:	2b00      	cmp	r3, #0
240059c0:	d00f      	beq.n	240059e2 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
240059c2:	687b      	ldr	r3, [r7, #4]
240059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240059c6:	781a      	ldrb	r2, [r3, #0]
240059c8:	68fb      	ldr	r3, [r7, #12]
240059ca:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
240059cc:	687b      	ldr	r3, [r7, #4]
240059ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240059d0:	1c5a      	adds	r2, r3, #1
240059d2:	687b      	ldr	r3, [r7, #4]
240059d4:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
240059d6:	687b      	ldr	r3, [r7, #4]
240059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240059da:	1e5a      	subs	r2, r3, #1
240059dc:	687b      	ldr	r3, [r7, #4]
240059de:	62da      	str	r2, [r3, #44]	; 0x2c
240059e0:	e008      	b.n	240059f4 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
240059e2:	687b      	ldr	r3, [r7, #4]
240059e4:	681b      	ldr	r3, [r3, #0]
240059e6:	681a      	ldr	r2, [r3, #0]
240059e8:	687b      	ldr	r3, [r7, #4]
240059ea:	681b      	ldr	r3, [r3, #0]
240059ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
240059f0:	601a      	str	r2, [r3, #0]
          break;
240059f2:	e033      	b.n	24005a5c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
240059f4:	687b      	ldr	r3, [r7, #4]
240059f6:	681b      	ldr	r3, [r3, #0]
240059f8:	689b      	ldr	r3, [r3, #8]
240059fa:	f003 0304 	and.w	r3, r3, #4
240059fe:	2b00      	cmp	r3, #0
24005a00:	d1db      	bne.n	240059ba <HAL_QSPI_IRQHandler+0x42>
24005a02:	e02b      	b.n	24005a5c <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
24005a04:	687b      	ldr	r3, [r7, #4]
24005a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24005a0a:	b2db      	uxtb	r3, r3
24005a0c:	2b22      	cmp	r3, #34	; 0x22
24005a0e:	d125      	bne.n	24005a5c <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
24005a10:	e01d      	b.n	24005a4e <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
24005a12:	687b      	ldr	r3, [r7, #4]
24005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24005a16:	2b00      	cmp	r3, #0
24005a18:	d010      	beq.n	24005a3c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
24005a1a:	687b      	ldr	r3, [r7, #4]
24005a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24005a1e:	68fa      	ldr	r2, [r7, #12]
24005a20:	7812      	ldrb	r2, [r2, #0]
24005a22:	b2d2      	uxtb	r2, r2
24005a24:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
24005a26:	687b      	ldr	r3, [r7, #4]
24005a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24005a2a:	1c5a      	adds	r2, r3, #1
24005a2c:	687b      	ldr	r3, [r7, #4]
24005a2e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
24005a30:	687b      	ldr	r3, [r7, #4]
24005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24005a34:	1e5a      	subs	r2, r3, #1
24005a36:	687b      	ldr	r3, [r7, #4]
24005a38:	639a      	str	r2, [r3, #56]	; 0x38
24005a3a:	e008      	b.n	24005a4e <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
24005a3c:	687b      	ldr	r3, [r7, #4]
24005a3e:	681b      	ldr	r3, [r3, #0]
24005a40:	681a      	ldr	r2, [r3, #0]
24005a42:	687b      	ldr	r3, [r7, #4]
24005a44:	681b      	ldr	r3, [r3, #0]
24005a46:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
24005a4a:	601a      	str	r2, [r3, #0]
          break;
24005a4c:	e006      	b.n	24005a5c <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
24005a4e:	687b      	ldr	r3, [r7, #4]
24005a50:	681b      	ldr	r3, [r3, #0]
24005a52:	689b      	ldr	r3, [r3, #8]
24005a54:	f003 0304 	and.w	r3, r3, #4
24005a58:	2b00      	cmp	r3, #0
24005a5a:	d1da      	bne.n	24005a12 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
24005a5c:	6878      	ldr	r0, [r7, #4]
24005a5e:	f000 ff74 	bl	2400694a <HAL_QSPI_FifoThresholdCallback>
24005a62:	e13c      	b.n	24005cde <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
24005a64:	697b      	ldr	r3, [r7, #20]
24005a66:	f003 0302 	and.w	r3, r3, #2
24005a6a:	2b00      	cmp	r3, #0
24005a6c:	f000 80b0 	beq.w	24005bd0 <HAL_QSPI_IRQHandler+0x258>
24005a70:	693b      	ldr	r3, [r7, #16]
24005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24005a76:	2b00      	cmp	r3, #0
24005a78:	f000 80aa 	beq.w	24005bd0 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
24005a7c:	687b      	ldr	r3, [r7, #4]
24005a7e:	681b      	ldr	r3, [r3, #0]
24005a80:	2202      	movs	r2, #2
24005a82:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
24005a84:	687b      	ldr	r3, [r7, #4]
24005a86:	681b      	ldr	r3, [r3, #0]
24005a88:	681a      	ldr	r2, [r3, #0]
24005a8a:	687b      	ldr	r3, [r7, #4]
24005a8c:	681b      	ldr	r3, [r3, #0]
24005a8e:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
24005a92:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24005a94:	687b      	ldr	r3, [r7, #4]
24005a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24005a9a:	b2db      	uxtb	r3, r3
24005a9c:	2b12      	cmp	r3, #18
24005a9e:	d120      	bne.n	24005ae2 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24005aa0:	687b      	ldr	r3, [r7, #4]
24005aa2:	681b      	ldr	r3, [r3, #0]
24005aa4:	681b      	ldr	r3, [r3, #0]
24005aa6:	f003 0304 	and.w	r3, r3, #4
24005aaa:	2b00      	cmp	r3, #0
24005aac:	d011      	beq.n	24005ad2 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24005aae:	687b      	ldr	r3, [r7, #4]
24005ab0:	681b      	ldr	r3, [r3, #0]
24005ab2:	681a      	ldr	r2, [r3, #0]
24005ab4:	687b      	ldr	r3, [r7, #4]
24005ab6:	681b      	ldr	r3, [r3, #0]
24005ab8:	f022 0204 	bic.w	r2, r2, #4
24005abc:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
24005abe:	687b      	ldr	r3, [r7, #4]
24005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005ac2:	681b      	ldr	r3, [r3, #0]
24005ac4:	68da      	ldr	r2, [r3, #12]
24005ac6:	687b      	ldr	r3, [r7, #4]
24005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005aca:	681b      	ldr	r3, [r3, #0]
24005acc:	f022 0201 	bic.w	r2, r2, #1
24005ad0:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24005ad2:	687b      	ldr	r3, [r7, #4]
24005ad4:	2201      	movs	r2, #1
24005ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
24005ada:	6878      	ldr	r0, [r7, #4]
24005adc:	f000 ff2b 	bl	24006936 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24005ae0:	e0fa      	b.n	24005cd8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
24005ae2:	687b      	ldr	r3, [r7, #4]
24005ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24005ae8:	b2db      	uxtb	r3, r3
24005aea:	2b22      	cmp	r3, #34	; 0x22
24005aec:	d143      	bne.n	24005b76 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24005aee:	687b      	ldr	r3, [r7, #4]
24005af0:	681b      	ldr	r3, [r3, #0]
24005af2:	681b      	ldr	r3, [r3, #0]
24005af4:	f003 0304 	and.w	r3, r3, #4
24005af8:	2b00      	cmp	r3, #0
24005afa:	d012      	beq.n	24005b22 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24005afc:	687b      	ldr	r3, [r7, #4]
24005afe:	681b      	ldr	r3, [r3, #0]
24005b00:	681a      	ldr	r2, [r3, #0]
24005b02:	687b      	ldr	r3, [r7, #4]
24005b04:	681b      	ldr	r3, [r3, #0]
24005b06:	f022 0204 	bic.w	r2, r2, #4
24005b0a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
24005b0c:	687b      	ldr	r3, [r7, #4]
24005b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005b10:	681b      	ldr	r3, [r3, #0]
24005b12:	68da      	ldr	r2, [r3, #12]
24005b14:	687b      	ldr	r3, [r7, #4]
24005b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005b18:	681b      	ldr	r3, [r3, #0]
24005b1a:	f022 0201 	bic.w	r2, r2, #1
24005b1e:	60da      	str	r2, [r3, #12]
24005b20:	e021      	b.n	24005b66 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
24005b22:	687b      	ldr	r3, [r7, #4]
24005b24:	681b      	ldr	r3, [r3, #0]
24005b26:	3320      	adds	r3, #32
24005b28:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
24005b2a:	e013      	b.n	24005b54 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
24005b2c:	687b      	ldr	r3, [r7, #4]
24005b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24005b30:	2b00      	cmp	r3, #0
24005b32:	d017      	beq.n	24005b64 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
24005b34:	687b      	ldr	r3, [r7, #4]
24005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24005b38:	68fa      	ldr	r2, [r7, #12]
24005b3a:	7812      	ldrb	r2, [r2, #0]
24005b3c:	b2d2      	uxtb	r2, r2
24005b3e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
24005b40:	687b      	ldr	r3, [r7, #4]
24005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24005b44:	1c5a      	adds	r2, r3, #1
24005b46:	687b      	ldr	r3, [r7, #4]
24005b48:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
24005b4a:	687b      	ldr	r3, [r7, #4]
24005b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24005b4e:	1e5a      	subs	r2, r3, #1
24005b50:	687b      	ldr	r3, [r7, #4]
24005b52:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
24005b54:	687b      	ldr	r3, [r7, #4]
24005b56:	681b      	ldr	r3, [r3, #0]
24005b58:	689b      	ldr	r3, [r3, #8]
24005b5a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
24005b5e:	2b00      	cmp	r3, #0
24005b60:	d1e4      	bne.n	24005b2c <HAL_QSPI_IRQHandler+0x1b4>
24005b62:	e000      	b.n	24005b66 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
24005b64:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24005b66:	687b      	ldr	r3, [r7, #4]
24005b68:	2201      	movs	r2, #1
24005b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
24005b6e:	6878      	ldr	r0, [r7, #4]
24005b70:	f000 fed7 	bl	24006922 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24005b74:	e0b0      	b.n	24005cd8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
24005b76:	687b      	ldr	r3, [r7, #4]
24005b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24005b7c:	b2db      	uxtb	r3, r3
24005b7e:	2b02      	cmp	r3, #2
24005b80:	d107      	bne.n	24005b92 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24005b82:	687b      	ldr	r3, [r7, #4]
24005b84:	2201      	movs	r2, #1
24005b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
24005b8a:	6878      	ldr	r0, [r7, #4]
24005b8c:	f000 febf 	bl	2400690e <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24005b90:	e0a2      	b.n	24005cd8 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
24005b92:	687b      	ldr	r3, [r7, #4]
24005b94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24005b98:	b2db      	uxtb	r3, r3
24005b9a:	2b08      	cmp	r3, #8
24005b9c:	f040 809c 	bne.w	24005cd8 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
24005ba0:	687b      	ldr	r3, [r7, #4]
24005ba2:	681b      	ldr	r3, [r3, #0]
24005ba4:	695a      	ldr	r2, [r3, #20]
24005ba6:	687b      	ldr	r3, [r7, #4]
24005ba8:	681b      	ldr	r3, [r3, #0]
24005baa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24005bae:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24005bb0:	687b      	ldr	r3, [r7, #4]
24005bb2:	2201      	movs	r2, #1
24005bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
24005bb8:	687b      	ldr	r3, [r7, #4]
24005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005bbc:	2b00      	cmp	r3, #0
24005bbe:	d103      	bne.n	24005bc8 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
24005bc0:	6878      	ldr	r0, [r7, #4]
24005bc2:	f000 fe9a 	bl	240068fa <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24005bc6:	e087      	b.n	24005cd8 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
24005bc8:	6878      	ldr	r0, [r7, #4]
24005bca:	f000 fe8c 	bl	240068e6 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24005bce:	e083      	b.n	24005cd8 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
24005bd0:	697b      	ldr	r3, [r7, #20]
24005bd2:	f003 0308 	and.w	r3, r3, #8
24005bd6:	2b00      	cmp	r3, #0
24005bd8:	d01f      	beq.n	24005c1a <HAL_QSPI_IRQHandler+0x2a2>
24005bda:	693b      	ldr	r3, [r7, #16]
24005bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
24005be0:	2b00      	cmp	r3, #0
24005be2:	d01a      	beq.n	24005c1a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
24005be4:	687b      	ldr	r3, [r7, #4]
24005be6:	681b      	ldr	r3, [r3, #0]
24005be8:	2208      	movs	r2, #8
24005bea:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
24005bec:	687b      	ldr	r3, [r7, #4]
24005bee:	681b      	ldr	r3, [r3, #0]
24005bf0:	681b      	ldr	r3, [r3, #0]
24005bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24005bf6:	2b00      	cmp	r3, #0
24005bf8:	d00b      	beq.n	24005c12 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
24005bfa:	687b      	ldr	r3, [r7, #4]
24005bfc:	681b      	ldr	r3, [r3, #0]
24005bfe:	681a      	ldr	r2, [r3, #0]
24005c00:	687b      	ldr	r3, [r7, #4]
24005c02:	681b      	ldr	r3, [r3, #0]
24005c04:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
24005c08:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24005c0a:	687b      	ldr	r3, [r7, #4]
24005c0c:	2201      	movs	r2, #1
24005c0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
24005c12:	6878      	ldr	r0, [r7, #4]
24005c14:	f000 fea3 	bl	2400695e <HAL_QSPI_StatusMatchCallback>
24005c18:	e061      	b.n	24005cde <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
24005c1a:	697b      	ldr	r3, [r7, #20]
24005c1c:	f003 0301 	and.w	r3, r3, #1
24005c20:	2b00      	cmp	r3, #0
24005c22:	d047      	beq.n	24005cb4 <HAL_QSPI_IRQHandler+0x33c>
24005c24:	693b      	ldr	r3, [r7, #16]
24005c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24005c2a:	2b00      	cmp	r3, #0
24005c2c:	d042      	beq.n	24005cb4 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
24005c2e:	687b      	ldr	r3, [r7, #4]
24005c30:	681b      	ldr	r3, [r3, #0]
24005c32:	2201      	movs	r2, #1
24005c34:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
24005c36:	687b      	ldr	r3, [r7, #4]
24005c38:	681b      	ldr	r3, [r3, #0]
24005c3a:	681a      	ldr	r2, [r3, #0]
24005c3c:	687b      	ldr	r3, [r7, #4]
24005c3e:	681b      	ldr	r3, [r3, #0]
24005c40:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
24005c44:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
24005c46:	687b      	ldr	r3, [r7, #4]
24005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005c4a:	f043 0202 	orr.w	r2, r3, #2
24005c4e:	687b      	ldr	r3, [r7, #4]
24005c50:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24005c52:	687b      	ldr	r3, [r7, #4]
24005c54:	681b      	ldr	r3, [r3, #0]
24005c56:	681b      	ldr	r3, [r3, #0]
24005c58:	f003 0304 	and.w	r3, r3, #4
24005c5c:	2b00      	cmp	r3, #0
24005c5e:	d021      	beq.n	24005ca4 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24005c60:	687b      	ldr	r3, [r7, #4]
24005c62:	681b      	ldr	r3, [r3, #0]
24005c64:	681a      	ldr	r2, [r3, #0]
24005c66:	687b      	ldr	r3, [r7, #4]
24005c68:	681b      	ldr	r3, [r3, #0]
24005c6a:	f022 0204 	bic.w	r2, r2, #4
24005c6e:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
24005c70:	687b      	ldr	r3, [r7, #4]
24005c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005c74:	4a1c      	ldr	r2, [pc, #112]	; (24005ce8 <HAL_QSPI_IRQHandler+0x370>)
24005c76:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
24005c78:	687b      	ldr	r3, [r7, #4]
24005c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24005c7c:	4618      	mov	r0, r3
24005c7e:	f7fe fb56 	bl	2400432e <HAL_MDMA_Abort_IT>
24005c82:	4603      	mov	r3, r0
24005c84:	2b00      	cmp	r3, #0
24005c86:	d029      	beq.n	24005cdc <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24005c88:	687b      	ldr	r3, [r7, #4]
24005c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005c8c:	f043 0204 	orr.w	r2, r3, #4
24005c90:	687b      	ldr	r3, [r7, #4]
24005c92:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
24005c94:	687b      	ldr	r3, [r7, #4]
24005c96:	2201      	movs	r2, #1
24005c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
24005c9c:	6878      	ldr	r0, [r7, #4]
24005c9e:	f000 fe22 	bl	240068e6 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24005ca2:	e01b      	b.n	24005cdc <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
24005ca4:	687b      	ldr	r3, [r7, #4]
24005ca6:	2201      	movs	r2, #1
24005ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
24005cac:	6878      	ldr	r0, [r7, #4]
24005cae:	f000 fe1a 	bl	240068e6 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24005cb2:	e013      	b.n	24005cdc <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
24005cb4:	697b      	ldr	r3, [r7, #20]
24005cb6:	f003 0310 	and.w	r3, r3, #16
24005cba:	2b00      	cmp	r3, #0
24005cbc:	d00f      	beq.n	24005cde <HAL_QSPI_IRQHandler+0x366>
24005cbe:	693b      	ldr	r3, [r7, #16]
24005cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
24005cc4:	2b00      	cmp	r3, #0
24005cc6:	d00a      	beq.n	24005cde <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
24005cc8:	687b      	ldr	r3, [r7, #4]
24005cca:	681b      	ldr	r3, [r3, #0]
24005ccc:	2210      	movs	r2, #16
24005cce:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
24005cd0:	6878      	ldr	r0, [r7, #4]
24005cd2:	f000 fe4e 	bl	24006972 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
24005cd6:	e002      	b.n	24005cde <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
24005cd8:	bf00      	nop
24005cda:	e000      	b.n	24005cde <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24005cdc:	bf00      	nop
}
24005cde:	bf00      	nop
24005ce0:	3718      	adds	r7, #24
24005ce2:	46bd      	mov	sp, r7
24005ce4:	bd80      	pop	{r7, pc}
24005ce6:	bf00      	nop
24005ce8:	24006d05 	.word	0x24006d05

24005cec <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
24005cec:	b580      	push	{r7, lr}
24005cee:	b088      	sub	sp, #32
24005cf0:	af02      	add	r7, sp, #8
24005cf2:	60f8      	str	r0, [r7, #12]
24005cf4:	60b9      	str	r1, [r7, #8]
24005cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24005cf8:	f7fc fa60 	bl	240021bc <HAL_GetTick>
24005cfc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
24005cfe:	68fb      	ldr	r3, [r7, #12]
24005d00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24005d04:	b2db      	uxtb	r3, r3
24005d06:	2b01      	cmp	r3, #1
24005d08:	d101      	bne.n	24005d0e <HAL_QSPI_Command+0x22>
24005d0a:	2302      	movs	r3, #2
24005d0c:	e048      	b.n	24005da0 <HAL_QSPI_Command+0xb4>
24005d0e:	68fb      	ldr	r3, [r7, #12]
24005d10:	2201      	movs	r2, #1
24005d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24005d16:	68fb      	ldr	r3, [r7, #12]
24005d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24005d1c:	b2db      	uxtb	r3, r3
24005d1e:	2b01      	cmp	r3, #1
24005d20:	d137      	bne.n	24005d92 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24005d22:	68fb      	ldr	r3, [r7, #12]
24005d24:	2200      	movs	r2, #0
24005d26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
24005d28:	68fb      	ldr	r3, [r7, #12]
24005d2a:	2202      	movs	r2, #2
24005d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
24005d30:	687b      	ldr	r3, [r7, #4]
24005d32:	9300      	str	r3, [sp, #0]
24005d34:	693b      	ldr	r3, [r7, #16]
24005d36:	2200      	movs	r2, #0
24005d38:	2120      	movs	r1, #32
24005d3a:	68f8      	ldr	r0, [r7, #12]
24005d3c:	f001 f815 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24005d40:	4603      	mov	r3, r0
24005d42:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
24005d44:	7dfb      	ldrb	r3, [r7, #23]
24005d46:	2b00      	cmp	r3, #0
24005d48:	d125      	bne.n	24005d96 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24005d4a:	2200      	movs	r2, #0
24005d4c:	68b9      	ldr	r1, [r7, #8]
24005d4e:	68f8      	ldr	r0, [r7, #12]
24005d50:	f001 f842 	bl	24006dd8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
24005d54:	68bb      	ldr	r3, [r7, #8]
24005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24005d58:	2b00      	cmp	r3, #0
24005d5a:	d115      	bne.n	24005d88 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24005d5c:	687b      	ldr	r3, [r7, #4]
24005d5e:	9300      	str	r3, [sp, #0]
24005d60:	693b      	ldr	r3, [r7, #16]
24005d62:	2201      	movs	r2, #1
24005d64:	2102      	movs	r1, #2
24005d66:	68f8      	ldr	r0, [r7, #12]
24005d68:	f000 ffff 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24005d6c:	4603      	mov	r3, r0
24005d6e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
24005d70:	7dfb      	ldrb	r3, [r7, #23]
24005d72:	2b00      	cmp	r3, #0
24005d74:	d10f      	bne.n	24005d96 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24005d76:	68fb      	ldr	r3, [r7, #12]
24005d78:	681b      	ldr	r3, [r3, #0]
24005d7a:	2202      	movs	r2, #2
24005d7c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
24005d7e:	68fb      	ldr	r3, [r7, #12]
24005d80:	2201      	movs	r2, #1
24005d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24005d86:	e006      	b.n	24005d96 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
24005d88:	68fb      	ldr	r3, [r7, #12]
24005d8a:	2201      	movs	r2, #1
24005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24005d90:	e001      	b.n	24005d96 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
24005d92:	2302      	movs	r3, #2
24005d94:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24005d96:	68fb      	ldr	r3, [r7, #12]
24005d98:	2200      	movs	r2, #0
24005d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24005d9e:	7dfb      	ldrb	r3, [r7, #23]
}
24005da0:	4618      	mov	r0, r3
24005da2:	3718      	adds	r7, #24
24005da4:	46bd      	mov	sp, r7
24005da6:	bd80      	pop	{r7, pc}

24005da8 <HAL_QSPI_Command_IT>:
  * @param cmd : structure that contains the command configuration information
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd)
{
24005da8:	b580      	push	{r7, lr}
24005daa:	b086      	sub	sp, #24
24005dac:	af02      	add	r7, sp, #8
24005dae:	6078      	str	r0, [r7, #4]
24005db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24005db2:	f7fc fa03 	bl	240021bc <HAL_GetTick>
24005db6:	60b8      	str	r0, [r7, #8]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
24005db8:	687b      	ldr	r3, [r7, #4]
24005dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24005dbe:	b2db      	uxtb	r3, r3
24005dc0:	2b01      	cmp	r3, #1
24005dc2:	d101      	bne.n	24005dc8 <HAL_QSPI_Command_IT+0x20>
24005dc4:	2302      	movs	r3, #2
24005dc6:	e051      	b.n	24005e6c <HAL_QSPI_Command_IT+0xc4>
24005dc8:	687b      	ldr	r3, [r7, #4]
24005dca:	2201      	movs	r2, #1
24005dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24005dd0:	687b      	ldr	r3, [r7, #4]
24005dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24005dd6:	b2db      	uxtb	r3, r3
24005dd8:	2b01      	cmp	r3, #1
24005dda:	d140      	bne.n	24005e5e <HAL_QSPI_Command_IT+0xb6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24005ddc:	687b      	ldr	r3, [r7, #4]
24005dde:	2200      	movs	r2, #0
24005de0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
24005de2:	687b      	ldr	r3, [r7, #4]
24005de4:	2202      	movs	r2, #2
24005de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24005dea:	687b      	ldr	r3, [r7, #4]
24005dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24005dee:	9300      	str	r3, [sp, #0]
24005df0:	68bb      	ldr	r3, [r7, #8]
24005df2:	2200      	movs	r2, #0
24005df4:	2120      	movs	r1, #32
24005df6:	6878      	ldr	r0, [r7, #4]
24005df8:	f000 ffb7 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24005dfc:	4603      	mov	r3, r0
24005dfe:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
24005e00:	7bfb      	ldrb	r3, [r7, #15]
24005e02:	2b00      	cmp	r3, #0
24005e04:	d126      	bne.n	24005e54 <HAL_QSPI_Command_IT+0xac>
    {
      if (cmd->DataMode == QSPI_DATA_NONE)
24005e06:	683b      	ldr	r3, [r7, #0]
24005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24005e0a:	2b00      	cmp	r3, #0
24005e0c:	d103      	bne.n	24005e16 <HAL_QSPI_Command_IT+0x6e>
      {
        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24005e0e:	687b      	ldr	r3, [r7, #4]
24005e10:	681b      	ldr	r3, [r3, #0]
24005e12:	2203      	movs	r2, #3
24005e14:	60da      	str	r2, [r3, #12]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24005e16:	2200      	movs	r2, #0
24005e18:	6839      	ldr	r1, [r7, #0]
24005e1a:	6878      	ldr	r0, [r7, #4]
24005e1c:	f000 ffdc 	bl	24006dd8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
24005e20:	683b      	ldr	r3, [r7, #0]
24005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24005e24:	2b00      	cmp	r3, #0
24005e26:	d10c      	bne.n	24005e42 <HAL_QSPI_Command_IT+0x9a>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so activate TC and TE interrupts */
        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
24005e28:	687b      	ldr	r3, [r7, #4]
24005e2a:	2200      	movs	r2, #0
24005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Enable the QSPI Transfer Error Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_TC);
24005e30:	687b      	ldr	r3, [r7, #4]
24005e32:	681b      	ldr	r3, [r3, #0]
24005e34:	681a      	ldr	r2, [r3, #0]
24005e36:	687b      	ldr	r3, [r7, #4]
24005e38:	681b      	ldr	r3, [r3, #0]
24005e3a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
24005e3e:	601a      	str	r2, [r3, #0]
24005e40:	e013      	b.n	24005e6a <HAL_QSPI_Command_IT+0xc2>
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
24005e42:	687b      	ldr	r3, [r7, #4]
24005e44:	2201      	movs	r2, #1
24005e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process unlocked */
        __HAL_UNLOCK(hqspi);
24005e4a:	687b      	ldr	r3, [r7, #4]
24005e4c:	2200      	movs	r2, #0
24005e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24005e52:	e00a      	b.n	24005e6a <HAL_QSPI_Command_IT+0xc2>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24005e54:	687b      	ldr	r3, [r7, #4]
24005e56:	2200      	movs	r2, #0
24005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24005e5c:	e005      	b.n	24005e6a <HAL_QSPI_Command_IT+0xc2>
    }
  }
  else
  {
    status = HAL_BUSY;
24005e5e:	2302      	movs	r3, #2
24005e60:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24005e62:	687b      	ldr	r3, [r7, #4]
24005e64:	2200      	movs	r2, #0
24005e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
24005e6a:	7bfb      	ldrb	r3, [r7, #15]
}
24005e6c:	4618      	mov	r0, r3
24005e6e:	3710      	adds	r7, #16
24005e70:	46bd      	mov	sp, r7
24005e72:	bd80      	pop	{r7, pc}

24005e74 <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
24005e74:	b580      	push	{r7, lr}
24005e76:	b08a      	sub	sp, #40	; 0x28
24005e78:	af02      	add	r7, sp, #8
24005e7a:	60f8      	str	r0, [r7, #12]
24005e7c:	60b9      	str	r1, [r7, #8]
24005e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24005e80:	2300      	movs	r3, #0
24005e82:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
24005e84:	f7fc f99a 	bl	240021bc <HAL_GetTick>
24005e88:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
24005e8a:	68fb      	ldr	r3, [r7, #12]
24005e8c:	681b      	ldr	r3, [r3, #0]
24005e8e:	3320      	adds	r3, #32
24005e90:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
24005e92:	68fb      	ldr	r3, [r7, #12]
24005e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24005e98:	b2db      	uxtb	r3, r3
24005e9a:	2b01      	cmp	r3, #1
24005e9c:	d101      	bne.n	24005ea2 <HAL_QSPI_Transmit+0x2e>
24005e9e:	2302      	movs	r3, #2
24005ea0:	e076      	b.n	24005f90 <HAL_QSPI_Transmit+0x11c>
24005ea2:	68fb      	ldr	r3, [r7, #12]
24005ea4:	2201      	movs	r2, #1
24005ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24005eaa:	68fb      	ldr	r3, [r7, #12]
24005eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24005eb0:	b2db      	uxtb	r3, r3
24005eb2:	2b01      	cmp	r3, #1
24005eb4:	d165      	bne.n	24005f82 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24005eb6:	68fb      	ldr	r3, [r7, #12]
24005eb8:	2200      	movs	r2, #0
24005eba:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24005ebc:	68bb      	ldr	r3, [r7, #8]
24005ebe:	2b00      	cmp	r3, #0
24005ec0:	d056      	beq.n	24005f70 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24005ec2:	68fb      	ldr	r3, [r7, #12]
24005ec4:	2212      	movs	r2, #18
24005ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24005eca:	68fb      	ldr	r3, [r7, #12]
24005ecc:	681b      	ldr	r3, [r3, #0]
24005ece:	691b      	ldr	r3, [r3, #16]
24005ed0:	1c5a      	adds	r2, r3, #1
24005ed2:	68fb      	ldr	r3, [r7, #12]
24005ed4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24005ed6:	68fb      	ldr	r3, [r7, #12]
24005ed8:	681b      	ldr	r3, [r3, #0]
24005eda:	691b      	ldr	r3, [r3, #16]
24005edc:	1c5a      	adds	r2, r3, #1
24005ede:	68fb      	ldr	r3, [r7, #12]
24005ee0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
24005ee2:	68fb      	ldr	r3, [r7, #12]
24005ee4:	68ba      	ldr	r2, [r7, #8]
24005ee6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
24005ee8:	68fb      	ldr	r3, [r7, #12]
24005eea:	681b      	ldr	r3, [r3, #0]
24005eec:	695a      	ldr	r2, [r3, #20]
24005eee:	68fb      	ldr	r3, [r7, #12]
24005ef0:	681b      	ldr	r3, [r3, #0]
24005ef2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24005ef6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
24005ef8:	e01b      	b.n	24005f32 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
24005efa:	687b      	ldr	r3, [r7, #4]
24005efc:	9300      	str	r3, [sp, #0]
24005efe:	69bb      	ldr	r3, [r7, #24]
24005f00:	2201      	movs	r2, #1
24005f02:	2104      	movs	r1, #4
24005f04:	68f8      	ldr	r0, [r7, #12]
24005f06:	f000 ff30 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24005f0a:	4603      	mov	r3, r0
24005f0c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
24005f0e:	7ffb      	ldrb	r3, [r7, #31]
24005f10:	2b00      	cmp	r3, #0
24005f12:	d113      	bne.n	24005f3c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
24005f14:	68fb      	ldr	r3, [r7, #12]
24005f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24005f18:	781a      	ldrb	r2, [r3, #0]
24005f1a:	697b      	ldr	r3, [r7, #20]
24005f1c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
24005f1e:	68fb      	ldr	r3, [r7, #12]
24005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24005f22:	1c5a      	adds	r2, r3, #1
24005f24:	68fb      	ldr	r3, [r7, #12]
24005f26:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
24005f28:	68fb      	ldr	r3, [r7, #12]
24005f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24005f2c:	1e5a      	subs	r2, r3, #1
24005f2e:	68fb      	ldr	r3, [r7, #12]
24005f30:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
24005f32:	68fb      	ldr	r3, [r7, #12]
24005f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24005f36:	2b00      	cmp	r3, #0
24005f38:	d1df      	bne.n	24005efa <HAL_QSPI_Transmit+0x86>
24005f3a:	e000      	b.n	24005f3e <HAL_QSPI_Transmit+0xca>
          break;
24005f3c:	bf00      	nop
      }

      if (status == HAL_OK)
24005f3e:	7ffb      	ldrb	r3, [r7, #31]
24005f40:	2b00      	cmp	r3, #0
24005f42:	d110      	bne.n	24005f66 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
24005f44:	687b      	ldr	r3, [r7, #4]
24005f46:	9300      	str	r3, [sp, #0]
24005f48:	69bb      	ldr	r3, [r7, #24]
24005f4a:	2201      	movs	r2, #1
24005f4c:	2102      	movs	r1, #2
24005f4e:	68f8      	ldr	r0, [r7, #12]
24005f50:	f000 ff0b 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24005f54:	4603      	mov	r3, r0
24005f56:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
24005f58:	7ffb      	ldrb	r3, [r7, #31]
24005f5a:	2b00      	cmp	r3, #0
24005f5c:	d103      	bne.n	24005f66 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24005f5e:	68fb      	ldr	r3, [r7, #12]
24005f60:	681b      	ldr	r3, [r3, #0]
24005f62:	2202      	movs	r2, #2
24005f64:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
24005f66:	68fb      	ldr	r3, [r7, #12]
24005f68:	2201      	movs	r2, #1
24005f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
24005f6e:	e00a      	b.n	24005f86 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24005f70:	68fb      	ldr	r3, [r7, #12]
24005f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24005f74:	f043 0208 	orr.w	r2, r3, #8
24005f78:	68fb      	ldr	r3, [r7, #12]
24005f7a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24005f7c:	2301      	movs	r3, #1
24005f7e:	77fb      	strb	r3, [r7, #31]
24005f80:	e001      	b.n	24005f86 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
24005f82:	2302      	movs	r3, #2
24005f84:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24005f86:	68fb      	ldr	r3, [r7, #12]
24005f88:	2200      	movs	r2, #0
24005f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
24005f8e:	7ffb      	ldrb	r3, [r7, #31]
}
24005f90:	4618      	mov	r0, r3
24005f92:	3720      	adds	r7, #32
24005f94:	46bd      	mov	sp, r7
24005f96:	bd80      	pop	{r7, pc}

24005f98 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
24005f98:	b580      	push	{r7, lr}
24005f9a:	b08a      	sub	sp, #40	; 0x28
24005f9c:	af02      	add	r7, sp, #8
24005f9e:	60f8      	str	r0, [r7, #12]
24005fa0:	60b9      	str	r1, [r7, #8]
24005fa2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24005fa4:	2300      	movs	r3, #0
24005fa6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
24005fa8:	f7fc f908 	bl	240021bc <HAL_GetTick>
24005fac:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
24005fae:	68fb      	ldr	r3, [r7, #12]
24005fb0:	681b      	ldr	r3, [r3, #0]
24005fb2:	699b      	ldr	r3, [r3, #24]
24005fb4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
24005fb6:	68fb      	ldr	r3, [r7, #12]
24005fb8:	681b      	ldr	r3, [r3, #0]
24005fba:	3320      	adds	r3, #32
24005fbc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
24005fbe:	68fb      	ldr	r3, [r7, #12]
24005fc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24005fc4:	b2db      	uxtb	r3, r3
24005fc6:	2b01      	cmp	r3, #1
24005fc8:	d101      	bne.n	24005fce <HAL_QSPI_Receive+0x36>
24005fca:	2302      	movs	r3, #2
24005fcc:	e07d      	b.n	240060ca <HAL_QSPI_Receive+0x132>
24005fce:	68fb      	ldr	r3, [r7, #12]
24005fd0:	2201      	movs	r2, #1
24005fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24005fd6:	68fb      	ldr	r3, [r7, #12]
24005fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24005fdc:	b2db      	uxtb	r3, r3
24005fde:	2b01      	cmp	r3, #1
24005fe0:	d16c      	bne.n	240060bc <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24005fe2:	68fb      	ldr	r3, [r7, #12]
24005fe4:	2200      	movs	r2, #0
24005fe6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
24005fe8:	68bb      	ldr	r3, [r7, #8]
24005fea:	2b00      	cmp	r3, #0
24005fec:	d05d      	beq.n	240060aa <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
24005fee:	68fb      	ldr	r3, [r7, #12]
24005ff0:	2222      	movs	r2, #34	; 0x22
24005ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24005ff6:	68fb      	ldr	r3, [r7, #12]
24005ff8:	681b      	ldr	r3, [r3, #0]
24005ffa:	691b      	ldr	r3, [r3, #16]
24005ffc:	1c5a      	adds	r2, r3, #1
24005ffe:	68fb      	ldr	r3, [r7, #12]
24006000:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24006002:	68fb      	ldr	r3, [r7, #12]
24006004:	681b      	ldr	r3, [r3, #0]
24006006:	691b      	ldr	r3, [r3, #16]
24006008:	1c5a      	adds	r2, r3, #1
2400600a:	68fb      	ldr	r3, [r7, #12]
2400600c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
2400600e:	68fb      	ldr	r3, [r7, #12]
24006010:	68ba      	ldr	r2, [r7, #8]
24006012:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24006014:	68fb      	ldr	r3, [r7, #12]
24006016:	681b      	ldr	r3, [r3, #0]
24006018:	695b      	ldr	r3, [r3, #20]
2400601a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
2400601e:	68fb      	ldr	r3, [r7, #12]
24006020:	681b      	ldr	r3, [r3, #0]
24006022:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24006026:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24006028:	68fb      	ldr	r3, [r7, #12]
2400602a:	681b      	ldr	r3, [r3, #0]
2400602c:	697a      	ldr	r2, [r7, #20]
2400602e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
24006030:	e01c      	b.n	2400606c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
24006032:	687b      	ldr	r3, [r7, #4]
24006034:	9300      	str	r3, [sp, #0]
24006036:	69bb      	ldr	r3, [r7, #24]
24006038:	2201      	movs	r2, #1
2400603a:	2106      	movs	r1, #6
2400603c:	68f8      	ldr	r0, [r7, #12]
2400603e:	f000 fe94 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24006042:	4603      	mov	r3, r0
24006044:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
24006046:	7ffb      	ldrb	r3, [r7, #31]
24006048:	2b00      	cmp	r3, #0
2400604a:	d114      	bne.n	24006076 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
2400604c:	68fb      	ldr	r3, [r7, #12]
2400604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006050:	693a      	ldr	r2, [r7, #16]
24006052:	7812      	ldrb	r2, [r2, #0]
24006054:	b2d2      	uxtb	r2, r2
24006056:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
24006058:	68fb      	ldr	r3, [r7, #12]
2400605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400605c:	1c5a      	adds	r2, r3, #1
2400605e:	68fb      	ldr	r3, [r7, #12]
24006060:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
24006062:	68fb      	ldr	r3, [r7, #12]
24006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24006066:	1e5a      	subs	r2, r3, #1
24006068:	68fb      	ldr	r3, [r7, #12]
2400606a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
2400606c:	68fb      	ldr	r3, [r7, #12]
2400606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24006070:	2b00      	cmp	r3, #0
24006072:	d1de      	bne.n	24006032 <HAL_QSPI_Receive+0x9a>
24006074:	e000      	b.n	24006078 <HAL_QSPI_Receive+0xe0>
          break;
24006076:	bf00      	nop
      }

      if (status == HAL_OK)
24006078:	7ffb      	ldrb	r3, [r7, #31]
2400607a:	2b00      	cmp	r3, #0
2400607c:	d110      	bne.n	240060a0 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
2400607e:	687b      	ldr	r3, [r7, #4]
24006080:	9300      	str	r3, [sp, #0]
24006082:	69bb      	ldr	r3, [r7, #24]
24006084:	2201      	movs	r2, #1
24006086:	2102      	movs	r1, #2
24006088:	68f8      	ldr	r0, [r7, #12]
2400608a:	f000 fe6e 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
2400608e:	4603      	mov	r3, r0
24006090:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
24006092:	7ffb      	ldrb	r3, [r7, #31]
24006094:	2b00      	cmp	r3, #0
24006096:	d103      	bne.n	240060a0 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24006098:	68fb      	ldr	r3, [r7, #12]
2400609a:	681b      	ldr	r3, [r3, #0]
2400609c:	2202      	movs	r2, #2
2400609e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
240060a0:	68fb      	ldr	r3, [r7, #12]
240060a2:	2201      	movs	r2, #1
240060a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
240060a8:	e00a      	b.n	240060c0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
240060aa:	68fb      	ldr	r3, [r7, #12]
240060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240060ae:	f043 0208 	orr.w	r2, r3, #8
240060b2:	68fb      	ldr	r3, [r7, #12]
240060b4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
240060b6:	2301      	movs	r3, #1
240060b8:	77fb      	strb	r3, [r7, #31]
240060ba:	e001      	b.n	240060c0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
240060bc:	2302      	movs	r3, #2
240060be:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240060c0:	68fb      	ldr	r3, [r7, #12]
240060c2:	2200      	movs	r2, #0
240060c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
240060c8:	7ffb      	ldrb	r3, [r7, #31]
}
240060ca:	4618      	mov	r0, r3
240060cc:	3720      	adds	r7, #32
240060ce:	46bd      	mov	sp, r7
240060d0:	bd80      	pop	{r7, pc}

240060d2 <HAL_QSPI_Transmit_IT>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
240060d2:	b480      	push	{r7}
240060d4:	b085      	sub	sp, #20
240060d6:	af00      	add	r7, sp, #0
240060d8:	6078      	str	r0, [r7, #4]
240060da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240060dc:	2300      	movs	r3, #0
240060de:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
240060e0:	687b      	ldr	r3, [r7, #4]
240060e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240060e6:	b2db      	uxtb	r3, r3
240060e8:	2b01      	cmp	r3, #1
240060ea:	d101      	bne.n	240060f0 <HAL_QSPI_Transmit_IT+0x1e>
240060ec:	2302      	movs	r3, #2
240060ee:	e04f      	b.n	24006190 <HAL_QSPI_Transmit_IT+0xbe>
240060f0:	687b      	ldr	r3, [r7, #4]
240060f2:	2201      	movs	r2, #1
240060f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240060f8:	687b      	ldr	r3, [r7, #4]
240060fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240060fe:	b2db      	uxtb	r3, r3
24006100:	2b01      	cmp	r3, #1
24006102:	d13e      	bne.n	24006182 <HAL_QSPI_Transmit_IT+0xb0>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24006104:	687b      	ldr	r3, [r7, #4]
24006106:	2200      	movs	r2, #0
24006108:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
2400610a:	683b      	ldr	r3, [r7, #0]
2400610c:	2b00      	cmp	r3, #0
2400610e:	d02b      	beq.n	24006168 <HAL_QSPI_Transmit_IT+0x96>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
24006110:	687b      	ldr	r3, [r7, #4]
24006112:	2212      	movs	r2, #18
24006114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
24006118:	687b      	ldr	r3, [r7, #4]
2400611a:	681b      	ldr	r3, [r3, #0]
2400611c:	691b      	ldr	r3, [r3, #16]
2400611e:	1c5a      	adds	r2, r3, #1
24006120:	687b      	ldr	r3, [r7, #4]
24006122:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
24006124:	687b      	ldr	r3, [r7, #4]
24006126:	681b      	ldr	r3, [r3, #0]
24006128:	691b      	ldr	r3, [r3, #16]
2400612a:	1c5a      	adds	r2, r3, #1
2400612c:	687b      	ldr	r3, [r7, #4]
2400612e:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
24006130:	687b      	ldr	r3, [r7, #4]
24006132:	683a      	ldr	r2, [r7, #0]
24006134:	625a      	str	r2, [r3, #36]	; 0x24

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24006136:	687b      	ldr	r3, [r7, #4]
24006138:	681b      	ldr	r3, [r3, #0]
2400613a:	2203      	movs	r2, #3
2400613c:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
2400613e:	687b      	ldr	r3, [r7, #4]
24006140:	681b      	ldr	r3, [r3, #0]
24006142:	695a      	ldr	r2, [r3, #20]
24006144:	687b      	ldr	r3, [r7, #4]
24006146:	681b      	ldr	r3, [r3, #0]
24006148:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
2400614c:	615a      	str	r2, [r3, #20]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2400614e:	687b      	ldr	r3, [r7, #4]
24006150:	2200      	movs	r2, #0
24006152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
24006156:	687b      	ldr	r3, [r7, #4]
24006158:	681b      	ldr	r3, [r3, #0]
2400615a:	681a      	ldr	r2, [r3, #0]
2400615c:	687b      	ldr	r3, [r7, #4]
2400615e:	681b      	ldr	r3, [r3, #0]
24006160:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
24006164:	601a      	str	r2, [r3, #0]
24006166:	e012      	b.n	2400618e <HAL_QSPI_Transmit_IT+0xbc>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24006168:	687b      	ldr	r3, [r7, #4]
2400616a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400616c:	f043 0208 	orr.w	r2, r3, #8
24006170:	687b      	ldr	r3, [r7, #4]
24006172:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24006174:	2301      	movs	r3, #1
24006176:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24006178:	687b      	ldr	r3, [r7, #4]
2400617a:	2200      	movs	r2, #0
2400617c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24006180:	e005      	b.n	2400618e <HAL_QSPI_Transmit_IT+0xbc>
    }
  }
  else
  {
    status = HAL_BUSY;
24006182:	2302      	movs	r3, #2
24006184:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24006186:	687b      	ldr	r3, [r7, #4]
24006188:	2200      	movs	r2, #0
2400618a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2400618e:	7bfb      	ldrb	r3, [r7, #15]
}
24006190:	4618      	mov	r0, r3
24006192:	3714      	adds	r7, #20
24006194:	46bd      	mov	sp, r7
24006196:	f85d 7b04 	ldr.w	r7, [sp], #4
2400619a:	4770      	bx	lr

2400619c <HAL_QSPI_Receive_IT>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_IT(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
2400619c:	b480      	push	{r7}
2400619e:	b085      	sub	sp, #20
240061a0:	af00      	add	r7, sp, #0
240061a2:	6078      	str	r0, [r7, #4]
240061a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
240061a6:	2300      	movs	r3, #0
240061a8:	73fb      	strb	r3, [r7, #15]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
240061aa:	687b      	ldr	r3, [r7, #4]
240061ac:	681b      	ldr	r3, [r3, #0]
240061ae:	699b      	ldr	r3, [r3, #24]
240061b0:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
240061b2:	687b      	ldr	r3, [r7, #4]
240061b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
240061b8:	b2db      	uxtb	r3, r3
240061ba:	2b01      	cmp	r3, #1
240061bc:	d101      	bne.n	240061c2 <HAL_QSPI_Receive_IT+0x26>
240061be:	2302      	movs	r3, #2
240061c0:	e055      	b.n	2400626e <HAL_QSPI_Receive_IT+0xd2>
240061c2:	687b      	ldr	r3, [r7, #4]
240061c4:	2201      	movs	r2, #1
240061c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240061ca:	687b      	ldr	r3, [r7, #4]
240061cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240061d0:	b2db      	uxtb	r3, r3
240061d2:	2b01      	cmp	r3, #1
240061d4:	d144      	bne.n	24006260 <HAL_QSPI_Receive_IT+0xc4>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240061d6:	687b      	ldr	r3, [r7, #4]
240061d8:	2200      	movs	r2, #0
240061da:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
240061dc:	683b      	ldr	r3, [r7, #0]
240061de:	2b00      	cmp	r3, #0
240061e0:	d031      	beq.n	24006246 <HAL_QSPI_Receive_IT+0xaa>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
240061e2:	687b      	ldr	r3, [r7, #4]
240061e4:	2222      	movs	r2, #34	; 0x22
240061e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
240061ea:	687b      	ldr	r3, [r7, #4]
240061ec:	681b      	ldr	r3, [r3, #0]
240061ee:	691b      	ldr	r3, [r3, #16]
240061f0:	1c5a      	adds	r2, r3, #1
240061f2:	687b      	ldr	r3, [r7, #4]
240061f4:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
240061f6:	687b      	ldr	r3, [r7, #4]
240061f8:	681b      	ldr	r3, [r3, #0]
240061fa:	691b      	ldr	r3, [r3, #16]
240061fc:	1c5a      	adds	r2, r3, #1
240061fe:	687b      	ldr	r3, [r7, #4]
24006200:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
24006202:	687b      	ldr	r3, [r7, #4]
24006204:	683a      	ldr	r2, [r7, #0]
24006206:	631a      	str	r2, [r3, #48]	; 0x30

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_TC);
24006208:	687b      	ldr	r3, [r7, #4]
2400620a:	681b      	ldr	r3, [r3, #0]
2400620c:	2203      	movs	r2, #3
2400620e:	60da      	str	r2, [r3, #12]

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24006210:	687b      	ldr	r3, [r7, #4]
24006212:	681b      	ldr	r3, [r3, #0]
24006214:	695b      	ldr	r3, [r3, #20]
24006216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
2400621a:	687b      	ldr	r3, [r7, #4]
2400621c:	681b      	ldr	r3, [r3, #0]
2400621e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24006222:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
24006224:	687b      	ldr	r3, [r7, #4]
24006226:	681b      	ldr	r3, [r3, #0]
24006228:	68ba      	ldr	r2, [r7, #8]
2400622a:	619a      	str	r2, [r3, #24]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
2400622c:	687b      	ldr	r3, [r7, #4]
2400622e:	2200      	movs	r2, #0
24006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI transfer error, FIFO threshold and transfer complete Interrupts */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE | QSPI_IT_FT | QSPI_IT_TC);
24006234:	687b      	ldr	r3, [r7, #4]
24006236:	681b      	ldr	r3, [r3, #0]
24006238:	681a      	ldr	r2, [r3, #0]
2400623a:	687b      	ldr	r3, [r7, #4]
2400623c:	681b      	ldr	r3, [r3, #0]
2400623e:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
24006242:	601a      	str	r2, [r3, #0]
24006244:	e012      	b.n	2400626c <HAL_QSPI_Receive_IT+0xd0>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24006246:	687b      	ldr	r3, [r7, #4]
24006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400624a:	f043 0208 	orr.w	r2, r3, #8
2400624e:	687b      	ldr	r3, [r7, #4]
24006250:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24006252:	2301      	movs	r3, #1
24006254:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24006256:	687b      	ldr	r3, [r7, #4]
24006258:	2200      	movs	r2, #0
2400625a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2400625e:	e005      	b.n	2400626c <HAL_QSPI_Receive_IT+0xd0>
    }
  }
  else
  {
    status = HAL_BUSY;
24006260:	2302      	movs	r3, #2
24006262:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24006264:	687b      	ldr	r3, [r7, #4]
24006266:	2200      	movs	r2, #0
24006268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2400626c:	7bfb      	ldrb	r3, [r7, #15]
}
2400626e:	4618      	mov	r0, r3
24006270:	3714      	adds	r7, #20
24006272:	46bd      	mov	sp, r7
24006274:	f85d 7b04 	ldr.w	r7, [sp], #4
24006278:	4770      	bx	lr

2400627a <HAL_QSPI_Transmit_DMA>:
  * @param  pData : pointer to data buffer
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
2400627a:	b590      	push	{r4, r7, lr}
2400627c:	b087      	sub	sp, #28
2400627e:	af02      	add	r7, sp, #8
24006280:	6078      	str	r0, [r7, #4]
24006282:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006284:	2300      	movs	r3, #0
24006286:	73fb      	strb	r3, [r7, #15]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
24006288:	687b      	ldr	r3, [r7, #4]
2400628a:	681b      	ldr	r3, [r3, #0]
2400628c:	691b      	ldr	r3, [r3, #16]
2400628e:	3301      	adds	r3, #1
24006290:	60bb      	str	r3, [r7, #8]

  /* Process locked */
  __HAL_LOCK(hqspi);
24006292:	687b      	ldr	r3, [r7, #4]
24006294:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24006298:	b2db      	uxtb	r3, r3
2400629a:	2b01      	cmp	r3, #1
2400629c:	d101      	bne.n	240062a2 <HAL_QSPI_Transmit_DMA+0x28>
2400629e:	2302      	movs	r3, #2
240062a0:	e0cc      	b.n	2400643c <HAL_QSPI_Transmit_DMA+0x1c2>
240062a2:	687b      	ldr	r3, [r7, #4]
240062a4:	2201      	movs	r2, #1
240062a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
240062aa:	687b      	ldr	r3, [r7, #4]
240062ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240062b0:	b2db      	uxtb	r3, r3
240062b2:	2b01      	cmp	r3, #1
240062b4:	f040 80bb 	bne.w	2400642e <HAL_QSPI_Transmit_DMA+0x1b4>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
240062b8:	687b      	ldr	r3, [r7, #4]
240062ba:	2200      	movs	r2, #0
240062bc:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
240062be:	683b      	ldr	r3, [r7, #0]
240062c0:	2b00      	cmp	r3, #0
240062c2:	f000 80a7 	beq.w	24006414 <HAL_QSPI_Transmit_DMA+0x19a>
    {
      /* Configure counters of the handle */
      hqspi->TxXferCount = data_size;
240062c6:	687b      	ldr	r3, [r7, #4]
240062c8:	68ba      	ldr	r2, [r7, #8]
240062ca:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
240062cc:	687b      	ldr	r3, [r7, #4]
240062ce:	2212      	movs	r2, #18
240062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
240062d4:	687b      	ldr	r3, [r7, #4]
240062d6:	681b      	ldr	r3, [r3, #0]
240062d8:	2203      	movs	r2, #3
240062da:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->TxXferSize = hqspi->TxXferCount;
240062dc:	687b      	ldr	r3, [r7, #4]
240062de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240062e0:	687b      	ldr	r3, [r7, #4]
240062e2:	629a      	str	r2, [r3, #40]	; 0x28
        hqspi->pTxBuffPtr = pData;
240062e4:	687b      	ldr	r3, [r7, #4]
240062e6:	683a      	ldr	r2, [r7, #0]
240062e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Configure QSPI: CCR register with functional mode as indirect write */
        MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
240062ea:	687b      	ldr	r3, [r7, #4]
240062ec:	681b      	ldr	r3, [r3, #0]
240062ee:	695a      	ldr	r2, [r3, #20]
240062f0:	687b      	ldr	r3, [r7, #4]
240062f2:	681b      	ldr	r3, [r3, #0]
240062f4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
240062f8:	615a      	str	r2, [r3, #20]

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMATxCplt;
240062fa:	687b      	ldr	r3, [r7, #4]
240062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240062fe:	4a51      	ldr	r2, [pc, #324]	; (24006444 <HAL_QSPI_Transmit_DMA+0x1ca>)
24006300:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
24006302:	687b      	ldr	r3, [r7, #4]
24006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006306:	4a50      	ldr	r2, [pc, #320]	; (24006448 <HAL_QSPI_Transmit_DMA+0x1ce>)
24006308:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
2400630a:	687b      	ldr	r3, [r7, #4]
2400630c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400630e:	2200      	movs	r2, #0
24006310:	659a      	str	r2, [r3, #88]	; 0x58

        /* In Transmit mode , the MDMA destination is the QSPI DR register : Force the MDMA Destination Increment to disable */
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) ,MDMA_DEST_INC_DISABLE);
24006312:	687b      	ldr	r3, [r7, #4]
24006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006316:	681b      	ldr	r3, [r3, #0]
24006318:	6919      	ldr	r1, [r3, #16]
2400631a:	687b      	ldr	r3, [r7, #4]
2400631c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400631e:	681a      	ldr	r2, [r3, #0]
24006320:	4b4a      	ldr	r3, [pc, #296]	; (2400644c <HAL_QSPI_Transmit_DMA+0x1d2>)
24006322:	400b      	ands	r3, r1
24006324:	6113      	str	r3, [r2, #16]

        /* Update MDMA configuration with the correct SourceInc field for Write operation */
        if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_BYTE)
24006326:	687b      	ldr	r3, [r7, #4]
24006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400632a:	69db      	ldr	r3, [r3, #28]
2400632c:	2b00      	cmp	r3, #0
2400632e:	d10c      	bne.n	2400634a <HAL_QSPI_Transmit_DMA+0xd0>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_BYTE);
24006330:	687b      	ldr	r3, [r7, #4]
24006332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006334:	681b      	ldr	r3, [r3, #0]
24006336:	691a      	ldr	r2, [r3, #16]
24006338:	4b45      	ldr	r3, [pc, #276]	; (24006450 <HAL_QSPI_Transmit_DMA+0x1d6>)
2400633a:	4013      	ands	r3, r2
2400633c:	687a      	ldr	r2, [r7, #4]
2400633e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24006340:	6812      	ldr	r2, [r2, #0]
24006342:	f043 0302 	orr.w	r3, r3, #2
24006346:	6113      	str	r3, [r2, #16]
24006348:	e02c      	b.n	240063a4 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_HALFWORD)
2400634a:	687b      	ldr	r3, [r7, #4]
2400634c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400634e:	69db      	ldr	r3, [r3, #28]
24006350:	2b10      	cmp	r3, #16
24006352:	d10c      	bne.n	2400636e <HAL_QSPI_Transmit_DMA+0xf4>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_HALFWORD);
24006354:	687b      	ldr	r3, [r7, #4]
24006356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006358:	681b      	ldr	r3, [r3, #0]
2400635a:	691a      	ldr	r2, [r3, #16]
2400635c:	4b3c      	ldr	r3, [pc, #240]	; (24006450 <HAL_QSPI_Transmit_DMA+0x1d6>)
2400635e:	4013      	ands	r3, r2
24006360:	687a      	ldr	r2, [r7, #4]
24006362:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24006364:	6812      	ldr	r2, [r2, #0]
24006366:	f443 7381 	orr.w	r3, r3, #258	; 0x102
2400636a:	6113      	str	r3, [r2, #16]
2400636c:	e01a      	b.n	240063a4 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else if (hqspi->hmdma->Init.SourceDataSize == MDMA_SRC_DATASIZE_WORD)
2400636e:	687b      	ldr	r3, [r7, #4]
24006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006372:	69db      	ldr	r3, [r3, #28]
24006374:	2b20      	cmp	r3, #32
24006376:	d10d      	bne.n	24006394 <HAL_QSPI_Transmit_DMA+0x11a>
        {
          MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_WORD);
24006378:	687b      	ldr	r3, [r7, #4]
2400637a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400637c:	681b      	ldr	r3, [r3, #0]
2400637e:	691b      	ldr	r3, [r3, #16]
24006380:	4a33      	ldr	r2, [pc, #204]	; (24006450 <HAL_QSPI_Transmit_DMA+0x1d6>)
24006382:	401a      	ands	r2, r3
24006384:	687b      	ldr	r3, [r7, #4]
24006386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006388:	6819      	ldr	r1, [r3, #0]
2400638a:	f240 2302 	movw	r3, #514	; 0x202
2400638e:	4313      	orrs	r3, r2
24006390:	610b      	str	r3, [r1, #16]
24006392:	e007      	b.n	240063a4 <HAL_QSPI_Transmit_DMA+0x12a>
        }
        else
        {
          /* in case of incorrect source data size */
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24006394:	687b      	ldr	r3, [r7, #4]
24006396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24006398:	f043 0204 	orr.w	r2, r3, #4
2400639c:	687b      	ldr	r3, [r7, #4]
2400639e:	645a      	str	r2, [r3, #68]	; 0x44
          status = HAL_ERROR;
240063a0:	2301      	movs	r3, #1
240063a2:	73fb      	strb	r3, [r7, #15]
        }

        /* Enable the QSPI transmit MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)pData, (uint32_t)&hqspi->Instance->DR, hqspi->TxXferSize, 1) == HAL_OK)
240063a4:	687b      	ldr	r3, [r7, #4]
240063a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
240063a8:	6839      	ldr	r1, [r7, #0]
240063aa:	687b      	ldr	r3, [r7, #4]
240063ac:	681b      	ldr	r3, [r3, #0]
240063ae:	3320      	adds	r3, #32
240063b0:	461c      	mov	r4, r3
240063b2:	687b      	ldr	r3, [r7, #4]
240063b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
240063b6:	2301      	movs	r3, #1
240063b8:	9300      	str	r3, [sp, #0]
240063ba:	4613      	mov	r3, r2
240063bc:	4622      	mov	r2, r4
240063be:	f7fd feda 	bl	24004176 <HAL_MDMA_Start_IT>
240063c2:	4603      	mov	r3, r0
240063c4:	2b00      	cmp	r3, #0
240063c6:	d114      	bne.n	240063f2 <HAL_QSPI_Transmit_DMA+0x178>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
240063c8:	687b      	ldr	r3, [r7, #4]
240063ca:	2200      	movs	r2, #0
240063cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
240063d0:	687b      	ldr	r3, [r7, #4]
240063d2:	681b      	ldr	r3, [r3, #0]
240063d4:	681a      	ldr	r2, [r3, #0]
240063d6:	687b      	ldr	r3, [r7, #4]
240063d8:	681b      	ldr	r3, [r3, #0]
240063da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240063de:	601a      	str	r2, [r3, #0]

          /* Enable the MDMA transfer by setting the DMAEN bit in the QSPI CR register */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240063e0:	687b      	ldr	r3, [r7, #4]
240063e2:	681b      	ldr	r3, [r3, #0]
240063e4:	681a      	ldr	r2, [r3, #0]
240063e6:	687b      	ldr	r3, [r7, #4]
240063e8:	681b      	ldr	r3, [r3, #0]
240063ea:	f042 0204 	orr.w	r2, r2, #4
240063ee:	601a      	str	r2, [r3, #0]
240063f0:	e023      	b.n	2400643a <HAL_QSPI_Transmit_DMA+0x1c0>
        }
        else
        {
          status = HAL_ERROR;
240063f2:	2301      	movs	r3, #1
240063f4:	73fb      	strb	r3, [r7, #15]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
240063f6:	687b      	ldr	r3, [r7, #4]
240063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240063fa:	f043 0204 	orr.w	r2, r3, #4
240063fe:	687b      	ldr	r3, [r7, #4]
24006400:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
24006402:	687b      	ldr	r3, [r7, #4]
24006404:	2201      	movs	r2, #1
24006406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
2400640a:	687b      	ldr	r3, [r7, #4]
2400640c:	2200      	movs	r2, #0
2400640e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24006412:	e012      	b.n	2400643a <HAL_QSPI_Transmit_DMA+0x1c0>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24006414:	687b      	ldr	r3, [r7, #4]
24006416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24006418:	f043 0208 	orr.w	r2, r3, #8
2400641c:	687b      	ldr	r3, [r7, #4]
2400641e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
24006420:	2301      	movs	r3, #1
24006422:	73fb      	strb	r3, [r7, #15]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24006424:	687b      	ldr	r3, [r7, #4]
24006426:	2200      	movs	r2, #0
24006428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2400642c:	e005      	b.n	2400643a <HAL_QSPI_Transmit_DMA+0x1c0>
    }
  }
  else
  {
    status = HAL_BUSY;
2400642e:	2302      	movs	r3, #2
24006430:	73fb      	strb	r3, [r7, #15]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24006432:	687b      	ldr	r3, [r7, #4]
24006434:	2200      	movs	r2, #0
24006436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
2400643a:	7bfb      	ldrb	r3, [r7, #15]
}
2400643c:	4618      	mov	r0, r3
2400643e:	3714      	adds	r7, #20
24006440:	46bd      	mov	sp, r7
24006442:	bd90      	pop	{r4, r7, pc}
24006444:	24006c91 	.word	0x24006c91
24006448:	24006cc1 	.word	0x24006cc1
2400644c:	fffff3f3 	.word	0xfffff3f3
24006450:	fffffcfc 	.word	0xfffffcfc

24006454 <HAL_QSPI_Receive_DMA>:
  * @param  pData : pointer to data buffer.
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive_DMA(QSPI_HandleTypeDef *hqspi, uint8_t *pData)
{
24006454:	b590      	push	{r4, r7, lr}
24006456:	b089      	sub	sp, #36	; 0x24
24006458:	af02      	add	r7, sp, #8
2400645a:	6078      	str	r0, [r7, #4]
2400645c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
2400645e:	2300      	movs	r3, #0
24006460:	75fb      	strb	r3, [r7, #23]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
24006462:	687b      	ldr	r3, [r7, #4]
24006464:	681b      	ldr	r3, [r3, #0]
24006466:	699b      	ldr	r3, [r3, #24]
24006468:	613b      	str	r3, [r7, #16]
  uint32_t data_size = (READ_REG(hqspi->Instance->DLR) + 1U);
2400646a:	687b      	ldr	r3, [r7, #4]
2400646c:	681b      	ldr	r3, [r3, #0]
2400646e:	691b      	ldr	r3, [r3, #16]
24006470:	3301      	adds	r3, #1
24006472:	60fb      	str	r3, [r7, #12]

  /* Process locked */
  __HAL_LOCK(hqspi);
24006474:	687b      	ldr	r3, [r7, #4]
24006476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400647a:	b2db      	uxtb	r3, r3
2400647c:	2b01      	cmp	r3, #1
2400647e:	d101      	bne.n	24006484 <HAL_QSPI_Receive_DMA+0x30>
24006480:	2302      	movs	r3, #2
24006482:	e0d2      	b.n	2400662a <HAL_QSPI_Receive_DMA+0x1d6>
24006484:	687b      	ldr	r3, [r7, #4]
24006486:	2201      	movs	r2, #1
24006488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2400648c:	687b      	ldr	r3, [r7, #4]
2400648e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24006492:	b2db      	uxtb	r3, r3
24006494:	2b01      	cmp	r3, #1
24006496:	f040 80c1 	bne.w	2400661c <HAL_QSPI_Receive_DMA+0x1c8>
  {
    /* Clear the error code */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2400649a:	687b      	ldr	r3, [r7, #4]
2400649c:	2200      	movs	r2, #0
2400649e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
240064a0:	683b      	ldr	r3, [r7, #0]
240064a2:	2b00      	cmp	r3, #0
240064a4:	f000 80ad 	beq.w	24006602 <HAL_QSPI_Receive_DMA+0x1ae>
    {
      /* Configure counters of the handle */
      hqspi->RxXferCount = data_size;
240064a8:	687b      	ldr	r3, [r7, #4]
240064aa:	68fa      	ldr	r2, [r7, #12]
240064ac:	639a      	str	r2, [r3, #56]	; 0x38
        /* Update state */
        hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
240064ae:	687b      	ldr	r3, [r7, #4]
240064b0:	2222      	movs	r2, #34	; 0x22
240064b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, (QSPI_FLAG_TE | QSPI_FLAG_TC));
240064b6:	687b      	ldr	r3, [r7, #4]
240064b8:	681b      	ldr	r3, [r3, #0]
240064ba:	2203      	movs	r2, #3
240064bc:	60da      	str	r2, [r3, #12]

        /* Configure size and pointer of the handle */
        hqspi->RxXferSize = hqspi->RxXferCount;
240064be:	687b      	ldr	r3, [r7, #4]
240064c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
240064c2:	687b      	ldr	r3, [r7, #4]
240064c4:	635a      	str	r2, [r3, #52]	; 0x34
        hqspi->pRxBuffPtr = pData;
240064c6:	687b      	ldr	r3, [r7, #4]
240064c8:	683a      	ldr	r2, [r7, #0]
240064ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the QSPI MDMA transfer complete callback */
        hqspi->hmdma->XferCpltCallback = QSPI_DMARxCplt;
240064cc:	687b      	ldr	r3, [r7, #4]
240064ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240064d0:	4a58      	ldr	r2, [pc, #352]	; (24006634 <HAL_QSPI_Receive_DMA+0x1e0>)
240064d2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the MDMA error callback */
        hqspi->hmdma->XferErrorCallback = QSPI_DMAError;
240064d4:	687b      	ldr	r3, [r7, #4]
240064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240064d8:	4a57      	ldr	r2, [pc, #348]	; (24006638 <HAL_QSPI_Receive_DMA+0x1e4>)
240064da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear the MDMA abort callback */
        hqspi->hmdma->XferAbortCallback = NULL;
240064dc:	687b      	ldr	r3, [r7, #4]
240064de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240064e0:	2200      	movs	r2, #0
240064e2:	659a      	str	r2, [r3, #88]	; 0x58

      /* In Receive mode , the MDMA source is the QSPI DR register : Force the MDMA Source Increment to disable */
      MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_SINC | MDMA_CTCR_SINCOS) , MDMA_SRC_INC_DISABLE);
240064e4:	687b      	ldr	r3, [r7, #4]
240064e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240064e8:	681b      	ldr	r3, [r3, #0]
240064ea:	6919      	ldr	r1, [r3, #16]
240064ec:	687b      	ldr	r3, [r7, #4]
240064ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240064f0:	681a      	ldr	r2, [r3, #0]
240064f2:	4b52      	ldr	r3, [pc, #328]	; (2400663c <HAL_QSPI_Receive_DMA+0x1e8>)
240064f4:	400b      	ands	r3, r1
240064f6:	6113      	str	r3, [r2, #16]

      /* Update MDMA configuration with the correct DestinationInc field for read operation */
      if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_BYTE)
240064f8:	687b      	ldr	r3, [r7, #4]
240064fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240064fc:	6a1b      	ldr	r3, [r3, #32]
240064fe:	2b00      	cmp	r3, #0
24006500:	d10c      	bne.n	2400651c <HAL_QSPI_Receive_DMA+0xc8>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_BYTE);
24006502:	687b      	ldr	r3, [r7, #4]
24006504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006506:	681b      	ldr	r3, [r3, #0]
24006508:	691a      	ldr	r2, [r3, #16]
2400650a:	4b4d      	ldr	r3, [pc, #308]	; (24006640 <HAL_QSPI_Receive_DMA+0x1ec>)
2400650c:	4013      	ands	r3, r2
2400650e:	687a      	ldr	r2, [r7, #4]
24006510:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24006512:	6812      	ldr	r2, [r2, #0]
24006514:	f043 0308 	orr.w	r3, r3, #8
24006518:	6113      	str	r3, [r2, #16]
2400651a:	e02c      	b.n	24006576 <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_HALFWORD)
2400651c:	687b      	ldr	r3, [r7, #4]
2400651e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006520:	6a1b      	ldr	r3, [r3, #32]
24006522:	2b40      	cmp	r3, #64	; 0x40
24006524:	d10c      	bne.n	24006540 <HAL_QSPI_Receive_DMA+0xec>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_HALFWORD);
24006526:	687b      	ldr	r3, [r7, #4]
24006528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400652a:	681b      	ldr	r3, [r3, #0]
2400652c:	691a      	ldr	r2, [r3, #16]
2400652e:	4b44      	ldr	r3, [pc, #272]	; (24006640 <HAL_QSPI_Receive_DMA+0x1ec>)
24006530:	4013      	ands	r3, r2
24006532:	687a      	ldr	r2, [r7, #4]
24006534:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
24006536:	6812      	ldr	r2, [r2, #0]
24006538:	f443 6381 	orr.w	r3, r3, #1032	; 0x408
2400653c:	6113      	str	r3, [r2, #16]
2400653e:	e01a      	b.n	24006576 <HAL_QSPI_Receive_DMA+0x122>
      }
      else if (hqspi->hmdma->Init.DestDataSize == MDMA_DEST_DATASIZE_WORD)
24006540:	687b      	ldr	r3, [r7, #4]
24006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006544:	6a1b      	ldr	r3, [r3, #32]
24006546:	2b80      	cmp	r3, #128	; 0x80
24006548:	d10d      	bne.n	24006566 <HAL_QSPI_Receive_DMA+0x112>
      {
        MODIFY_REG(hqspi->hmdma->Instance->CTCR, (MDMA_CTCR_DINC | MDMA_CTCR_DINCOS) , MDMA_DEST_INC_WORD);
2400654a:	687b      	ldr	r3, [r7, #4]
2400654c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400654e:	681b      	ldr	r3, [r3, #0]
24006550:	691b      	ldr	r3, [r3, #16]
24006552:	4a3b      	ldr	r2, [pc, #236]	; (24006640 <HAL_QSPI_Receive_DMA+0x1ec>)
24006554:	401a      	ands	r2, r3
24006556:	687b      	ldr	r3, [r7, #4]
24006558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
2400655a:	6819      	ldr	r1, [r3, #0]
2400655c:	f640 0308 	movw	r3, #2056	; 0x808
24006560:	4313      	orrs	r3, r2
24006562:	610b      	str	r3, [r1, #16]
24006564:	e007      	b.n	24006576 <HAL_QSPI_Receive_DMA+0x122>
      }
      else
      {
       /* in case of incorrect destination data size */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24006566:	687b      	ldr	r3, [r7, #4]
24006568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
2400656a:	f043 0204 	orr.w	r2, r3, #4
2400656e:	687b      	ldr	r3, [r7, #4]
24006570:	645a      	str	r2, [r3, #68]	; 0x44
        status = HAL_ERROR;
24006572:	2301      	movs	r3, #1
24006574:	75fb      	strb	r3, [r7, #23]
      }
          /* Configure QSPI: CCR register with functional as indirect read */
          MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
24006576:	687b      	ldr	r3, [r7, #4]
24006578:	681b      	ldr	r3, [r3, #0]
2400657a:	695b      	ldr	r3, [r3, #20]
2400657c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
24006580:	687b      	ldr	r3, [r7, #4]
24006582:	681b      	ldr	r3, [r3, #0]
24006584:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
24006588:	615a      	str	r2, [r3, #20]

          /* Start the transfer by re-writing the address in AR register */
          WRITE_REG(hqspi->Instance->AR, addr_reg);
2400658a:	687b      	ldr	r3, [r7, #4]
2400658c:	681b      	ldr	r3, [r3, #0]
2400658e:	693a      	ldr	r2, [r7, #16]
24006590:	619a      	str	r2, [r3, #24]

        /* Enable the MDMA */
        if (HAL_MDMA_Start_IT(hqspi->hmdma, (uint32_t)&hqspi->Instance->DR, (uint32_t)pData, hqspi->RxXferSize, 1) == HAL_OK)
24006592:	687b      	ldr	r3, [r7, #4]
24006594:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
24006596:	687b      	ldr	r3, [r7, #4]
24006598:	681b      	ldr	r3, [r3, #0]
2400659a:	3320      	adds	r3, #32
2400659c:	461c      	mov	r4, r3
2400659e:	683a      	ldr	r2, [r7, #0]
240065a0:	687b      	ldr	r3, [r7, #4]
240065a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
240065a4:	2301      	movs	r3, #1
240065a6:	9300      	str	r3, [sp, #0]
240065a8:	460b      	mov	r3, r1
240065aa:	4621      	mov	r1, r4
240065ac:	f7fd fde3 	bl	24004176 <HAL_MDMA_Start_IT>
240065b0:	4603      	mov	r3, r0
240065b2:	2b00      	cmp	r3, #0
240065b4:	d114      	bne.n	240065e0 <HAL_QSPI_Receive_DMA+0x18c>
        {
          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
240065b6:	687b      	ldr	r3, [r7, #4]
240065b8:	2200      	movs	r2, #0
240065ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Enable the QSPI transfer error Interrupt */
          __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TE);
240065be:	687b      	ldr	r3, [r7, #4]
240065c0:	681b      	ldr	r3, [r3, #0]
240065c2:	681a      	ldr	r2, [r3, #0]
240065c4:	687b      	ldr	r3, [r7, #4]
240065c6:	681b      	ldr	r3, [r3, #0]
240065c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
240065cc:	601a      	str	r2, [r3, #0]

          /* Enable the MDMA transfer by setting the DMAEN bit in the QSPI CR register */
          SET_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240065ce:	687b      	ldr	r3, [r7, #4]
240065d0:	681b      	ldr	r3, [r3, #0]
240065d2:	681a      	ldr	r2, [r3, #0]
240065d4:	687b      	ldr	r3, [r7, #4]
240065d6:	681b      	ldr	r3, [r3, #0]
240065d8:	f042 0204 	orr.w	r2, r2, #4
240065dc:	601a      	str	r2, [r3, #0]
240065de:	e023      	b.n	24006628 <HAL_QSPI_Receive_DMA+0x1d4>
        }
        else
        {
          status = HAL_ERROR;
240065e0:	2301      	movs	r3, #1
240065e2:	75fb      	strb	r3, [r7, #23]
          hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
240065e4:	687b      	ldr	r3, [r7, #4]
240065e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
240065e8:	f043 0204 	orr.w	r2, r3, #4
240065ec:	687b      	ldr	r3, [r7, #4]
240065ee:	645a      	str	r2, [r3, #68]	; 0x44
          hqspi->State = HAL_QSPI_STATE_READY;
240065f0:	687b      	ldr	r3, [r7, #4]
240065f2:	2201      	movs	r2, #1
240065f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

          /* Process unlocked */
          __HAL_UNLOCK(hqspi);
240065f8:	687b      	ldr	r3, [r7, #4]
240065fa:	2200      	movs	r2, #0
240065fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
24006600:	e012      	b.n	24006628 <HAL_QSPI_Receive_DMA+0x1d4>
        }
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
24006602:	687b      	ldr	r3, [r7, #4]
24006604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24006606:	f043 0208 	orr.w	r2, r3, #8
2400660a:	687b      	ldr	r3, [r7, #4]
2400660c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
2400660e:	2301      	movs	r3, #1
24006610:	75fb      	strb	r3, [r7, #23]

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24006612:	687b      	ldr	r3, [r7, #4]
24006614:	2200      	movs	r2, #0
24006616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2400661a:	e005      	b.n	24006628 <HAL_QSPI_Receive_DMA+0x1d4>
    }
  }
  else
  {
    status = HAL_BUSY;
2400661c:	2302      	movs	r3, #2
2400661e:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24006620:	687b      	ldr	r3, [r7, #4]
24006622:	2200      	movs	r2, #0
24006624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
24006628:	7dfb      	ldrb	r3, [r7, #23]
}
2400662a:	4618      	mov	r0, r3
2400662c:	371c      	adds	r7, #28
2400662e:	46bd      	mov	sp, r7
24006630:	bd90      	pop	{r4, r7, pc}
24006632:	bf00      	nop
24006634:	24006c61 	.word	0x24006c61
24006638:	24006cc1 	.word	0x24006cc1
2400663c:	fffffcfc 	.word	0xfffffcfc
24006640:	fffff3f3 	.word	0xfffff3f3

24006644 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
24006644:	b580      	push	{r7, lr}
24006646:	b088      	sub	sp, #32
24006648:	af02      	add	r7, sp, #8
2400664a:	60f8      	str	r0, [r7, #12]
2400664c:	60b9      	str	r1, [r7, #8]
2400664e:	607a      	str	r2, [r7, #4]
24006650:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
24006652:	f7fb fdb3 	bl	240021bc <HAL_GetTick>
24006656:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
24006658:	68fb      	ldr	r3, [r7, #12]
2400665a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400665e:	b2db      	uxtb	r3, r3
24006660:	2b01      	cmp	r3, #1
24006662:	d101      	bne.n	24006668 <HAL_QSPI_AutoPolling+0x24>
24006664:	2302      	movs	r3, #2
24006666:	e060      	b.n	2400672a <HAL_QSPI_AutoPolling+0xe6>
24006668:	68fb      	ldr	r3, [r7, #12]
2400666a:	2201      	movs	r2, #1
2400666c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24006670:	68fb      	ldr	r3, [r7, #12]
24006672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24006676:	b2db      	uxtb	r3, r3
24006678:	2b01      	cmp	r3, #1
2400667a:	d14f      	bne.n	2400671c <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
2400667c:	68fb      	ldr	r3, [r7, #12]
2400667e:	2200      	movs	r2, #0
24006680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
24006682:	68fb      	ldr	r3, [r7, #12]
24006684:	2242      	movs	r2, #66	; 0x42
24006686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
2400668a:	683b      	ldr	r3, [r7, #0]
2400668c:	9300      	str	r3, [sp, #0]
2400668e:	693b      	ldr	r3, [r7, #16]
24006690:	2200      	movs	r2, #0
24006692:	2120      	movs	r1, #32
24006694:	68f8      	ldr	r0, [r7, #12]
24006696:	f000 fb68 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
2400669a:	4603      	mov	r3, r0
2400669c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
2400669e:	7dfb      	ldrb	r3, [r7, #23]
240066a0:	2b00      	cmp	r3, #0
240066a2:	d13d      	bne.n	24006720 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
240066a4:	68fb      	ldr	r3, [r7, #12]
240066a6:	681b      	ldr	r3, [r3, #0]
240066a8:	687a      	ldr	r2, [r7, #4]
240066aa:	6812      	ldr	r2, [r2, #0]
240066ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
240066ae:	68fb      	ldr	r3, [r7, #12]
240066b0:	681b      	ldr	r3, [r3, #0]
240066b2:	687a      	ldr	r2, [r7, #4]
240066b4:	6852      	ldr	r2, [r2, #4]
240066b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
240066b8:	68fb      	ldr	r3, [r7, #12]
240066ba:	681b      	ldr	r3, [r3, #0]
240066bc:	687a      	ldr	r2, [r7, #4]
240066be:	6892      	ldr	r2, [r2, #8]
240066c0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
240066c2:	68fb      	ldr	r3, [r7, #12]
240066c4:	681b      	ldr	r3, [r3, #0]
240066c6:	681b      	ldr	r3, [r3, #0]
240066c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
240066cc:	687b      	ldr	r3, [r7, #4]
240066ce:	691b      	ldr	r3, [r3, #16]
240066d0:	431a      	orrs	r2, r3
240066d2:	68fb      	ldr	r3, [r7, #12]
240066d4:	681b      	ldr	r3, [r3, #0]
240066d6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
240066da:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
240066dc:	687b      	ldr	r3, [r7, #4]
240066de:	68da      	ldr	r2, [r3, #12]
240066e0:	68bb      	ldr	r3, [r7, #8]
240066e2:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
240066e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
240066e8:	68b9      	ldr	r1, [r7, #8]
240066ea:	68f8      	ldr	r0, [r7, #12]
240066ec:	f000 fb74 	bl	24006dd8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
240066f0:	683b      	ldr	r3, [r7, #0]
240066f2:	9300      	str	r3, [sp, #0]
240066f4:	693b      	ldr	r3, [r7, #16]
240066f6:	2201      	movs	r2, #1
240066f8:	2108      	movs	r1, #8
240066fa:	68f8      	ldr	r0, [r7, #12]
240066fc:	f000 fb35 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24006700:	4603      	mov	r3, r0
24006702:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
24006704:	7dfb      	ldrb	r3, [r7, #23]
24006706:	2b00      	cmp	r3, #0
24006708:	d10a      	bne.n	24006720 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
2400670a:	68fb      	ldr	r3, [r7, #12]
2400670c:	681b      	ldr	r3, [r3, #0]
2400670e:	2208      	movs	r2, #8
24006710:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
24006712:	68fb      	ldr	r3, [r7, #12]
24006714:	2201      	movs	r2, #1
24006716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
2400671a:	e001      	b.n	24006720 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
2400671c:	2302      	movs	r3, #2
2400671e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24006720:	68fb      	ldr	r3, [r7, #12]
24006722:	2200      	movs	r2, #0
24006724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24006728:	7dfb      	ldrb	r3, [r7, #23]
}
2400672a:	4618      	mov	r0, r3
2400672c:	3718      	adds	r7, #24
2400672e:	46bd      	mov	sp, r7
24006730:	bd80      	pop	{r7, pc}

24006732 <HAL_QSPI_AutoPolling_IT>:
  * @param  cfg : structure that contains the polling configuration information.
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling_IT(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg)
{
24006732:	b580      	push	{r7, lr}
24006734:	b088      	sub	sp, #32
24006736:	af02      	add	r7, sp, #8
24006738:	60f8      	str	r0, [r7, #12]
2400673a:	60b9      	str	r1, [r7, #8]
2400673c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2400673e:	f7fb fd3d 	bl	240021bc <HAL_GetTick>
24006742:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));
  assert_param(IS_QSPI_AUTOMATIC_STOP(cfg->AutomaticStop));

  /* Process locked */
  __HAL_LOCK(hqspi);
24006744:	68fb      	ldr	r3, [r7, #12]
24006746:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400674a:	b2db      	uxtb	r3, r3
2400674c:	2b01      	cmp	r3, #1
2400674e:	d101      	bne.n	24006754 <HAL_QSPI_AutoPolling_IT+0x22>
24006750:	2302      	movs	r3, #2
24006752:	e062      	b.n	2400681a <HAL_QSPI_AutoPolling_IT+0xe8>
24006754:	68fb      	ldr	r3, [r7, #12]
24006756:	2201      	movs	r2, #1
24006758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2400675c:	68fb      	ldr	r3, [r7, #12]
2400675e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24006762:	b2db      	uxtb	r3, r3
24006764:	2b01      	cmp	r3, #1
24006766:	d151      	bne.n	2400680c <HAL_QSPI_AutoPolling_IT+0xda>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24006768:	68fb      	ldr	r3, [r7, #12]
2400676a:	2200      	movs	r2, #0
2400676c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
2400676e:	68fb      	ldr	r3, [r7, #12]
24006770:	2242      	movs	r2, #66	; 0x42
24006772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24006776:	68fb      	ldr	r3, [r7, #12]
24006778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400677a:	9300      	str	r3, [sp, #0]
2400677c:	693b      	ldr	r3, [r7, #16]
2400677e:	2200      	movs	r2, #0
24006780:	2120      	movs	r1, #32
24006782:	68f8      	ldr	r0, [r7, #12]
24006784:	f000 faf1 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24006788:	4603      	mov	r3, r0
2400678a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
2400678c:	7dfb      	ldrb	r3, [r7, #23]
2400678e:	2b00      	cmp	r3, #0
24006790:	d137      	bne.n	24006802 <HAL_QSPI_AutoPolling_IT+0xd0>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
24006792:	68fb      	ldr	r3, [r7, #12]
24006794:	681b      	ldr	r3, [r3, #0]
24006796:	687a      	ldr	r2, [r7, #4]
24006798:	6812      	ldr	r2, [r2, #0]
2400679a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
2400679c:	68fb      	ldr	r3, [r7, #12]
2400679e:	681b      	ldr	r3, [r3, #0]
240067a0:	687a      	ldr	r2, [r7, #4]
240067a2:	6852      	ldr	r2, [r2, #4]
240067a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
240067a6:	68fb      	ldr	r3, [r7, #12]
240067a8:	681b      	ldr	r3, [r3, #0]
240067aa:	687a      	ldr	r2, [r7, #4]
240067ac:	6892      	ldr	r2, [r2, #8]
240067ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop mode */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
240067b0:	68fb      	ldr	r3, [r7, #12]
240067b2:	681b      	ldr	r3, [r3, #0]
240067b4:	681b      	ldr	r3, [r3, #0]
240067b6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
240067ba:	687b      	ldr	r3, [r7, #4]
240067bc:	691a      	ldr	r2, [r3, #16]
240067be:	687b      	ldr	r3, [r7, #4]
240067c0:	695b      	ldr	r3, [r3, #20]
240067c2:	431a      	orrs	r2, r3
240067c4:	68fb      	ldr	r3, [r7, #12]
240067c6:	681b      	ldr	r3, [r3, #0]
240067c8:	430a      	orrs	r2, r1
240067ca:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | cfg->AutomaticStop));

      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TE | QSPI_FLAG_SM);
240067cc:	68fb      	ldr	r3, [r7, #12]
240067ce:	681b      	ldr	r3, [r3, #0]
240067d0:	2209      	movs	r2, #9
240067d2:	60da      	str	r2, [r3, #12]

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
240067d4:	687b      	ldr	r3, [r7, #4]
240067d6:	68da      	ldr	r2, [r3, #12]
240067d8:	68bb      	ldr	r3, [r7, #8]
240067da:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
240067dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
240067e0:	68b9      	ldr	r1, [r7, #8]
240067e2:	68f8      	ldr	r0, [r7, #12]
240067e4:	f000 faf8 	bl	24006dd8 <QSPI_Config>

      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
240067e8:	68fb      	ldr	r3, [r7, #12]
240067ea:	2200      	movs	r2, #0
240067ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Enable the QSPI Transfer Error and status match Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
240067f0:	68fb      	ldr	r3, [r7, #12]
240067f2:	681b      	ldr	r3, [r3, #0]
240067f4:	681a      	ldr	r2, [r3, #0]
240067f6:	68fb      	ldr	r3, [r7, #12]
240067f8:	681b      	ldr	r3, [r3, #0]
240067fa:	f442 2210 	orr.w	r2, r2, #589824	; 0x90000
240067fe:	601a      	str	r2, [r3, #0]
24006800:	e00a      	b.n	24006818 <HAL_QSPI_AutoPolling_IT+0xe6>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hqspi);
24006802:	68fb      	ldr	r3, [r7, #12]
24006804:	2200      	movs	r2, #0
24006806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
2400680a:	e005      	b.n	24006818 <HAL_QSPI_AutoPolling_IT+0xe6>
    }
  }
  else
  {
    status = HAL_BUSY;
2400680c:	2302      	movs	r3, #2
2400680e:	75fb      	strb	r3, [r7, #23]

    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24006810:	68fb      	ldr	r3, [r7, #12]
24006812:	2200      	movs	r2, #0
24006814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  /* Return function status */
  return status;
24006818:	7dfb      	ldrb	r3, [r7, #23]
}
2400681a:	4618      	mov	r0, r3
2400681c:	3718      	adds	r7, #24
2400681e:	46bd      	mov	sp, r7
24006820:	bd80      	pop	{r7, pc}

24006822 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
24006822:	b580      	push	{r7, lr}
24006824:	b088      	sub	sp, #32
24006826:	af02      	add	r7, sp, #8
24006828:	60f8      	str	r0, [r7, #12]
2400682a:	60b9      	str	r1, [r7, #8]
2400682c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
2400682e:	f7fb fcc5 	bl	240021bc <HAL_GetTick>
24006832:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
24006834:	68fb      	ldr	r3, [r7, #12]
24006836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
2400683a:	b2db      	uxtb	r3, r3
2400683c:	2b01      	cmp	r3, #1
2400683e:	d101      	bne.n	24006844 <HAL_QSPI_MemoryMapped+0x22>
24006840:	2302      	movs	r3, #2
24006842:	e04c      	b.n	240068de <HAL_QSPI_MemoryMapped+0xbc>
24006844:	68fb      	ldr	r3, [r7, #12]
24006846:	2201      	movs	r2, #1
24006848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
2400684c:	68fb      	ldr	r3, [r7, #12]
2400684e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24006852:	b2db      	uxtb	r3, r3
24006854:	2b01      	cmp	r3, #1
24006856:	d13b      	bne.n	240068d0 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
24006858:	68fb      	ldr	r3, [r7, #12]
2400685a:	2200      	movs	r2, #0
2400685c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
2400685e:	68fb      	ldr	r3, [r7, #12]
24006860:	2282      	movs	r2, #130	; 0x82
24006862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24006866:	68fb      	ldr	r3, [r7, #12]
24006868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400686a:	9300      	str	r3, [sp, #0]
2400686c:	693b      	ldr	r3, [r7, #16]
2400686e:	2200      	movs	r2, #0
24006870:	2120      	movs	r1, #32
24006872:	68f8      	ldr	r0, [r7, #12]
24006874:	f000 fa79 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24006878:	4603      	mov	r3, r0
2400687a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
2400687c:	7dfb      	ldrb	r3, [r7, #23]
2400687e:	2b00      	cmp	r3, #0
24006880:	d128      	bne.n	240068d4 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
24006882:	68fb      	ldr	r3, [r7, #12]
24006884:	681b      	ldr	r3, [r3, #0]
24006886:	681b      	ldr	r3, [r3, #0]
24006888:	f023 0108 	bic.w	r1, r3, #8
2400688c:	687b      	ldr	r3, [r7, #4]
2400688e:	685a      	ldr	r2, [r3, #4]
24006890:	68fb      	ldr	r3, [r7, #12]
24006892:	681b      	ldr	r3, [r3, #0]
24006894:	430a      	orrs	r2, r1
24006896:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
24006898:	687b      	ldr	r3, [r7, #4]
2400689a:	685b      	ldr	r3, [r3, #4]
2400689c:	2b08      	cmp	r3, #8
2400689e:	d110      	bne.n	240068c2 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
240068a0:	68fb      	ldr	r3, [r7, #12]
240068a2:	681b      	ldr	r3, [r3, #0]
240068a4:	687a      	ldr	r2, [r7, #4]
240068a6:	6812      	ldr	r2, [r2, #0]
240068a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
240068aa:	68fb      	ldr	r3, [r7, #12]
240068ac:	681b      	ldr	r3, [r3, #0]
240068ae:	2210      	movs	r2, #16
240068b0:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
240068b2:	68fb      	ldr	r3, [r7, #12]
240068b4:	681b      	ldr	r3, [r3, #0]
240068b6:	681a      	ldr	r2, [r3, #0]
240068b8:	68fb      	ldr	r3, [r7, #12]
240068ba:	681b      	ldr	r3, [r3, #0]
240068bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
240068c0:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
240068c2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
240068c6:	68b9      	ldr	r1, [r7, #8]
240068c8:	68f8      	ldr	r0, [r7, #12]
240068ca:	f000 fa85 	bl	24006dd8 <QSPI_Config>
240068ce:	e001      	b.n	240068d4 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
240068d0:	2302      	movs	r3, #2
240068d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
240068d4:	68fb      	ldr	r3, [r7, #12]
240068d6:	2200      	movs	r2, #0
240068d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
240068dc:	7dfb      	ldrb	r3, [r7, #23]
}
240068de:	4618      	mov	r0, r3
240068e0:	3718      	adds	r7, #24
240068e2:	46bd      	mov	sp, r7
240068e4:	bd80      	pop	{r7, pc}

240068e6 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
240068e6:	b480      	push	{r7}
240068e8:	b083      	sub	sp, #12
240068ea:	af00      	add	r7, sp, #0
240068ec:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
240068ee:	bf00      	nop
240068f0:	370c      	adds	r7, #12
240068f2:	46bd      	mov	sp, r7
240068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
240068f8:	4770      	bx	lr

240068fa <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
240068fa:	b480      	push	{r7}
240068fc:	b083      	sub	sp, #12
240068fe:	af00      	add	r7, sp, #0
24006900:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
24006902:	bf00      	nop
24006904:	370c      	adds	r7, #12
24006906:	46bd      	mov	sp, r7
24006908:	f85d 7b04 	ldr.w	r7, [sp], #4
2400690c:	4770      	bx	lr

2400690e <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
2400690e:	b480      	push	{r7}
24006910:	b083      	sub	sp, #12
24006912:	af00      	add	r7, sp, #0
24006914:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
24006916:	bf00      	nop
24006918:	370c      	adds	r7, #12
2400691a:	46bd      	mov	sp, r7
2400691c:	f85d 7b04 	ldr.w	r7, [sp], #4
24006920:	4770      	bx	lr

24006922 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
24006922:	b480      	push	{r7}
24006924:	b083      	sub	sp, #12
24006926:	af00      	add	r7, sp, #0
24006928:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
2400692a:	bf00      	nop
2400692c:	370c      	adds	r7, #12
2400692e:	46bd      	mov	sp, r7
24006930:	f85d 7b04 	ldr.w	r7, [sp], #4
24006934:	4770      	bx	lr

24006936 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
24006936:	b480      	push	{r7}
24006938:	b083      	sub	sp, #12
2400693a:	af00      	add	r7, sp, #0
2400693c:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
2400693e:	bf00      	nop
24006940:	370c      	adds	r7, #12
24006942:	46bd      	mov	sp, r7
24006944:	f85d 7b04 	ldr.w	r7, [sp], #4
24006948:	4770      	bx	lr

2400694a <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
2400694a:	b480      	push	{r7}
2400694c:	b083      	sub	sp, #12
2400694e:	af00      	add	r7, sp, #0
24006950:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
24006952:	bf00      	nop
24006954:	370c      	adds	r7, #12
24006956:	46bd      	mov	sp, r7
24006958:	f85d 7b04 	ldr.w	r7, [sp], #4
2400695c:	4770      	bx	lr

2400695e <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
2400695e:	b480      	push	{r7}
24006960:	b083      	sub	sp, #12
24006962:	af00      	add	r7, sp, #0
24006964:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
24006966:	bf00      	nop
24006968:	370c      	adds	r7, #12
2400696a:	46bd      	mov	sp, r7
2400696c:	f85d 7b04 	ldr.w	r7, [sp], #4
24006970:	4770      	bx	lr

24006972 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
24006972:	b480      	push	{r7}
24006974:	b083      	sub	sp, #12
24006976:	af00      	add	r7, sp, #0
24006978:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
2400697a:	bf00      	nop
2400697c:	370c      	adds	r7, #12
2400697e:	46bd      	mov	sp, r7
24006980:	f85d 7b04 	ldr.w	r7, [sp], #4
24006984:	4770      	bx	lr

24006986 <HAL_QSPI_GetState>:
  * @brief  Return the QSPI handle state.
  * @param  hqspi : QSPI handle
  * @retval HAL state
  */
HAL_QSPI_StateTypeDef HAL_QSPI_GetState(QSPI_HandleTypeDef *hqspi)
{
24006986:	b480      	push	{r7}
24006988:	b083      	sub	sp, #12
2400698a:	af00      	add	r7, sp, #0
2400698c:	6078      	str	r0, [r7, #4]
  /* Return QSPI handle state */
  return hqspi->State;
2400698e:	687b      	ldr	r3, [r7, #4]
24006990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24006994:	b2db      	uxtb	r3, r3
}
24006996:	4618      	mov	r0, r3
24006998:	370c      	adds	r7, #12
2400699a:	46bd      	mov	sp, r7
2400699c:	f85d 7b04 	ldr.w	r7, [sp], #4
240069a0:	4770      	bx	lr

240069a2 <HAL_QSPI_GetError>:
* @brief  Return the QSPI error code.
* @param  hqspi : QSPI handle
* @retval QSPI Error Code
*/
uint32_t HAL_QSPI_GetError(QSPI_HandleTypeDef *hqspi)
{
240069a2:	b480      	push	{r7}
240069a4:	b083      	sub	sp, #12
240069a6:	af00      	add	r7, sp, #0
240069a8:	6078      	str	r0, [r7, #4]
  return hqspi->ErrorCode;
240069aa:	687b      	ldr	r3, [r7, #4]
240069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
240069ae:	4618      	mov	r0, r3
240069b0:	370c      	adds	r7, #12
240069b2:	46bd      	mov	sp, r7
240069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
240069b8:	4770      	bx	lr

240069ba <HAL_QSPI_Abort>:
* @brief  Abort the current transmission.
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort(QSPI_HandleTypeDef *hqspi)
{
240069ba:	b580      	push	{r7, lr}
240069bc:	b086      	sub	sp, #24
240069be:	af02      	add	r7, sp, #8
240069c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
240069c2:	2300      	movs	r3, #0
240069c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
240069c6:	f7fb fbf9 	bl	240021bc <HAL_GetTick>
240069ca:	60b8      	str	r0, [r7, #8]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
240069cc:	687b      	ldr	r3, [r7, #4]
240069ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
240069d2:	b2db      	uxtb	r3, r3
240069d4:	f003 0302 	and.w	r3, r3, #2
240069d8:	2b00      	cmp	r3, #0
240069da:	d056      	beq.n	24006a8a <HAL_QSPI_Abort+0xd0>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
240069dc:	687b      	ldr	r3, [r7, #4]
240069de:	2200      	movs	r2, #0
240069e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
240069e4:	687b      	ldr	r3, [r7, #4]
240069e6:	681b      	ldr	r3, [r3, #0]
240069e8:	681b      	ldr	r3, [r3, #0]
240069ea:	f003 0304 	and.w	r3, r3, #4
240069ee:	2b00      	cmp	r3, #0
240069f0:	d017      	beq.n	24006a22 <HAL_QSPI_Abort+0x68>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
240069f2:	687b      	ldr	r3, [r7, #4]
240069f4:	681b      	ldr	r3, [r3, #0]
240069f6:	681a      	ldr	r2, [r3, #0]
240069f8:	687b      	ldr	r3, [r7, #4]
240069fa:	681b      	ldr	r3, [r3, #0]
240069fc:	f022 0204 	bic.w	r2, r2, #4
24006a00:	601a      	str	r2, [r3, #0]

      /* Abort MDMA */
      status = HAL_MDMA_Abort(hqspi->hmdma);
24006a02:	687b      	ldr	r3, [r7, #4]
24006a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006a06:	4618      	mov	r0, r3
24006a08:	f7fd fc36 	bl	24004278 <HAL_MDMA_Abort>
24006a0c:	4603      	mov	r3, r0
24006a0e:	73fb      	strb	r3, [r7, #15]
      if(status != HAL_OK)
24006a10:	7bfb      	ldrb	r3, [r7, #15]
24006a12:	2b00      	cmp	r3, #0
24006a14:	d005      	beq.n	24006a22 <HAL_QSPI_Abort+0x68>
      {
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
24006a16:	687b      	ldr	r3, [r7, #4]
24006a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24006a1a:	f043 0204 	orr.w	r2, r3, #4
24006a1e:	687b      	ldr	r3, [r7, #4]
24006a20:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
24006a22:	687b      	ldr	r3, [r7, #4]
24006a24:	681b      	ldr	r3, [r3, #0]
24006a26:	681a      	ldr	r2, [r3, #0]
24006a28:	687b      	ldr	r3, [r7, #4]
24006a2a:	681b      	ldr	r3, [r3, #0]
24006a2c:	f042 0202 	orr.w	r2, r2, #2
24006a30:	601a      	str	r2, [r3, #0]

    /* Wait until TC flag is set to go back in idle state */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, hqspi->Timeout);
24006a32:	687b      	ldr	r3, [r7, #4]
24006a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24006a36:	9300      	str	r3, [sp, #0]
24006a38:	68bb      	ldr	r3, [r7, #8]
24006a3a:	2201      	movs	r2, #1
24006a3c:	2102      	movs	r1, #2
24006a3e:	6878      	ldr	r0, [r7, #4]
24006a40:	f000 f993 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24006a44:	4603      	mov	r3, r0
24006a46:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
24006a48:	7bfb      	ldrb	r3, [r7, #15]
24006a4a:	2b00      	cmp	r3, #0
24006a4c:	d10e      	bne.n	24006a6c <HAL_QSPI_Abort+0xb2>
    {
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24006a4e:	687b      	ldr	r3, [r7, #4]
24006a50:	681b      	ldr	r3, [r3, #0]
24006a52:	2202      	movs	r2, #2
24006a54:	60da      	str	r2, [r3, #12]

      /* Wait until BUSY flag is reset */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
24006a56:	687b      	ldr	r3, [r7, #4]
24006a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
24006a5a:	9300      	str	r3, [sp, #0]
24006a5c:	68bb      	ldr	r3, [r7, #8]
24006a5e:	2200      	movs	r2, #0
24006a60:	2120      	movs	r1, #32
24006a62:	6878      	ldr	r0, [r7, #4]
24006a64:	f000 f981 	bl	24006d6a <QSPI_WaitFlagStateUntilTimeout>
24006a68:	4603      	mov	r3, r0
24006a6a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
24006a6c:	7bfb      	ldrb	r3, [r7, #15]
24006a6e:	2b00      	cmp	r3, #0
24006a70:	d10b      	bne.n	24006a8a <HAL_QSPI_Abort+0xd0>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
24006a72:	687b      	ldr	r3, [r7, #4]
24006a74:	681b      	ldr	r3, [r3, #0]
24006a76:	695a      	ldr	r2, [r3, #20]
24006a78:	687b      	ldr	r3, [r7, #4]
24006a7a:	681b      	ldr	r3, [r3, #0]
24006a7c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
24006a80:	615a      	str	r2, [r3, #20]

      /* Update state */
      hqspi->State = HAL_QSPI_STATE_READY;
24006a82:	687b      	ldr	r3, [r7, #4]
24006a84:	2201      	movs	r2, #1
24006a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
  }

  return status;
24006a8a:	7bfb      	ldrb	r3, [r7, #15]
}
24006a8c:	4618      	mov	r0, r3
24006a8e:	3710      	adds	r7, #16
24006a90:	46bd      	mov	sp, r7
24006a92:	bd80      	pop	{r7, pc}

24006a94 <HAL_QSPI_Abort_IT>:
* @brief  Abort the current transmission (non-blocking function)
* @param  hqspi : QSPI handle
* @retval HAL status
*/
HAL_StatusTypeDef HAL_QSPI_Abort_IT(QSPI_HandleTypeDef *hqspi)
{
24006a94:	b580      	push	{r7, lr}
24006a96:	b084      	sub	sp, #16
24006a98:	af00      	add	r7, sp, #0
24006a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
24006a9c:	2300      	movs	r3, #0
24006a9e:	73fb      	strb	r3, [r7, #15]

  /* Check if the state is in one of the busy states */
  if (((uint32_t)hqspi->State & 0x2U) != 0U)
24006aa0:	687b      	ldr	r3, [r7, #4]
24006aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24006aa6:	b2db      	uxtb	r3, r3
24006aa8:	f003 0302 	and.w	r3, r3, #2
24006aac:	2b00      	cmp	r3, #0
24006aae:	d046      	beq.n	24006b3e <HAL_QSPI_Abort_IT+0xaa>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hqspi);
24006ab0:	687b      	ldr	r3, [r7, #4]
24006ab2:	2200      	movs	r2, #0
24006ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_ABORT;
24006ab8:	687b      	ldr	r3, [r7, #4]
24006aba:	2208      	movs	r2, #8
24006abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable all interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_TO | QSPI_IT_SM | QSPI_IT_FT | QSPI_IT_TC | QSPI_IT_TE));
24006ac0:	687b      	ldr	r3, [r7, #4]
24006ac2:	681b      	ldr	r3, [r3, #0]
24006ac4:	681a      	ldr	r2, [r3, #0]
24006ac6:	687b      	ldr	r3, [r7, #4]
24006ac8:	681b      	ldr	r3, [r3, #0]
24006aca:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
24006ace:	601a      	str	r2, [r3, #0]

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
24006ad0:	687b      	ldr	r3, [r7, #4]
24006ad2:	681b      	ldr	r3, [r3, #0]
24006ad4:	681b      	ldr	r3, [r3, #0]
24006ad6:	f003 0304 	and.w	r3, r3, #4
24006ada:	2b00      	cmp	r3, #0
24006adc:	d01b      	beq.n	24006b16 <HAL_QSPI_Abort_IT+0x82>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24006ade:	687b      	ldr	r3, [r7, #4]
24006ae0:	681b      	ldr	r3, [r3, #0]
24006ae2:	681a      	ldr	r2, [r3, #0]
24006ae4:	687b      	ldr	r3, [r7, #4]
24006ae6:	681b      	ldr	r3, [r3, #0]
24006ae8:	f022 0204 	bic.w	r2, r2, #4
24006aec:	601a      	str	r2, [r3, #0]

      /* Abort MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
24006aee:	687b      	ldr	r3, [r7, #4]
24006af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006af2:	4a15      	ldr	r2, [pc, #84]	; (24006b48 <HAL_QSPI_Abort_IT+0xb4>)
24006af4:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
24006af6:	687b      	ldr	r3, [r7, #4]
24006af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24006afa:	4618      	mov	r0, r3
24006afc:	f7fd fc17 	bl	2400432e <HAL_MDMA_Abort_IT>
24006b00:	4603      	mov	r3, r0
24006b02:	2b00      	cmp	r3, #0
24006b04:	d01b      	beq.n	24006b3e <HAL_QSPI_Abort_IT+0xaa>
      {
        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
24006b06:	687b      	ldr	r3, [r7, #4]
24006b08:	2201      	movs	r2, #1
24006b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
24006b0e:	6878      	ldr	r0, [r7, #4]
24006b10:	f7ff fef3 	bl	240068fa <HAL_QSPI_AbortCpltCallback>
24006b14:	e013      	b.n	24006b3e <HAL_QSPI_Abort_IT+0xaa>
      }
    }
    else
    {
      /* Clear interrupt */
      __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24006b16:	687b      	ldr	r3, [r7, #4]
24006b18:	681b      	ldr	r3, [r3, #0]
24006b1a:	2202      	movs	r2, #2
24006b1c:	60da      	str	r2, [r3, #12]

      /* Enable the QSPI Transfer Complete Interrupt */
      __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
24006b1e:	687b      	ldr	r3, [r7, #4]
24006b20:	681b      	ldr	r3, [r3, #0]
24006b22:	681a      	ldr	r2, [r3, #0]
24006b24:	687b      	ldr	r3, [r7, #4]
24006b26:	681b      	ldr	r3, [r3, #0]
24006b28:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24006b2c:	601a      	str	r2, [r3, #0]

      /* Configure QSPI: CR register with Abort request */
      SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
24006b2e:	687b      	ldr	r3, [r7, #4]
24006b30:	681b      	ldr	r3, [r3, #0]
24006b32:	681a      	ldr	r2, [r3, #0]
24006b34:	687b      	ldr	r3, [r7, #4]
24006b36:	681b      	ldr	r3, [r3, #0]
24006b38:	f042 0202 	orr.w	r2, r2, #2
24006b3c:	601a      	str	r2, [r3, #0]
    }
  }
  return status;
24006b3e:	7bfb      	ldrb	r3, [r7, #15]
}
24006b40:	4618      	mov	r0, r3
24006b42:	3710      	adds	r7, #16
24006b44:	46bd      	mov	sp, r7
24006b46:	bd80      	pop	{r7, pc}
24006b48:	24006d05 	.word	0x24006d05

24006b4c <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
24006b4c:	b480      	push	{r7}
24006b4e:	b083      	sub	sp, #12
24006b50:	af00      	add	r7, sp, #0
24006b52:	6078      	str	r0, [r7, #4]
24006b54:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
24006b56:	687b      	ldr	r3, [r7, #4]
24006b58:	683a      	ldr	r2, [r7, #0]
24006b5a:	649a      	str	r2, [r3, #72]	; 0x48
}
24006b5c:	bf00      	nop
24006b5e:	370c      	adds	r7, #12
24006b60:	46bd      	mov	sp, r7
24006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
24006b66:	4770      	bx	lr

24006b68 <HAL_QSPI_SetFifoThreshold>:
  * @param  hqspi : QSPI handle.
  * @param  Threshold : Threshold of the Fifo (value between 1 and 16).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFifoThreshold(QSPI_HandleTypeDef *hqspi, uint32_t Threshold)
{
24006b68:	b480      	push	{r7}
24006b6a:	b085      	sub	sp, #20
24006b6c:	af00      	add	r7, sp, #0
24006b6e:	6078      	str	r0, [r7, #4]
24006b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006b72:	2300      	movs	r3, #0
24006b74:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hqspi);
24006b76:	687b      	ldr	r3, [r7, #4]
24006b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24006b7c:	b2db      	uxtb	r3, r3
24006b7e:	2b01      	cmp	r3, #1
24006b80:	d101      	bne.n	24006b86 <HAL_QSPI_SetFifoThreshold+0x1e>
24006b82:	2302      	movs	r3, #2
24006b84:	e021      	b.n	24006bca <HAL_QSPI_SetFifoThreshold+0x62>
24006b86:	687b      	ldr	r3, [r7, #4]
24006b88:	2201      	movs	r2, #1
24006b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24006b8e:	687b      	ldr	r3, [r7, #4]
24006b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24006b94:	b2db      	uxtb	r3, r3
24006b96:	2b01      	cmp	r3, #1
24006b98:	d110      	bne.n	24006bbc <HAL_QSPI_SetFifoThreshold+0x54>
  {
    /* Synchronize init structure with new FIFO threshold value */
    hqspi->Init.FifoThreshold = Threshold;
24006b9a:	687b      	ldr	r3, [r7, #4]
24006b9c:	683a      	ldr	r2, [r7, #0]
24006b9e:	609a      	str	r2, [r3, #8]

    /* Configure QSPI FIFO Threshold */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
24006ba0:	687b      	ldr	r3, [r7, #4]
24006ba2:	681b      	ldr	r3, [r3, #0]
24006ba4:	681b      	ldr	r3, [r3, #0]
24006ba6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
24006baa:	687b      	ldr	r3, [r7, #4]
24006bac:	689b      	ldr	r3, [r3, #8]
24006bae:	3b01      	subs	r3, #1
24006bb0:	021a      	lsls	r2, r3, #8
24006bb2:	687b      	ldr	r3, [r7, #4]
24006bb4:	681b      	ldr	r3, [r3, #0]
24006bb6:	430a      	orrs	r2, r1
24006bb8:	601a      	str	r2, [r3, #0]
24006bba:	e001      	b.n	24006bc0 <HAL_QSPI_SetFifoThreshold+0x58>
               ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));
  }
  else
  {
    status = HAL_BUSY;
24006bbc:	2302      	movs	r3, #2
24006bbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24006bc0:	687b      	ldr	r3, [r7, #4]
24006bc2:	2200      	movs	r2, #0
24006bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
24006bca:	4618      	mov	r0, r3
24006bcc:	3714      	adds	r7, #20
24006bce:	46bd      	mov	sp, r7
24006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
24006bd4:	4770      	bx	lr

24006bd6 <HAL_QSPI_GetFifoThreshold>:
/** @brief Get QSPI Fifo threshold.
  * @param  hqspi : QSPI handle.
  * @retval Fifo threshold (value between 1 and 16)
  */
uint32_t HAL_QSPI_GetFifoThreshold(QSPI_HandleTypeDef *hqspi)
{
24006bd6:	b480      	push	{r7}
24006bd8:	b083      	sub	sp, #12
24006bda:	af00      	add	r7, sp, #0
24006bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(hqspi->Instance->CR, QUADSPI_CR_FTHRES) >> QUADSPI_CR_FTHRES_Pos) + 1U);
24006bde:	687b      	ldr	r3, [r7, #4]
24006be0:	681b      	ldr	r3, [r3, #0]
24006be2:	681b      	ldr	r3, [r3, #0]
24006be4:	0a1b      	lsrs	r3, r3, #8
24006be6:	f003 030f 	and.w	r3, r3, #15
24006bea:	3301      	adds	r3, #1
}
24006bec:	4618      	mov	r0, r3
24006bee:	370c      	adds	r7, #12
24006bf0:	46bd      	mov	sp, r7
24006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
24006bf6:	4770      	bx	lr

24006bf8 <HAL_QSPI_SetFlashID>:
  *                   This parameter can be a value of @ref QSPI_Flash_Select.
  * @note   The FlashID is ignored when dual flash mode is enabled.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_SetFlashID(QSPI_HandleTypeDef *hqspi, uint32_t FlashID)
{
24006bf8:	b480      	push	{r7}
24006bfa:	b085      	sub	sp, #20
24006bfc:	af00      	add	r7, sp, #0
24006bfe:	6078      	str	r0, [r7, #4]
24006c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
24006c02:	2300      	movs	r3, #0
24006c04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameter */
  assert_param(IS_QSPI_FLASH_ID(FlashID));

  /* Process locked */
  __HAL_LOCK(hqspi);
24006c06:	687b      	ldr	r3, [r7, #4]
24006c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
24006c0c:	b2db      	uxtb	r3, r3
24006c0e:	2b01      	cmp	r3, #1
24006c10:	d101      	bne.n	24006c16 <HAL_QSPI_SetFlashID+0x1e>
24006c12:	2302      	movs	r3, #2
24006c14:	e01e      	b.n	24006c54 <HAL_QSPI_SetFlashID+0x5c>
24006c16:	687b      	ldr	r3, [r7, #4]
24006c18:	2201      	movs	r2, #1
24006c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
24006c1e:	687b      	ldr	r3, [r7, #4]
24006c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24006c24:	b2db      	uxtb	r3, r3
24006c26:	2b01      	cmp	r3, #1
24006c28:	d10d      	bne.n	24006c46 <HAL_QSPI_SetFlashID+0x4e>
  {
    /* Synchronize init structure with new FlashID value */
    hqspi->Init.FlashID = FlashID;
24006c2a:	687b      	ldr	r3, [r7, #4]
24006c2c:	683a      	ldr	r2, [r7, #0]
24006c2e:	61da      	str	r2, [r3, #28]

    /* Configure QSPI FlashID */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FSEL, FlashID);
24006c30:	687b      	ldr	r3, [r7, #4]
24006c32:	681b      	ldr	r3, [r3, #0]
24006c34:	681b      	ldr	r3, [r3, #0]
24006c36:	f023 0180 	bic.w	r1, r3, #128	; 0x80
24006c3a:	687b      	ldr	r3, [r7, #4]
24006c3c:	681b      	ldr	r3, [r3, #0]
24006c3e:	683a      	ldr	r2, [r7, #0]
24006c40:	430a      	orrs	r2, r1
24006c42:	601a      	str	r2, [r3, #0]
24006c44:	e001      	b.n	24006c4a <HAL_QSPI_SetFlashID+0x52>
  }
  else
  {
    status = HAL_BUSY;
24006c46:	2302      	movs	r3, #2
24006c48:	73fb      	strb	r3, [r7, #15]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
24006c4a:	687b      	ldr	r3, [r7, #4]
24006c4c:	2200      	movs	r2, #0
24006c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
24006c52:	7bfb      	ldrb	r3, [r7, #15]
}
24006c54:	4618      	mov	r0, r3
24006c56:	3714      	adds	r7, #20
24006c58:	46bd      	mov	sp, r7
24006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
24006c5e:	4770      	bx	lr

24006c60 <QSPI_DMARxCplt>:
  * @brief  DMA QSPI receive process complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMARxCplt(MDMA_HandleTypeDef *hmdma)
{
24006c60:	b480      	push	{r7}
24006c62:	b085      	sub	sp, #20
24006c64:	af00      	add	r7, sp, #0
24006c66:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
24006c68:	687b      	ldr	r3, [r7, #4]
24006c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24006c6c:	60fb      	str	r3, [r7, #12]
  hqspi->RxXferCount = 0U;
24006c6e:	68fb      	ldr	r3, [r7, #12]
24006c70:	2200      	movs	r2, #0
24006c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
24006c74:	68fb      	ldr	r3, [r7, #12]
24006c76:	681b      	ldr	r3, [r3, #0]
24006c78:	681a      	ldr	r2, [r3, #0]
24006c7a:	68fb      	ldr	r3, [r7, #12]
24006c7c:	681b      	ldr	r3, [r3, #0]
24006c7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24006c82:	601a      	str	r2, [r3, #0]
}
24006c84:	bf00      	nop
24006c86:	3714      	adds	r7, #20
24006c88:	46bd      	mov	sp, r7
24006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
24006c8e:	4770      	bx	lr

24006c90 <QSPI_DMATxCplt>:
  * @brief  DMA QSPI transmit process complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMATxCplt(MDMA_HandleTypeDef *hmdma)
{
24006c90:	b480      	push	{r7}
24006c92:	b085      	sub	sp, #20
24006c94:	af00      	add	r7, sp, #0
24006c96:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = (QSPI_HandleTypeDef*)(hmdma->Parent);
24006c98:	687b      	ldr	r3, [r7, #4]
24006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24006c9c:	60fb      	str	r3, [r7, #12]
  hqspi->TxXferCount = 0U;
24006c9e:	68fb      	ldr	r3, [r7, #12]
24006ca0:	2200      	movs	r2, #0
24006ca2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the QSPI transfer complete Interrupt */
  __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
24006ca4:	68fb      	ldr	r3, [r7, #12]
24006ca6:	681b      	ldr	r3, [r3, #0]
24006ca8:	681a      	ldr	r2, [r3, #0]
24006caa:	68fb      	ldr	r3, [r7, #12]
24006cac:	681b      	ldr	r3, [r3, #0]
24006cae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24006cb2:	601a      	str	r2, [r3, #0]
}
24006cb4:	bf00      	nop
24006cb6:	3714      	adds	r7, #20
24006cb8:	46bd      	mov	sp, r7
24006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
24006cbe:	4770      	bx	lr

24006cc0 <QSPI_DMAError>:
  * @brief  DMA QSPI communication error callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAError(MDMA_HandleTypeDef *hmdma)
{
24006cc0:	b580      	push	{r7, lr}
24006cc2:	b084      	sub	sp, #16
24006cc4:	af00      	add	r7, sp, #0
24006cc6:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
24006cc8:	687b      	ldr	r3, [r7, #4]
24006cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24006ccc:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
24006cce:	68fb      	ldr	r3, [r7, #12]
24006cd0:	2200      	movs	r2, #0
24006cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
24006cd4:	68fb      	ldr	r3, [r7, #12]
24006cd6:	2200      	movs	r2, #0
24006cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hqspi->ErrorCode   |= HAL_QSPI_ERROR_DMA;
24006cda:	68fb      	ldr	r3, [r7, #12]
24006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24006cde:	f043 0204 	orr.w	r2, r3, #4
24006ce2:	68fb      	ldr	r3, [r7, #12]
24006ce4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the MDMA transfer by clearing the DMAEN bit in the QSPI CR register */
  CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
24006ce6:	68fb      	ldr	r3, [r7, #12]
24006ce8:	681b      	ldr	r3, [r3, #0]
24006cea:	681a      	ldr	r2, [r3, #0]
24006cec:	68fb      	ldr	r3, [r7, #12]
24006cee:	681b      	ldr	r3, [r3, #0]
24006cf0:	f022 0204 	bic.w	r2, r2, #4
24006cf4:	601a      	str	r2, [r3, #0]

  /* Abort the QSPI */
  (void)HAL_QSPI_Abort_IT(hqspi);
24006cf6:	68f8      	ldr	r0, [r7, #12]
24006cf8:	f7ff fecc 	bl	24006a94 <HAL_QSPI_Abort_IT>

}
24006cfc:	bf00      	nop
24006cfe:	3710      	adds	r7, #16
24006d00:	46bd      	mov	sp, r7
24006d02:	bd80      	pop	{r7, pc}

24006d04 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
24006d04:	b580      	push	{r7, lr}
24006d06:	b084      	sub	sp, #16
24006d08:	af00      	add	r7, sp, #0
24006d0a:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
24006d0c:	687b      	ldr	r3, [r7, #4]
24006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24006d10:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
24006d12:	68fb      	ldr	r3, [r7, #12]
24006d14:	2200      	movs	r2, #0
24006d16:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
24006d18:	68fb      	ldr	r3, [r7, #12]
24006d1a:	2200      	movs	r2, #0
24006d1c:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
24006d1e:	68fb      	ldr	r3, [r7, #12]
24006d20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
24006d24:	b2db      	uxtb	r3, r3
24006d26:	2b08      	cmp	r3, #8
24006d28:	d114      	bne.n	24006d54 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
24006d2a:	68fb      	ldr	r3, [r7, #12]
24006d2c:	681b      	ldr	r3, [r3, #0]
24006d2e:	2202      	movs	r2, #2
24006d30:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
24006d32:	68fb      	ldr	r3, [r7, #12]
24006d34:	681b      	ldr	r3, [r3, #0]
24006d36:	681a      	ldr	r2, [r3, #0]
24006d38:	68fb      	ldr	r3, [r7, #12]
24006d3a:	681b      	ldr	r3, [r3, #0]
24006d3c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
24006d40:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
24006d42:	68fb      	ldr	r3, [r7, #12]
24006d44:	681b      	ldr	r3, [r3, #0]
24006d46:	681a      	ldr	r2, [r3, #0]
24006d48:	68fb      	ldr	r3, [r7, #12]
24006d4a:	681b      	ldr	r3, [r3, #0]
24006d4c:	f042 0202 	orr.w	r2, r2, #2
24006d50:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
24006d52:	e006      	b.n	24006d62 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
24006d54:	68fb      	ldr	r3, [r7, #12]
24006d56:	2201      	movs	r2, #1
24006d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
24006d5c:	68f8      	ldr	r0, [r7, #12]
24006d5e:	f7ff fdc2 	bl	240068e6 <HAL_QSPI_ErrorCallback>
}
24006d62:	bf00      	nop
24006d64:	3710      	adds	r7, #16
24006d66:	46bd      	mov	sp, r7
24006d68:	bd80      	pop	{r7, pc}

24006d6a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
24006d6a:	b580      	push	{r7, lr}
24006d6c:	b084      	sub	sp, #16
24006d6e:	af00      	add	r7, sp, #0
24006d70:	60f8      	str	r0, [r7, #12]
24006d72:	60b9      	str	r1, [r7, #8]
24006d74:	603b      	str	r3, [r7, #0]
24006d76:	4613      	mov	r3, r2
24006d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24006d7a:	e01a      	b.n	24006db2 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
24006d7c:	69bb      	ldr	r3, [r7, #24]
24006d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
24006d82:	d016      	beq.n	24006db2 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
24006d84:	f7fb fa1a 	bl	240021bc <HAL_GetTick>
24006d88:	4602      	mov	r2, r0
24006d8a:	683b      	ldr	r3, [r7, #0]
24006d8c:	1ad3      	subs	r3, r2, r3
24006d8e:	69ba      	ldr	r2, [r7, #24]
24006d90:	429a      	cmp	r2, r3
24006d92:	d302      	bcc.n	24006d9a <QSPI_WaitFlagStateUntilTimeout+0x30>
24006d94:	69bb      	ldr	r3, [r7, #24]
24006d96:	2b00      	cmp	r3, #0
24006d98:	d10b      	bne.n	24006db2 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
24006d9a:	68fb      	ldr	r3, [r7, #12]
24006d9c:	2204      	movs	r2, #4
24006d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
24006da2:	68fb      	ldr	r3, [r7, #12]
24006da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24006da6:	f043 0201 	orr.w	r2, r3, #1
24006daa:	68fb      	ldr	r3, [r7, #12]
24006dac:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
24006dae:	2301      	movs	r3, #1
24006db0:	e00e      	b.n	24006dd0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
24006db2:	68fb      	ldr	r3, [r7, #12]
24006db4:	681b      	ldr	r3, [r3, #0]
24006db6:	689a      	ldr	r2, [r3, #8]
24006db8:	68bb      	ldr	r3, [r7, #8]
24006dba:	4013      	ands	r3, r2
24006dbc:	2b00      	cmp	r3, #0
24006dbe:	bf14      	ite	ne
24006dc0:	2301      	movne	r3, #1
24006dc2:	2300      	moveq	r3, #0
24006dc4:	b2db      	uxtb	r3, r3
24006dc6:	461a      	mov	r2, r3
24006dc8:	79fb      	ldrb	r3, [r7, #7]
24006dca:	429a      	cmp	r2, r3
24006dcc:	d1d6      	bne.n	24006d7c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
24006dce:	2300      	movs	r3, #0
}
24006dd0:	4618      	mov	r0, r3
24006dd2:	3710      	adds	r7, #16
24006dd4:	46bd      	mov	sp, r7
24006dd6:	bd80      	pop	{r7, pc}

24006dd8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
24006dd8:	b480      	push	{r7}
24006dda:	b085      	sub	sp, #20
24006ddc:	af00      	add	r7, sp, #0
24006dde:	60f8      	str	r0, [r7, #12]
24006de0:	60b9      	str	r1, [r7, #8]
24006de2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
24006de4:	68bb      	ldr	r3, [r7, #8]
24006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24006de8:	2b00      	cmp	r3, #0
24006dea:	d009      	beq.n	24006e00 <QSPI_Config+0x28>
24006dec:	687b      	ldr	r3, [r7, #4]
24006dee:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24006df2:	d005      	beq.n	24006e00 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
24006df4:	68bb      	ldr	r3, [r7, #8]
24006df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24006df8:	68fb      	ldr	r3, [r7, #12]
24006dfa:	681b      	ldr	r3, [r3, #0]
24006dfc:	3a01      	subs	r2, #1
24006dfe:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
24006e00:	68bb      	ldr	r3, [r7, #8]
24006e02:	699b      	ldr	r3, [r3, #24]
24006e04:	2b00      	cmp	r3, #0
24006e06:	f000 80b9 	beq.w	24006f7c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24006e0a:	68bb      	ldr	r3, [r7, #8]
24006e0c:	6a1b      	ldr	r3, [r3, #32]
24006e0e:	2b00      	cmp	r3, #0
24006e10:	d05f      	beq.n	24006ed2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
24006e12:	68fb      	ldr	r3, [r7, #12]
24006e14:	681b      	ldr	r3, [r3, #0]
24006e16:	68ba      	ldr	r2, [r7, #8]
24006e18:	6892      	ldr	r2, [r2, #8]
24006e1a:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24006e1c:	68bb      	ldr	r3, [r7, #8]
24006e1e:	69db      	ldr	r3, [r3, #28]
24006e20:	2b00      	cmp	r3, #0
24006e22:	d031      	beq.n	24006e88 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24006e24:	68bb      	ldr	r3, [r7, #8]
24006e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006e28:	68bb      	ldr	r3, [r7, #8]
24006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006e2c:	431a      	orrs	r2, r3
24006e2e:	68bb      	ldr	r3, [r7, #8]
24006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24006e32:	431a      	orrs	r2, r3
24006e34:	68bb      	ldr	r3, [r7, #8]
24006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24006e38:	431a      	orrs	r2, r3
24006e3a:	68bb      	ldr	r3, [r7, #8]
24006e3c:	695b      	ldr	r3, [r3, #20]
24006e3e:	049b      	lsls	r3, r3, #18
24006e40:	431a      	orrs	r2, r3
24006e42:	68bb      	ldr	r3, [r7, #8]
24006e44:	691b      	ldr	r3, [r3, #16]
24006e46:	431a      	orrs	r2, r3
24006e48:	68bb      	ldr	r3, [r7, #8]
24006e4a:	6a1b      	ldr	r3, [r3, #32]
24006e4c:	431a      	orrs	r2, r3
24006e4e:	68bb      	ldr	r3, [r7, #8]
24006e50:	68db      	ldr	r3, [r3, #12]
24006e52:	431a      	orrs	r2, r3
24006e54:	68bb      	ldr	r3, [r7, #8]
24006e56:	69db      	ldr	r3, [r3, #28]
24006e58:	431a      	orrs	r2, r3
24006e5a:	68bb      	ldr	r3, [r7, #8]
24006e5c:	699b      	ldr	r3, [r3, #24]
24006e5e:	431a      	orrs	r2, r3
24006e60:	68bb      	ldr	r3, [r7, #8]
24006e62:	681b      	ldr	r3, [r3, #0]
24006e64:	ea42 0103 	orr.w	r1, r2, r3
24006e68:	68fb      	ldr	r3, [r7, #12]
24006e6a:	681b      	ldr	r3, [r3, #0]
24006e6c:	687a      	ldr	r2, [r7, #4]
24006e6e:	430a      	orrs	r2, r1
24006e70:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24006e72:	687b      	ldr	r3, [r7, #4]
24006e74:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24006e78:	f000 812e 	beq.w	240070d8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24006e7c:	68fb      	ldr	r3, [r7, #12]
24006e7e:	681b      	ldr	r3, [r3, #0]
24006e80:	68ba      	ldr	r2, [r7, #8]
24006e82:	6852      	ldr	r2, [r2, #4]
24006e84:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
24006e86:	e127      	b.n	240070d8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24006e88:	68bb      	ldr	r3, [r7, #8]
24006e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006e8c:	68bb      	ldr	r3, [r7, #8]
24006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006e90:	431a      	orrs	r2, r3
24006e92:	68bb      	ldr	r3, [r7, #8]
24006e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24006e96:	431a      	orrs	r2, r3
24006e98:	68bb      	ldr	r3, [r7, #8]
24006e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24006e9c:	431a      	orrs	r2, r3
24006e9e:	68bb      	ldr	r3, [r7, #8]
24006ea0:	695b      	ldr	r3, [r3, #20]
24006ea2:	049b      	lsls	r3, r3, #18
24006ea4:	431a      	orrs	r2, r3
24006ea6:	68bb      	ldr	r3, [r7, #8]
24006ea8:	691b      	ldr	r3, [r3, #16]
24006eaa:	431a      	orrs	r2, r3
24006eac:	68bb      	ldr	r3, [r7, #8]
24006eae:	6a1b      	ldr	r3, [r3, #32]
24006eb0:	431a      	orrs	r2, r3
24006eb2:	68bb      	ldr	r3, [r7, #8]
24006eb4:	69db      	ldr	r3, [r3, #28]
24006eb6:	431a      	orrs	r2, r3
24006eb8:	68bb      	ldr	r3, [r7, #8]
24006eba:	699b      	ldr	r3, [r3, #24]
24006ebc:	431a      	orrs	r2, r3
24006ebe:	68bb      	ldr	r3, [r7, #8]
24006ec0:	681b      	ldr	r3, [r3, #0]
24006ec2:	ea42 0103 	orr.w	r1, r2, r3
24006ec6:	68fb      	ldr	r3, [r7, #12]
24006ec8:	681b      	ldr	r3, [r3, #0]
24006eca:	687a      	ldr	r2, [r7, #4]
24006ecc:	430a      	orrs	r2, r1
24006ece:	615a      	str	r2, [r3, #20]
}
24006ed0:	e102      	b.n	240070d8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24006ed2:	68bb      	ldr	r3, [r7, #8]
24006ed4:	69db      	ldr	r3, [r3, #28]
24006ed6:	2b00      	cmp	r3, #0
24006ed8:	d02e      	beq.n	24006f38 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24006eda:	68bb      	ldr	r3, [r7, #8]
24006edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006ede:	68bb      	ldr	r3, [r7, #8]
24006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006ee2:	431a      	orrs	r2, r3
24006ee4:	68bb      	ldr	r3, [r7, #8]
24006ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24006ee8:	431a      	orrs	r2, r3
24006eea:	68bb      	ldr	r3, [r7, #8]
24006eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24006eee:	431a      	orrs	r2, r3
24006ef0:	68bb      	ldr	r3, [r7, #8]
24006ef2:	695b      	ldr	r3, [r3, #20]
24006ef4:	049b      	lsls	r3, r3, #18
24006ef6:	431a      	orrs	r2, r3
24006ef8:	68bb      	ldr	r3, [r7, #8]
24006efa:	6a1b      	ldr	r3, [r3, #32]
24006efc:	431a      	orrs	r2, r3
24006efe:	68bb      	ldr	r3, [r7, #8]
24006f00:	68db      	ldr	r3, [r3, #12]
24006f02:	431a      	orrs	r2, r3
24006f04:	68bb      	ldr	r3, [r7, #8]
24006f06:	69db      	ldr	r3, [r3, #28]
24006f08:	431a      	orrs	r2, r3
24006f0a:	68bb      	ldr	r3, [r7, #8]
24006f0c:	699b      	ldr	r3, [r3, #24]
24006f0e:	431a      	orrs	r2, r3
24006f10:	68bb      	ldr	r3, [r7, #8]
24006f12:	681b      	ldr	r3, [r3, #0]
24006f14:	ea42 0103 	orr.w	r1, r2, r3
24006f18:	68fb      	ldr	r3, [r7, #12]
24006f1a:	681b      	ldr	r3, [r3, #0]
24006f1c:	687a      	ldr	r2, [r7, #4]
24006f1e:	430a      	orrs	r2, r1
24006f20:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24006f22:	687b      	ldr	r3, [r7, #4]
24006f24:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24006f28:	f000 80d6 	beq.w	240070d8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24006f2c:	68fb      	ldr	r3, [r7, #12]
24006f2e:	681b      	ldr	r3, [r3, #0]
24006f30:	68ba      	ldr	r2, [r7, #8]
24006f32:	6852      	ldr	r2, [r2, #4]
24006f34:	619a      	str	r2, [r3, #24]
}
24006f36:	e0cf      	b.n	240070d8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24006f38:	68bb      	ldr	r3, [r7, #8]
24006f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006f3c:	68bb      	ldr	r3, [r7, #8]
24006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006f40:	431a      	orrs	r2, r3
24006f42:	68bb      	ldr	r3, [r7, #8]
24006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24006f46:	431a      	orrs	r2, r3
24006f48:	68bb      	ldr	r3, [r7, #8]
24006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24006f4c:	431a      	orrs	r2, r3
24006f4e:	68bb      	ldr	r3, [r7, #8]
24006f50:	695b      	ldr	r3, [r3, #20]
24006f52:	049b      	lsls	r3, r3, #18
24006f54:	431a      	orrs	r2, r3
24006f56:	68bb      	ldr	r3, [r7, #8]
24006f58:	6a1b      	ldr	r3, [r3, #32]
24006f5a:	431a      	orrs	r2, r3
24006f5c:	68bb      	ldr	r3, [r7, #8]
24006f5e:	69db      	ldr	r3, [r3, #28]
24006f60:	431a      	orrs	r2, r3
24006f62:	68bb      	ldr	r3, [r7, #8]
24006f64:	699b      	ldr	r3, [r3, #24]
24006f66:	431a      	orrs	r2, r3
24006f68:	68bb      	ldr	r3, [r7, #8]
24006f6a:	681b      	ldr	r3, [r3, #0]
24006f6c:	ea42 0103 	orr.w	r1, r2, r3
24006f70:	68fb      	ldr	r3, [r7, #12]
24006f72:	681b      	ldr	r3, [r3, #0]
24006f74:	687a      	ldr	r2, [r7, #4]
24006f76:	430a      	orrs	r2, r1
24006f78:	615a      	str	r2, [r3, #20]
}
24006f7a:	e0ad      	b.n	240070d8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
24006f7c:	68bb      	ldr	r3, [r7, #8]
24006f7e:	6a1b      	ldr	r3, [r3, #32]
24006f80:	2b00      	cmp	r3, #0
24006f82:	d058      	beq.n	24007036 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
24006f84:	68fb      	ldr	r3, [r7, #12]
24006f86:	681b      	ldr	r3, [r3, #0]
24006f88:	68ba      	ldr	r2, [r7, #8]
24006f8a:	6892      	ldr	r2, [r2, #8]
24006f8c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24006f8e:	68bb      	ldr	r3, [r7, #8]
24006f90:	69db      	ldr	r3, [r3, #28]
24006f92:	2b00      	cmp	r3, #0
24006f94:	d02d      	beq.n	24006ff2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24006f96:	68bb      	ldr	r3, [r7, #8]
24006f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006f9a:	68bb      	ldr	r3, [r7, #8]
24006f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006f9e:	431a      	orrs	r2, r3
24006fa0:	68bb      	ldr	r3, [r7, #8]
24006fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24006fa4:	431a      	orrs	r2, r3
24006fa6:	68bb      	ldr	r3, [r7, #8]
24006fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24006faa:	431a      	orrs	r2, r3
24006fac:	68bb      	ldr	r3, [r7, #8]
24006fae:	695b      	ldr	r3, [r3, #20]
24006fb0:	049b      	lsls	r3, r3, #18
24006fb2:	431a      	orrs	r2, r3
24006fb4:	68bb      	ldr	r3, [r7, #8]
24006fb6:	691b      	ldr	r3, [r3, #16]
24006fb8:	431a      	orrs	r2, r3
24006fba:	68bb      	ldr	r3, [r7, #8]
24006fbc:	6a1b      	ldr	r3, [r3, #32]
24006fbe:	431a      	orrs	r2, r3
24006fc0:	68bb      	ldr	r3, [r7, #8]
24006fc2:	68db      	ldr	r3, [r3, #12]
24006fc4:	431a      	orrs	r2, r3
24006fc6:	68bb      	ldr	r3, [r7, #8]
24006fc8:	69db      	ldr	r3, [r3, #28]
24006fca:	431a      	orrs	r2, r3
24006fcc:	68bb      	ldr	r3, [r7, #8]
24006fce:	699b      	ldr	r3, [r3, #24]
24006fd0:	ea42 0103 	orr.w	r1, r2, r3
24006fd4:	68fb      	ldr	r3, [r7, #12]
24006fd6:	681b      	ldr	r3, [r3, #0]
24006fd8:	687a      	ldr	r2, [r7, #4]
24006fda:	430a      	orrs	r2, r1
24006fdc:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24006fde:	687b      	ldr	r3, [r7, #4]
24006fe0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24006fe4:	d078      	beq.n	240070d8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24006fe6:	68fb      	ldr	r3, [r7, #12]
24006fe8:	681b      	ldr	r3, [r3, #0]
24006fea:	68ba      	ldr	r2, [r7, #8]
24006fec:	6852      	ldr	r2, [r2, #4]
24006fee:	619a      	str	r2, [r3, #24]
}
24006ff0:	e072      	b.n	240070d8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
24006ff2:	68bb      	ldr	r3, [r7, #8]
24006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24006ff6:	68bb      	ldr	r3, [r7, #8]
24006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24006ffa:	431a      	orrs	r2, r3
24006ffc:	68bb      	ldr	r3, [r7, #8]
24006ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24007000:	431a      	orrs	r2, r3
24007002:	68bb      	ldr	r3, [r7, #8]
24007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24007006:	431a      	orrs	r2, r3
24007008:	68bb      	ldr	r3, [r7, #8]
2400700a:	695b      	ldr	r3, [r3, #20]
2400700c:	049b      	lsls	r3, r3, #18
2400700e:	431a      	orrs	r2, r3
24007010:	68bb      	ldr	r3, [r7, #8]
24007012:	691b      	ldr	r3, [r3, #16]
24007014:	431a      	orrs	r2, r3
24007016:	68bb      	ldr	r3, [r7, #8]
24007018:	6a1b      	ldr	r3, [r3, #32]
2400701a:	431a      	orrs	r2, r3
2400701c:	68bb      	ldr	r3, [r7, #8]
2400701e:	69db      	ldr	r3, [r3, #28]
24007020:	431a      	orrs	r2, r3
24007022:	68bb      	ldr	r3, [r7, #8]
24007024:	699b      	ldr	r3, [r3, #24]
24007026:	ea42 0103 	orr.w	r1, r2, r3
2400702a:	68fb      	ldr	r3, [r7, #12]
2400702c:	681b      	ldr	r3, [r3, #0]
2400702e:	687a      	ldr	r2, [r7, #4]
24007030:	430a      	orrs	r2, r1
24007032:	615a      	str	r2, [r3, #20]
}
24007034:	e050      	b.n	240070d8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
24007036:	68bb      	ldr	r3, [r7, #8]
24007038:	69db      	ldr	r3, [r3, #28]
2400703a:	2b00      	cmp	r3, #0
2400703c:	d02a      	beq.n	24007094 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2400703e:	68bb      	ldr	r3, [r7, #8]
24007040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
24007042:	68bb      	ldr	r3, [r7, #8]
24007044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007046:	431a      	orrs	r2, r3
24007048:	68bb      	ldr	r3, [r7, #8]
2400704a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400704c:	431a      	orrs	r2, r3
2400704e:	68bb      	ldr	r3, [r7, #8]
24007050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24007052:	431a      	orrs	r2, r3
24007054:	68bb      	ldr	r3, [r7, #8]
24007056:	695b      	ldr	r3, [r3, #20]
24007058:	049b      	lsls	r3, r3, #18
2400705a:	431a      	orrs	r2, r3
2400705c:	68bb      	ldr	r3, [r7, #8]
2400705e:	6a1b      	ldr	r3, [r3, #32]
24007060:	431a      	orrs	r2, r3
24007062:	68bb      	ldr	r3, [r7, #8]
24007064:	68db      	ldr	r3, [r3, #12]
24007066:	431a      	orrs	r2, r3
24007068:	68bb      	ldr	r3, [r7, #8]
2400706a:	69db      	ldr	r3, [r3, #28]
2400706c:	431a      	orrs	r2, r3
2400706e:	68bb      	ldr	r3, [r7, #8]
24007070:	699b      	ldr	r3, [r3, #24]
24007072:	ea42 0103 	orr.w	r1, r2, r3
24007076:	68fb      	ldr	r3, [r7, #12]
24007078:	681b      	ldr	r3, [r3, #0]
2400707a:	687a      	ldr	r2, [r7, #4]
2400707c:	430a      	orrs	r2, r1
2400707e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
24007080:	687b      	ldr	r3, [r7, #4]
24007082:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
24007086:	d027      	beq.n	240070d8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
24007088:	68fb      	ldr	r3, [r7, #12]
2400708a:	681b      	ldr	r3, [r3, #0]
2400708c:	68ba      	ldr	r2, [r7, #8]
2400708e:	6852      	ldr	r2, [r2, #4]
24007090:	619a      	str	r2, [r3, #24]
}
24007092:	e021      	b.n	240070d8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
24007094:	68bb      	ldr	r3, [r7, #8]
24007096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24007098:	2b00      	cmp	r3, #0
2400709a:	d01d      	beq.n	240070d8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
2400709c:	68bb      	ldr	r3, [r7, #8]
2400709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
240070a0:	68bb      	ldr	r3, [r7, #8]
240070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240070a4:	431a      	orrs	r2, r3
240070a6:	68bb      	ldr	r3, [r7, #8]
240070a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240070aa:	431a      	orrs	r2, r3
240070ac:	68bb      	ldr	r3, [r7, #8]
240070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
240070b0:	431a      	orrs	r2, r3
240070b2:	68bb      	ldr	r3, [r7, #8]
240070b4:	695b      	ldr	r3, [r3, #20]
240070b6:	049b      	lsls	r3, r3, #18
240070b8:	431a      	orrs	r2, r3
240070ba:	68bb      	ldr	r3, [r7, #8]
240070bc:	6a1b      	ldr	r3, [r3, #32]
240070be:	431a      	orrs	r2, r3
240070c0:	68bb      	ldr	r3, [r7, #8]
240070c2:	69db      	ldr	r3, [r3, #28]
240070c4:	431a      	orrs	r2, r3
240070c6:	68bb      	ldr	r3, [r7, #8]
240070c8:	699b      	ldr	r3, [r3, #24]
240070ca:	ea42 0103 	orr.w	r1, r2, r3
240070ce:	68fb      	ldr	r3, [r7, #12]
240070d0:	681b      	ldr	r3, [r3, #0]
240070d2:	687a      	ldr	r2, [r7, #4]
240070d4:	430a      	orrs	r2, r1
240070d6:	615a      	str	r2, [r3, #20]
}
240070d8:	bf00      	nop
240070da:	3714      	adds	r7, #20
240070dc:	46bd      	mov	sp, r7
240070de:	f85d 7b04 	ldr.w	r7, [sp], #4
240070e2:	4770      	bx	lr

240070e4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
240070e4:	b580      	push	{r7, lr}
240070e6:	b082      	sub	sp, #8
240070e8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

        /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
240070ea:	4b89      	ldr	r3, [pc, #548]	; (24007310 <HAL_RCC_DeInit+0x22c>)
240070ec:	681b      	ldr	r3, [r3, #0]
240070ee:	f003 030f 	and.w	r3, r3, #15
240070f2:	2b06      	cmp	r3, #6
240070f4:	d80f      	bhi.n	24007116 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
240070f6:	4b86      	ldr	r3, [pc, #536]	; (24007310 <HAL_RCC_DeInit+0x22c>)
240070f8:	681b      	ldr	r3, [r3, #0]
240070fa:	f023 030f 	bic.w	r3, r3, #15
240070fe:	4a84      	ldr	r2, [pc, #528]	; (24007310 <HAL_RCC_DeInit+0x22c>)
24007100:	f043 0307 	orr.w	r3, r3, #7
24007104:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
24007106:	4b82      	ldr	r3, [pc, #520]	; (24007310 <HAL_RCC_DeInit+0x22c>)
24007108:	681b      	ldr	r3, [r3, #0]
2400710a:	f003 030f 	and.w	r3, r3, #15
2400710e:	2b07      	cmp	r3, #7
24007110:	d001      	beq.n	24007116 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
24007112:	2301      	movs	r3, #1
24007114:	e0f7      	b.n	24007306 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
24007116:	f7fb f851 	bl	240021bc <HAL_GetTick>
2400711a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
2400711c:	4b7d      	ldr	r3, [pc, #500]	; (24007314 <HAL_RCC_DeInit+0x230>)
2400711e:	681b      	ldr	r3, [r3, #0]
24007120:	4a7c      	ldr	r2, [pc, #496]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007122:	f043 0301 	orr.w	r3, r3, #1
24007126:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
24007128:	e008      	b.n	2400713c <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
2400712a:	f7fb f847 	bl	240021bc <HAL_GetTick>
2400712e:	4602      	mov	r2, r0
24007130:	687b      	ldr	r3, [r7, #4]
24007132:	1ad3      	subs	r3, r2, r3
24007134:	2b02      	cmp	r3, #2
24007136:	d901      	bls.n	2400713c <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
24007138:	2303      	movs	r3, #3
2400713a:	e0e4      	b.n	24007306 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
2400713c:	4b75      	ldr	r3, [pc, #468]	; (24007314 <HAL_RCC_DeInit+0x230>)
2400713e:	681b      	ldr	r3, [r3, #0]
24007140:	f003 0304 	and.w	r3, r3, #4
24007144:	2b00      	cmp	r3, #0
24007146:	d0f0      	beq.n	2400712a <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
24007148:	4b72      	ldr	r3, [pc, #456]	; (24007314 <HAL_RCC_DeInit+0x230>)
2400714a:	685b      	ldr	r3, [r3, #4]
2400714c:	4a71      	ldr	r2, [pc, #452]	; (24007314 <HAL_RCC_DeInit+0x230>)
2400714e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24007152:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
24007154:	4b6f      	ldr	r3, [pc, #444]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007156:	2200      	movs	r2, #0
24007158:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
2400715a:	4b6f      	ldr	r3, [pc, #444]	; (24007318 <HAL_RCC_DeInit+0x234>)
2400715c:	4a6f      	ldr	r2, [pc, #444]	; (2400731c <HAL_RCC_DeInit+0x238>)
2400715e:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
24007160:	4b6f      	ldr	r3, [pc, #444]	; (24007320 <HAL_RCC_DeInit+0x23c>)
24007162:	4a6e      	ldr	r2, [pc, #440]	; (2400731c <HAL_RCC_DeInit+0x238>)
24007164:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
24007166:	4b6f      	ldr	r3, [pc, #444]	; (24007324 <HAL_RCC_DeInit+0x240>)
24007168:	681b      	ldr	r3, [r3, #0]
2400716a:	4618      	mov	r0, r3
2400716c:	f7fa ffdc 	bl	24002128 <HAL_InitTick>
24007170:	4603      	mov	r3, r0
24007172:	2b00      	cmp	r3, #0
24007174:	d001      	beq.n	2400717a <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
24007176:	2301      	movs	r3, #1
24007178:	e0c5      	b.n	24007306 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2400717a:	f7fb f81f 	bl	240021bc <HAL_GetTick>
2400717e:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
24007180:	e00a      	b.n	24007198 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
24007182:	f7fb f81b 	bl	240021bc <HAL_GetTick>
24007186:	4602      	mov	r2, r0
24007188:	687b      	ldr	r3, [r7, #4]
2400718a:	1ad3      	subs	r3, r2, r3
2400718c:	f241 3288 	movw	r2, #5000	; 0x1388
24007190:	4293      	cmp	r3, r2
24007192:	d901      	bls.n	24007198 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
24007194:	2303      	movs	r3, #3
24007196:	e0b6      	b.n	24007306 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
24007198:	4b5e      	ldr	r3, [pc, #376]	; (24007314 <HAL_RCC_DeInit+0x230>)
2400719a:	691b      	ldr	r3, [r3, #16]
2400719c:	f003 0338 	and.w	r3, r3, #56	; 0x38
240071a0:	2b00      	cmp	r3, #0
240071a2:	d1ee      	bne.n	24007182 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
240071a4:	f7fb f80a 	bl	240021bc <HAL_GetTick>
240071a8:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON| RCC_CR_HSIDIV| RCC_CR_HSIDIVF| RCC_CR_CSION | RCC_CR_CSIKERON  \
240071aa:	4b5a      	ldr	r3, [pc, #360]	; (24007314 <HAL_RCC_DeInit+0x230>)
240071ac:	681a      	ldr	r2, [r3, #0]
240071ae:	4959      	ldr	r1, [pc, #356]	; (24007314 <HAL_RCC_DeInit+0x230>)
240071b0:	4b5d      	ldr	r3, [pc, #372]	; (24007328 <HAL_RCC_DeInit+0x244>)
240071b2:	4013      	ands	r3, r2
240071b4:	600b      	str	r3, [r1, #0]
  | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
240071b6:	e008      	b.n	240071ca <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
240071b8:	f7fb f800 	bl	240021bc <HAL_GetTick>
240071bc:	4602      	mov	r2, r0
240071be:	687b      	ldr	r3, [r7, #4]
240071c0:	1ad3      	subs	r3, r2, r3
240071c2:	2b64      	cmp	r3, #100	; 0x64
240071c4:	d901      	bls.n	240071ca <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
240071c6:	2303      	movs	r3, #3
240071c8:	e09d      	b.n	24007306 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
240071ca:	4b52      	ldr	r3, [pc, #328]	; (24007314 <HAL_RCC_DeInit+0x230>)
240071cc:	681b      	ldr	r3, [r3, #0]
240071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240071d2:	2b00      	cmp	r3, #0
240071d4:	d1f0      	bne.n	240071b8 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
240071d6:	f7fa fff1 	bl	240021bc <HAL_GetTick>
240071da:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
240071dc:	4b4d      	ldr	r3, [pc, #308]	; (24007314 <HAL_RCC_DeInit+0x230>)
240071de:	681b      	ldr	r3, [r3, #0]
240071e0:	4a4c      	ldr	r2, [pc, #304]	; (24007314 <HAL_RCC_DeInit+0x230>)
240071e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
240071e6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
240071e8:	e008      	b.n	240071fc <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
240071ea:	f7fa ffe7 	bl	240021bc <HAL_GetTick>
240071ee:	4602      	mov	r2, r0
240071f0:	687b      	ldr	r3, [r7, #4]
240071f2:	1ad3      	subs	r3, r2, r3
240071f4:	2b02      	cmp	r3, #2
240071f6:	d901      	bls.n	240071fc <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
240071f8:	2303      	movs	r3, #3
240071fa:	e084      	b.n	24007306 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
240071fc:	4b45      	ldr	r3, [pc, #276]	; (24007314 <HAL_RCC_DeInit+0x230>)
240071fe:	681b      	ldr	r3, [r3, #0]
24007200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24007204:	2b00      	cmp	r3, #0
24007206:	d1f0      	bne.n	240071ea <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
24007208:	f7fa ffd8 	bl	240021bc <HAL_GetTick>
2400720c:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
2400720e:	4b41      	ldr	r3, [pc, #260]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007210:	681b      	ldr	r3, [r3, #0]
24007212:	4a40      	ldr	r2, [pc, #256]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007214:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
24007218:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
2400721a:	e008      	b.n	2400722e <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2400721c:	f7fa ffce 	bl	240021bc <HAL_GetTick>
24007220:	4602      	mov	r2, r0
24007222:	687b      	ldr	r3, [r7, #4]
24007224:	1ad3      	subs	r3, r2, r3
24007226:	2b02      	cmp	r3, #2
24007228:	d901      	bls.n	2400722e <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
2400722a:	2303      	movs	r3, #3
2400722c:	e06b      	b.n	24007306 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
2400722e:	4b39      	ldr	r3, [pc, #228]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007230:	681b      	ldr	r3, [r3, #0]
24007232:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24007236:	2b00      	cmp	r3, #0
24007238:	d1f0      	bne.n	2400721c <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
2400723a:	f7fa ffbf 	bl	240021bc <HAL_GetTick>
2400723e:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
24007240:	4b34      	ldr	r3, [pc, #208]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007242:	681b      	ldr	r3, [r3, #0]
24007244:	4a33      	ldr	r2, [pc, #204]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2400724a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
2400724c:	e008      	b.n	24007260 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
2400724e:	f7fa ffb5 	bl	240021bc <HAL_GetTick>
24007252:	4602      	mov	r2, r0
24007254:	687b      	ldr	r3, [r7, #4]
24007256:	1ad3      	subs	r3, r2, r3
24007258:	2b02      	cmp	r3, #2
2400725a:	d901      	bls.n	24007260 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
2400725c:	2303      	movs	r3, #3
2400725e:	e052      	b.n	24007306 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
24007260:	4b2c      	ldr	r3, [pc, #176]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007262:	681b      	ldr	r3, [r3, #0]
24007264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
24007268:	2b00      	cmp	r3, #0
2400726a:	d1f0      	bne.n	2400724e <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
2400726c:	4b29      	ldr	r3, [pc, #164]	; (24007314 <HAL_RCC_DeInit+0x230>)
2400726e:	2200      	movs	r2, #0
24007270:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
24007272:	4b28      	ldr	r3, [pc, #160]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007274:	2200      	movs	r2, #0
24007276:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
24007278:	4b26      	ldr	r3, [pc, #152]	; (24007314 <HAL_RCC_DeInit+0x230>)
2400727a:	2200      	movs	r2, #0
2400727c:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR= RCC_PLLCKSELR_DIVM1_5|RCC_PLLCKSELR_DIVM2_5|RCC_PLLCKSELR_DIVM3_5;
2400727e:	4b25      	ldr	r3, [pc, #148]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007280:	4a2a      	ldr	r2, [pc, #168]	; (2400732c <HAL_RCC_DeInit+0x248>)
24007282:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
24007284:	4b23      	ldr	r3, [pc, #140]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007286:	4a2a      	ldr	r2, [pc, #168]	; (24007330 <HAL_RCC_DeInit+0x24c>)
24007288:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR,0x01010280U);
2400728a:	4b22      	ldr	r3, [pc, #136]	; (24007314 <HAL_RCC_DeInit+0x230>)
2400728c:	4a29      	ldr	r2, [pc, #164]	; (24007334 <HAL_RCC_DeInit+0x250>)
2400728e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
24007290:	4b20      	ldr	r3, [pc, #128]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007292:	2200      	movs	r2, #0
24007294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR,0x01010280U);
24007296:	4b1f      	ldr	r3, [pc, #124]	; (24007314 <HAL_RCC_DeInit+0x230>)
24007298:	4a26      	ldr	r2, [pc, #152]	; (24007334 <HAL_RCC_DeInit+0x250>)
2400729a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
2400729c:	4b1d      	ldr	r3, [pc, #116]	; (24007314 <HAL_RCC_DeInit+0x230>)
2400729e:	2200      	movs	r2, #0
240072a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR,0x01010280U);
240072a2:	4b1c      	ldr	r3, [pc, #112]	; (24007314 <HAL_RCC_DeInit+0x230>)
240072a4:	4a23      	ldr	r2, [pc, #140]	; (24007334 <HAL_RCC_DeInit+0x250>)
240072a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
240072a8:	4b1a      	ldr	r3, [pc, #104]	; (24007314 <HAL_RCC_DeInit+0x230>)
240072aa:	2200      	movs	r2, #0
240072ac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
240072ae:	4b19      	ldr	r3, [pc, #100]	; (24007314 <HAL_RCC_DeInit+0x230>)
240072b0:	681b      	ldr	r3, [r3, #0]
240072b2:	4a18      	ldr	r2, [pc, #96]	; (24007314 <HAL_RCC_DeInit+0x230>)
240072b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
240072b8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
240072ba:	4b16      	ldr	r3, [pc, #88]	; (24007314 <HAL_RCC_DeInit+0x230>)
240072bc:	2200      	movs	r2, #0
240072be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR,0xFFFFFFFFU);
240072c0:	4b14      	ldr	r3, [pc, #80]	; (24007314 <HAL_RCC_DeInit+0x230>)
240072c2:	f04f 32ff 	mov.w	r2, #4294967295
240072c6:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
240072c8:	4b12      	ldr	r3, [pc, #72]	; (24007314 <HAL_RCC_DeInit+0x230>)
240072ca:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
240072ce:	4a11      	ldr	r2, [pc, #68]	; (24007314 <HAL_RCC_DeInit+0x230>)
240072d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240072d4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

      /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
240072d8:	4b0d      	ldr	r3, [pc, #52]	; (24007310 <HAL_RCC_DeInit+0x22c>)
240072da:	681b      	ldr	r3, [r3, #0]
240072dc:	f003 030f 	and.w	r3, r3, #15
240072e0:	2b07      	cmp	r3, #7
240072e2:	d90f      	bls.n	24007304 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
240072e4:	4b0a      	ldr	r3, [pc, #40]	; (24007310 <HAL_RCC_DeInit+0x22c>)
240072e6:	681b      	ldr	r3, [r3, #0]
240072e8:	f023 030f 	bic.w	r3, r3, #15
240072ec:	4a08      	ldr	r2, [pc, #32]	; (24007310 <HAL_RCC_DeInit+0x22c>)
240072ee:	f043 0307 	orr.w	r3, r3, #7
240072f2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
240072f4:	4b06      	ldr	r3, [pc, #24]	; (24007310 <HAL_RCC_DeInit+0x22c>)
240072f6:	681b      	ldr	r3, [r3, #0]
240072f8:	f003 030f 	and.w	r3, r3, #15
240072fc:	2b07      	cmp	r3, #7
240072fe:	d001      	beq.n	24007304 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
24007300:	2301      	movs	r3, #1
24007302:	e000      	b.n	24007306 <HAL_RCC_DeInit+0x222>
    }

}

  return HAL_OK;
24007304:	2300      	movs	r3, #0
}
24007306:	4618      	mov	r0, r3
24007308:	3708      	adds	r7, #8
2400730a:	46bd      	mov	sp, r7
2400730c:	bd80      	pop	{r7, pc}
2400730e:	bf00      	nop
24007310:	52002000 	.word	0x52002000
24007314:	58024400 	.word	0x58024400
24007318:	240004a4 	.word	0x240004a4
2400731c:	03d09000 	.word	0x03d09000
24007320:	240004a8 	.word	0x240004a8
24007324:	240004ac 	.word	0x240004ac
24007328:	fff6ed45 	.word	0xfff6ed45
2400732c:	02020200 	.word	0x02020200
24007330:	01ff0000 	.word	0x01ff0000
24007334:	01010280 	.word	0x01010280

24007338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24007338:	b580      	push	{r7, lr}
2400733a:	b08c      	sub	sp, #48	; 0x30
2400733c:	af00      	add	r7, sp, #0
2400733e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
24007340:	687b      	ldr	r3, [r7, #4]
24007342:	2b00      	cmp	r3, #0
24007344:	d101      	bne.n	2400734a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
24007346:	2301      	movs	r3, #1
24007348:	e3ff      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2400734a:	687b      	ldr	r3, [r7, #4]
2400734c:	681b      	ldr	r3, [r3, #0]
2400734e:	f003 0301 	and.w	r3, r3, #1
24007352:	2b00      	cmp	r3, #0
24007354:	f000 8087 	beq.w	24007466 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007358:	4b99      	ldr	r3, [pc, #612]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
2400735a:	691b      	ldr	r3, [r3, #16]
2400735c:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007360:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
24007362:	4b97      	ldr	r3, [pc, #604]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24007366:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
24007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2400736a:	2b10      	cmp	r3, #16
2400736c:	d007      	beq.n	2400737e <HAL_RCC_OscConfig+0x46>
2400736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
24007370:	2b18      	cmp	r3, #24
24007372:	d110      	bne.n	24007396 <HAL_RCC_OscConfig+0x5e>
24007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
24007376:	f003 0303 	and.w	r3, r3, #3
2400737a:	2b02      	cmp	r3, #2
2400737c:	d10b      	bne.n	24007396 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2400737e:	4b90      	ldr	r3, [pc, #576]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007380:	681b      	ldr	r3, [r3, #0]
24007382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24007386:	2b00      	cmp	r3, #0
24007388:	d06c      	beq.n	24007464 <HAL_RCC_OscConfig+0x12c>
2400738a:	687b      	ldr	r3, [r7, #4]
2400738c:	685b      	ldr	r3, [r3, #4]
2400738e:	2b00      	cmp	r3, #0
24007390:	d168      	bne.n	24007464 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
24007392:	2301      	movs	r3, #1
24007394:	e3d9      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
24007396:	687b      	ldr	r3, [r7, #4]
24007398:	685b      	ldr	r3, [r3, #4]
2400739a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400739e:	d106      	bne.n	240073ae <HAL_RCC_OscConfig+0x76>
240073a0:	4b87      	ldr	r3, [pc, #540]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073a2:	681b      	ldr	r3, [r3, #0]
240073a4:	4a86      	ldr	r2, [pc, #536]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240073aa:	6013      	str	r3, [r2, #0]
240073ac:	e02e      	b.n	2400740c <HAL_RCC_OscConfig+0xd4>
240073ae:	687b      	ldr	r3, [r7, #4]
240073b0:	685b      	ldr	r3, [r3, #4]
240073b2:	2b00      	cmp	r3, #0
240073b4:	d10c      	bne.n	240073d0 <HAL_RCC_OscConfig+0x98>
240073b6:	4b82      	ldr	r3, [pc, #520]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073b8:	681b      	ldr	r3, [r3, #0]
240073ba:	4a81      	ldr	r2, [pc, #516]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240073c0:	6013      	str	r3, [r2, #0]
240073c2:	4b7f      	ldr	r3, [pc, #508]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073c4:	681b      	ldr	r3, [r3, #0]
240073c6:	4a7e      	ldr	r2, [pc, #504]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
240073cc:	6013      	str	r3, [r2, #0]
240073ce:	e01d      	b.n	2400740c <HAL_RCC_OscConfig+0xd4>
240073d0:	687b      	ldr	r3, [r7, #4]
240073d2:	685b      	ldr	r3, [r3, #4]
240073d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
240073d8:	d10c      	bne.n	240073f4 <HAL_RCC_OscConfig+0xbc>
240073da:	4b79      	ldr	r3, [pc, #484]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073dc:	681b      	ldr	r3, [r3, #0]
240073de:	4a78      	ldr	r2, [pc, #480]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
240073e4:	6013      	str	r3, [r2, #0]
240073e6:	4b76      	ldr	r3, [pc, #472]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073e8:	681b      	ldr	r3, [r3, #0]
240073ea:	4a75      	ldr	r2, [pc, #468]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
240073f0:	6013      	str	r3, [r2, #0]
240073f2:	e00b      	b.n	2400740c <HAL_RCC_OscConfig+0xd4>
240073f4:	4b72      	ldr	r3, [pc, #456]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073f6:	681b      	ldr	r3, [r3, #0]
240073f8:	4a71      	ldr	r2, [pc, #452]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240073fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
240073fe:	6013      	str	r3, [r2, #0]
24007400:	4b6f      	ldr	r3, [pc, #444]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007402:	681b      	ldr	r3, [r3, #0]
24007404:	4a6e      	ldr	r2, [pc, #440]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
2400740a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
2400740c:	687b      	ldr	r3, [r7, #4]
2400740e:	685b      	ldr	r3, [r3, #4]
24007410:	2b00      	cmp	r3, #0
24007412:	d013      	beq.n	2400743c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24007414:	f7fa fed2 	bl	240021bc <HAL_GetTick>
24007418:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400741a:	e008      	b.n	2400742e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
2400741c:	f7fa fece 	bl	240021bc <HAL_GetTick>
24007420:	4602      	mov	r2, r0
24007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24007424:	1ad3      	subs	r3, r2, r3
24007426:	2b64      	cmp	r3, #100	; 0x64
24007428:	d901      	bls.n	2400742e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
2400742a:	2303      	movs	r3, #3
2400742c:	e38d      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
2400742e:	4b64      	ldr	r3, [pc, #400]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007430:	681b      	ldr	r3, [r3, #0]
24007432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24007436:	2b00      	cmp	r3, #0
24007438:	d0f0      	beq.n	2400741c <HAL_RCC_OscConfig+0xe4>
2400743a:	e014      	b.n	24007466 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2400743c:	f7fa febe 	bl	240021bc <HAL_GetTick>
24007440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007442:	e008      	b.n	24007456 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
24007444:	f7fa feba 	bl	240021bc <HAL_GetTick>
24007448:	4602      	mov	r2, r0
2400744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400744c:	1ad3      	subs	r3, r2, r3
2400744e:	2b64      	cmp	r3, #100	; 0x64
24007450:	d901      	bls.n	24007456 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
24007452:	2303      	movs	r3, #3
24007454:	e379      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
24007456:	4b5a      	ldr	r3, [pc, #360]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007458:	681b      	ldr	r3, [r3, #0]
2400745a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
2400745e:	2b00      	cmp	r3, #0
24007460:	d1f0      	bne.n	24007444 <HAL_RCC_OscConfig+0x10c>
24007462:	e000      	b.n	24007466 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
24007464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
24007466:	687b      	ldr	r3, [r7, #4]
24007468:	681b      	ldr	r3, [r3, #0]
2400746a:	f003 0302 	and.w	r3, r3, #2
2400746e:	2b00      	cmp	r3, #0
24007470:	f000 80ae 	beq.w	240075d0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
24007474:	4b52      	ldr	r3, [pc, #328]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007476:	691b      	ldr	r3, [r3, #16]
24007478:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400747c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
2400747e:	4b50      	ldr	r3, [pc, #320]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24007482:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
24007484:	6a3b      	ldr	r3, [r7, #32]
24007486:	2b00      	cmp	r3, #0
24007488:	d007      	beq.n	2400749a <HAL_RCC_OscConfig+0x162>
2400748a:	6a3b      	ldr	r3, [r7, #32]
2400748c:	2b18      	cmp	r3, #24
2400748e:	d13a      	bne.n	24007506 <HAL_RCC_OscConfig+0x1ce>
24007490:	69fb      	ldr	r3, [r7, #28]
24007492:	f003 0303 	and.w	r3, r3, #3
24007496:	2b00      	cmp	r3, #0
24007498:	d135      	bne.n	24007506 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
2400749a:	4b49      	ldr	r3, [pc, #292]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
2400749c:	681b      	ldr	r3, [r3, #0]
2400749e:	f003 0304 	and.w	r3, r3, #4
240074a2:	2b00      	cmp	r3, #0
240074a4:	d005      	beq.n	240074b2 <HAL_RCC_OscConfig+0x17a>
240074a6:	687b      	ldr	r3, [r7, #4]
240074a8:	68db      	ldr	r3, [r3, #12]
240074aa:	2b00      	cmp	r3, #0
240074ac:	d101      	bne.n	240074b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
240074ae:	2301      	movs	r3, #1
240074b0:	e34b      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240074b2:	f7fa ff1b 	bl	240022ec <HAL_GetREVID>
240074b6:	4602      	mov	r2, r0
240074b8:	f241 0303 	movw	r3, #4099	; 0x1003
240074bc:	429a      	cmp	r2, r3
240074be:	d817      	bhi.n	240074f0 <HAL_RCC_OscConfig+0x1b8>
240074c0:	687b      	ldr	r3, [r7, #4]
240074c2:	691b      	ldr	r3, [r3, #16]
240074c4:	2b40      	cmp	r3, #64	; 0x40
240074c6:	d108      	bne.n	240074da <HAL_RCC_OscConfig+0x1a2>
240074c8:	4b3d      	ldr	r3, [pc, #244]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240074ca:	685b      	ldr	r3, [r3, #4]
240074cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
240074d0:	4a3b      	ldr	r2, [pc, #236]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240074d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240074d6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240074d8:	e07a      	b.n	240075d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240074da:	4b39      	ldr	r3, [pc, #228]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240074dc:	685b      	ldr	r3, [r3, #4]
240074de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
240074e2:	687b      	ldr	r3, [r7, #4]
240074e4:	691b      	ldr	r3, [r3, #16]
240074e6:	031b      	lsls	r3, r3, #12
240074e8:	4935      	ldr	r1, [pc, #212]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240074ea:	4313      	orrs	r3, r2
240074ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
240074ee:	e06f      	b.n	240075d0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
240074f0:	4b33      	ldr	r3, [pc, #204]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240074f2:	685b      	ldr	r3, [r3, #4]
240074f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
240074f8:	687b      	ldr	r3, [r7, #4]
240074fa:	691b      	ldr	r3, [r3, #16]
240074fc:	061b      	lsls	r3, r3, #24
240074fe:	4930      	ldr	r1, [pc, #192]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007500:	4313      	orrs	r3, r2
24007502:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
24007504:	e064      	b.n	240075d0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
24007506:	687b      	ldr	r3, [r7, #4]
24007508:	68db      	ldr	r3, [r3, #12]
2400750a:	2b00      	cmp	r3, #0
2400750c:	d045      	beq.n	2400759a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
2400750e:	4b2c      	ldr	r3, [pc, #176]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007510:	681b      	ldr	r3, [r3, #0]
24007512:	f023 0219 	bic.w	r2, r3, #25
24007516:	687b      	ldr	r3, [r7, #4]
24007518:	68db      	ldr	r3, [r3, #12]
2400751a:	4929      	ldr	r1, [pc, #164]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
2400751c:	4313      	orrs	r3, r2
2400751e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24007520:	f7fa fe4c 	bl	240021bc <HAL_GetTick>
24007524:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007526:	e008      	b.n	2400753a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
24007528:	f7fa fe48 	bl	240021bc <HAL_GetTick>
2400752c:	4602      	mov	r2, r0
2400752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24007530:	1ad3      	subs	r3, r2, r3
24007532:	2b02      	cmp	r3, #2
24007534:	d901      	bls.n	2400753a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
24007536:	2303      	movs	r3, #3
24007538:	e307      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
2400753a:	4b21      	ldr	r3, [pc, #132]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
2400753c:	681b      	ldr	r3, [r3, #0]
2400753e:	f003 0304 	and.w	r3, r3, #4
24007542:	2b00      	cmp	r3, #0
24007544:	d0f0      	beq.n	24007528 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
24007546:	f7fa fed1 	bl	240022ec <HAL_GetREVID>
2400754a:	4602      	mov	r2, r0
2400754c:	f241 0303 	movw	r3, #4099	; 0x1003
24007550:	429a      	cmp	r2, r3
24007552:	d817      	bhi.n	24007584 <HAL_RCC_OscConfig+0x24c>
24007554:	687b      	ldr	r3, [r7, #4]
24007556:	691b      	ldr	r3, [r3, #16]
24007558:	2b40      	cmp	r3, #64	; 0x40
2400755a:	d108      	bne.n	2400756e <HAL_RCC_OscConfig+0x236>
2400755c:	4b18      	ldr	r3, [pc, #96]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
2400755e:	685b      	ldr	r3, [r3, #4]
24007560:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
24007564:	4a16      	ldr	r2, [pc, #88]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400756a:	6053      	str	r3, [r2, #4]
2400756c:	e030      	b.n	240075d0 <HAL_RCC_OscConfig+0x298>
2400756e:	4b14      	ldr	r3, [pc, #80]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007570:	685b      	ldr	r3, [r3, #4]
24007572:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
24007576:	687b      	ldr	r3, [r7, #4]
24007578:	691b      	ldr	r3, [r3, #16]
2400757a:	031b      	lsls	r3, r3, #12
2400757c:	4910      	ldr	r1, [pc, #64]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
2400757e:	4313      	orrs	r3, r2
24007580:	604b      	str	r3, [r1, #4]
24007582:	e025      	b.n	240075d0 <HAL_RCC_OscConfig+0x298>
24007584:	4b0e      	ldr	r3, [pc, #56]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007586:	685b      	ldr	r3, [r3, #4]
24007588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
2400758c:	687b      	ldr	r3, [r7, #4]
2400758e:	691b      	ldr	r3, [r3, #16]
24007590:	061b      	lsls	r3, r3, #24
24007592:	490b      	ldr	r1, [pc, #44]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
24007594:	4313      	orrs	r3, r2
24007596:	604b      	str	r3, [r1, #4]
24007598:	e01a      	b.n	240075d0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
2400759a:	4b09      	ldr	r3, [pc, #36]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
2400759c:	681b      	ldr	r3, [r3, #0]
2400759e:	4a08      	ldr	r2, [pc, #32]	; (240075c0 <HAL_RCC_OscConfig+0x288>)
240075a0:	f023 0301 	bic.w	r3, r3, #1
240075a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
240075a6:	f7fa fe09 	bl	240021bc <HAL_GetTick>
240075aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240075ac:	e00a      	b.n	240075c4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
240075ae:	f7fa fe05 	bl	240021bc <HAL_GetTick>
240075b2:	4602      	mov	r2, r0
240075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240075b6:	1ad3      	subs	r3, r2, r3
240075b8:	2b02      	cmp	r3, #2
240075ba:	d903      	bls.n	240075c4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
240075bc:	2303      	movs	r3, #3
240075be:	e2c4      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
240075c0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
240075c4:	4ba4      	ldr	r3, [pc, #656]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240075c6:	681b      	ldr	r3, [r3, #0]
240075c8:	f003 0304 	and.w	r3, r3, #4
240075cc:	2b00      	cmp	r3, #0
240075ce:	d1ee      	bne.n	240075ae <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
240075d0:	687b      	ldr	r3, [r7, #4]
240075d2:	681b      	ldr	r3, [r3, #0]
240075d4:	f003 0310 	and.w	r3, r3, #16
240075d8:	2b00      	cmp	r3, #0
240075da:	f000 80a9 	beq.w	24007730 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
240075de:	4b9e      	ldr	r3, [pc, #632]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240075e0:	691b      	ldr	r3, [r3, #16]
240075e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
240075e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
240075e8:	4b9b      	ldr	r3, [pc, #620]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240075ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
240075ee:	69bb      	ldr	r3, [r7, #24]
240075f0:	2b08      	cmp	r3, #8
240075f2:	d007      	beq.n	24007604 <HAL_RCC_OscConfig+0x2cc>
240075f4:	69bb      	ldr	r3, [r7, #24]
240075f6:	2b18      	cmp	r3, #24
240075f8:	d13a      	bne.n	24007670 <HAL_RCC_OscConfig+0x338>
240075fa:	697b      	ldr	r3, [r7, #20]
240075fc:	f003 0303 	and.w	r3, r3, #3
24007600:	2b01      	cmp	r3, #1
24007602:	d135      	bne.n	24007670 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24007604:	4b94      	ldr	r3, [pc, #592]	; (24007858 <HAL_RCC_OscConfig+0x520>)
24007606:	681b      	ldr	r3, [r3, #0]
24007608:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400760c:	2b00      	cmp	r3, #0
2400760e:	d005      	beq.n	2400761c <HAL_RCC_OscConfig+0x2e4>
24007610:	687b      	ldr	r3, [r7, #4]
24007612:	69db      	ldr	r3, [r3, #28]
24007614:	2b80      	cmp	r3, #128	; 0x80
24007616:	d001      	beq.n	2400761c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
24007618:	2301      	movs	r3, #1
2400761a:	e296      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400761c:	f7fa fe66 	bl	240022ec <HAL_GetREVID>
24007620:	4602      	mov	r2, r0
24007622:	f241 0303 	movw	r3, #4099	; 0x1003
24007626:	429a      	cmp	r2, r3
24007628:	d817      	bhi.n	2400765a <HAL_RCC_OscConfig+0x322>
2400762a:	687b      	ldr	r3, [r7, #4]
2400762c:	6a1b      	ldr	r3, [r3, #32]
2400762e:	2b20      	cmp	r3, #32
24007630:	d108      	bne.n	24007644 <HAL_RCC_OscConfig+0x30c>
24007632:	4b89      	ldr	r3, [pc, #548]	; (24007858 <HAL_RCC_OscConfig+0x520>)
24007634:	685b      	ldr	r3, [r3, #4]
24007636:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
2400763a:	4a87      	ldr	r2, [pc, #540]	; (24007858 <HAL_RCC_OscConfig+0x520>)
2400763c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
24007640:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24007642:	e075      	b.n	24007730 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
24007644:	4b84      	ldr	r3, [pc, #528]	; (24007858 <HAL_RCC_OscConfig+0x520>)
24007646:	685b      	ldr	r3, [r3, #4]
24007648:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
2400764c:	687b      	ldr	r3, [r7, #4]
2400764e:	6a1b      	ldr	r3, [r3, #32]
24007650:	069b      	lsls	r3, r3, #26
24007652:	4981      	ldr	r1, [pc, #516]	; (24007858 <HAL_RCC_OscConfig+0x520>)
24007654:	4313      	orrs	r3, r2
24007656:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
24007658:	e06a      	b.n	24007730 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
2400765a:	4b7f      	ldr	r3, [pc, #508]	; (24007858 <HAL_RCC_OscConfig+0x520>)
2400765c:	68db      	ldr	r3, [r3, #12]
2400765e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
24007662:	687b      	ldr	r3, [r7, #4]
24007664:	6a1b      	ldr	r3, [r3, #32]
24007666:	061b      	lsls	r3, r3, #24
24007668:	497b      	ldr	r1, [pc, #492]	; (24007858 <HAL_RCC_OscConfig+0x520>)
2400766a:	4313      	orrs	r3, r2
2400766c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
2400766e:	e05f      	b.n	24007730 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
24007670:	687b      	ldr	r3, [r7, #4]
24007672:	69db      	ldr	r3, [r3, #28]
24007674:	2b00      	cmp	r3, #0
24007676:	d042      	beq.n	240076fe <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
24007678:	4b77      	ldr	r3, [pc, #476]	; (24007858 <HAL_RCC_OscConfig+0x520>)
2400767a:	681b      	ldr	r3, [r3, #0]
2400767c:	4a76      	ldr	r2, [pc, #472]	; (24007858 <HAL_RCC_OscConfig+0x520>)
2400767e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
24007682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24007684:	f7fa fd9a 	bl	240021bc <HAL_GetTick>
24007688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2400768a:	e008      	b.n	2400769e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
2400768c:	f7fa fd96 	bl	240021bc <HAL_GetTick>
24007690:	4602      	mov	r2, r0
24007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24007694:	1ad3      	subs	r3, r2, r3
24007696:	2b02      	cmp	r3, #2
24007698:	d901      	bls.n	2400769e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
2400769a:	2303      	movs	r3, #3
2400769c:	e255      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
2400769e:	4b6e      	ldr	r3, [pc, #440]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240076a0:	681b      	ldr	r3, [r3, #0]
240076a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
240076a6:	2b00      	cmp	r3, #0
240076a8:	d0f0      	beq.n	2400768c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
240076aa:	f7fa fe1f 	bl	240022ec <HAL_GetREVID>
240076ae:	4602      	mov	r2, r0
240076b0:	f241 0303 	movw	r3, #4099	; 0x1003
240076b4:	429a      	cmp	r2, r3
240076b6:	d817      	bhi.n	240076e8 <HAL_RCC_OscConfig+0x3b0>
240076b8:	687b      	ldr	r3, [r7, #4]
240076ba:	6a1b      	ldr	r3, [r3, #32]
240076bc:	2b20      	cmp	r3, #32
240076be:	d108      	bne.n	240076d2 <HAL_RCC_OscConfig+0x39a>
240076c0:	4b65      	ldr	r3, [pc, #404]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240076c2:	685b      	ldr	r3, [r3, #4]
240076c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
240076c8:	4a63      	ldr	r2, [pc, #396]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240076ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
240076ce:	6053      	str	r3, [r2, #4]
240076d0:	e02e      	b.n	24007730 <HAL_RCC_OscConfig+0x3f8>
240076d2:	4b61      	ldr	r3, [pc, #388]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240076d4:	685b      	ldr	r3, [r3, #4]
240076d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
240076da:	687b      	ldr	r3, [r7, #4]
240076dc:	6a1b      	ldr	r3, [r3, #32]
240076de:	069b      	lsls	r3, r3, #26
240076e0:	495d      	ldr	r1, [pc, #372]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240076e2:	4313      	orrs	r3, r2
240076e4:	604b      	str	r3, [r1, #4]
240076e6:	e023      	b.n	24007730 <HAL_RCC_OscConfig+0x3f8>
240076e8:	4b5b      	ldr	r3, [pc, #364]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240076ea:	68db      	ldr	r3, [r3, #12]
240076ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
240076f0:	687b      	ldr	r3, [r7, #4]
240076f2:	6a1b      	ldr	r3, [r3, #32]
240076f4:	061b      	lsls	r3, r3, #24
240076f6:	4958      	ldr	r1, [pc, #352]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240076f8:	4313      	orrs	r3, r2
240076fa:	60cb      	str	r3, [r1, #12]
240076fc:	e018      	b.n	24007730 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
240076fe:	4b56      	ldr	r3, [pc, #344]	; (24007858 <HAL_RCC_OscConfig+0x520>)
24007700:	681b      	ldr	r3, [r3, #0]
24007702:	4a55      	ldr	r2, [pc, #340]	; (24007858 <HAL_RCC_OscConfig+0x520>)
24007704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
24007708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2400770a:	f7fa fd57 	bl	240021bc <HAL_GetTick>
2400770e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24007710:	e008      	b.n	24007724 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
24007712:	f7fa fd53 	bl	240021bc <HAL_GetTick>
24007716:	4602      	mov	r2, r0
24007718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400771a:	1ad3      	subs	r3, r2, r3
2400771c:	2b02      	cmp	r3, #2
2400771e:	d901      	bls.n	24007724 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
24007720:	2303      	movs	r3, #3
24007722:	e212      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
24007724:	4b4c      	ldr	r3, [pc, #304]	; (24007858 <HAL_RCC_OscConfig+0x520>)
24007726:	681b      	ldr	r3, [r3, #0]
24007728:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400772c:	2b00      	cmp	r3, #0
2400772e:	d1f0      	bne.n	24007712 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
24007730:	687b      	ldr	r3, [r7, #4]
24007732:	681b      	ldr	r3, [r3, #0]
24007734:	f003 0308 	and.w	r3, r3, #8
24007738:	2b00      	cmp	r3, #0
2400773a:	d036      	beq.n	240077aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
2400773c:	687b      	ldr	r3, [r7, #4]
2400773e:	695b      	ldr	r3, [r3, #20]
24007740:	2b00      	cmp	r3, #0
24007742:	d019      	beq.n	24007778 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
24007744:	4b44      	ldr	r3, [pc, #272]	; (24007858 <HAL_RCC_OscConfig+0x520>)
24007746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24007748:	4a43      	ldr	r2, [pc, #268]	; (24007858 <HAL_RCC_OscConfig+0x520>)
2400774a:	f043 0301 	orr.w	r3, r3, #1
2400774e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24007750:	f7fa fd34 	bl	240021bc <HAL_GetTick>
24007754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
24007756:	e008      	b.n	2400776a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
24007758:	f7fa fd30 	bl	240021bc <HAL_GetTick>
2400775c:	4602      	mov	r2, r0
2400775e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24007760:	1ad3      	subs	r3, r2, r3
24007762:	2b02      	cmp	r3, #2
24007764:	d901      	bls.n	2400776a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
24007766:	2303      	movs	r3, #3
24007768:	e1ef      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
2400776a:	4b3b      	ldr	r3, [pc, #236]	; (24007858 <HAL_RCC_OscConfig+0x520>)
2400776c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2400776e:	f003 0302 	and.w	r3, r3, #2
24007772:	2b00      	cmp	r3, #0
24007774:	d0f0      	beq.n	24007758 <HAL_RCC_OscConfig+0x420>
24007776:	e018      	b.n	240077aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
24007778:	4b37      	ldr	r3, [pc, #220]	; (24007858 <HAL_RCC_OscConfig+0x520>)
2400777a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
2400777c:	4a36      	ldr	r2, [pc, #216]	; (24007858 <HAL_RCC_OscConfig+0x520>)
2400777e:	f023 0301 	bic.w	r3, r3, #1
24007782:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24007784:	f7fa fd1a 	bl	240021bc <HAL_GetTick>
24007788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2400778a:	e008      	b.n	2400779e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
2400778c:	f7fa fd16 	bl	240021bc <HAL_GetTick>
24007790:	4602      	mov	r2, r0
24007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24007794:	1ad3      	subs	r3, r2, r3
24007796:	2b02      	cmp	r3, #2
24007798:	d901      	bls.n	2400779e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
2400779a:	2303      	movs	r3, #3
2400779c:	e1d5      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
2400779e:	4b2e      	ldr	r3, [pc, #184]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240077a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
240077a2:	f003 0302 	and.w	r3, r3, #2
240077a6:	2b00      	cmp	r3, #0
240077a8:	d1f0      	bne.n	2400778c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
240077aa:	687b      	ldr	r3, [r7, #4]
240077ac:	681b      	ldr	r3, [r3, #0]
240077ae:	f003 0320 	and.w	r3, r3, #32
240077b2:	2b00      	cmp	r3, #0
240077b4:	d036      	beq.n	24007824 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
240077b6:	687b      	ldr	r3, [r7, #4]
240077b8:	699b      	ldr	r3, [r3, #24]
240077ba:	2b00      	cmp	r3, #0
240077bc:	d019      	beq.n	240077f2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
240077be:	4b26      	ldr	r3, [pc, #152]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240077c0:	681b      	ldr	r3, [r3, #0]
240077c2:	4a25      	ldr	r2, [pc, #148]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240077c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
240077c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
240077ca:	f7fa fcf7 	bl	240021bc <HAL_GetTick>
240077ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240077d0:	e008      	b.n	240077e4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
240077d2:	f7fa fcf3 	bl	240021bc <HAL_GetTick>
240077d6:	4602      	mov	r2, r0
240077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240077da:	1ad3      	subs	r3, r2, r3
240077dc:	2b02      	cmp	r3, #2
240077de:	d901      	bls.n	240077e4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
240077e0:	2303      	movs	r3, #3
240077e2:	e1b2      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
240077e4:	4b1c      	ldr	r3, [pc, #112]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240077e6:	681b      	ldr	r3, [r3, #0]
240077e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
240077ec:	2b00      	cmp	r3, #0
240077ee:	d0f0      	beq.n	240077d2 <HAL_RCC_OscConfig+0x49a>
240077f0:	e018      	b.n	24007824 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
240077f2:	4b19      	ldr	r3, [pc, #100]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240077f4:	681b      	ldr	r3, [r3, #0]
240077f6:	4a18      	ldr	r2, [pc, #96]	; (24007858 <HAL_RCC_OscConfig+0x520>)
240077f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
240077fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
240077fe:	f7fa fcdd 	bl	240021bc <HAL_GetTick>
24007802:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24007804:	e008      	b.n	24007818 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
24007806:	f7fa fcd9 	bl	240021bc <HAL_GetTick>
2400780a:	4602      	mov	r2, r0
2400780c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400780e:	1ad3      	subs	r3, r2, r3
24007810:	2b02      	cmp	r3, #2
24007812:	d901      	bls.n	24007818 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
24007814:	2303      	movs	r3, #3
24007816:	e198      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
24007818:	4b0f      	ldr	r3, [pc, #60]	; (24007858 <HAL_RCC_OscConfig+0x520>)
2400781a:	681b      	ldr	r3, [r3, #0]
2400781c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
24007820:	2b00      	cmp	r3, #0
24007822:	d1f0      	bne.n	24007806 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
24007824:	687b      	ldr	r3, [r7, #4]
24007826:	681b      	ldr	r3, [r3, #0]
24007828:	f003 0304 	and.w	r3, r3, #4
2400782c:	2b00      	cmp	r3, #0
2400782e:	f000 8085 	beq.w	2400793c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
24007832:	4b0a      	ldr	r3, [pc, #40]	; (2400785c <HAL_RCC_OscConfig+0x524>)
24007834:	681b      	ldr	r3, [r3, #0]
24007836:	4a09      	ldr	r2, [pc, #36]	; (2400785c <HAL_RCC_OscConfig+0x524>)
24007838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400783c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
2400783e:	f7fa fcbd 	bl	240021bc <HAL_GetTick>
24007842:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007844:	e00c      	b.n	24007860 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
24007846:	f7fa fcb9 	bl	240021bc <HAL_GetTick>
2400784a:	4602      	mov	r2, r0
2400784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400784e:	1ad3      	subs	r3, r2, r3
24007850:	2b64      	cmp	r3, #100	; 0x64
24007852:	d905      	bls.n	24007860 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
24007854:	2303      	movs	r3, #3
24007856:	e178      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
24007858:	58024400 	.word	0x58024400
2400785c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
24007860:	4b96      	ldr	r3, [pc, #600]	; (24007abc <HAL_RCC_OscConfig+0x784>)
24007862:	681b      	ldr	r3, [r3, #0]
24007864:	f403 7380 	and.w	r3, r3, #256	; 0x100
24007868:	2b00      	cmp	r3, #0
2400786a:	d0ec      	beq.n	24007846 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
2400786c:	687b      	ldr	r3, [r7, #4]
2400786e:	689b      	ldr	r3, [r3, #8]
24007870:	2b01      	cmp	r3, #1
24007872:	d106      	bne.n	24007882 <HAL_RCC_OscConfig+0x54a>
24007874:	4b92      	ldr	r3, [pc, #584]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007878:	4a91      	ldr	r2, [pc, #580]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
2400787a:	f043 0301 	orr.w	r3, r3, #1
2400787e:	6713      	str	r3, [r2, #112]	; 0x70
24007880:	e02d      	b.n	240078de <HAL_RCC_OscConfig+0x5a6>
24007882:	687b      	ldr	r3, [r7, #4]
24007884:	689b      	ldr	r3, [r3, #8]
24007886:	2b00      	cmp	r3, #0
24007888:	d10c      	bne.n	240078a4 <HAL_RCC_OscConfig+0x56c>
2400788a:	4b8d      	ldr	r3, [pc, #564]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
2400788c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400788e:	4a8c      	ldr	r2, [pc, #560]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007890:	f023 0301 	bic.w	r3, r3, #1
24007894:	6713      	str	r3, [r2, #112]	; 0x70
24007896:	4b8a      	ldr	r3, [pc, #552]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400789a:	4a89      	ldr	r2, [pc, #548]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
2400789c:	f023 0304 	bic.w	r3, r3, #4
240078a0:	6713      	str	r3, [r2, #112]	; 0x70
240078a2:	e01c      	b.n	240078de <HAL_RCC_OscConfig+0x5a6>
240078a4:	687b      	ldr	r3, [r7, #4]
240078a6:	689b      	ldr	r3, [r3, #8]
240078a8:	2b05      	cmp	r3, #5
240078aa:	d10c      	bne.n	240078c6 <HAL_RCC_OscConfig+0x58e>
240078ac:	4b84      	ldr	r3, [pc, #528]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240078ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240078b0:	4a83      	ldr	r2, [pc, #524]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240078b2:	f043 0304 	orr.w	r3, r3, #4
240078b6:	6713      	str	r3, [r2, #112]	; 0x70
240078b8:	4b81      	ldr	r3, [pc, #516]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240078ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240078bc:	4a80      	ldr	r2, [pc, #512]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240078be:	f043 0301 	orr.w	r3, r3, #1
240078c2:	6713      	str	r3, [r2, #112]	; 0x70
240078c4:	e00b      	b.n	240078de <HAL_RCC_OscConfig+0x5a6>
240078c6:	4b7e      	ldr	r3, [pc, #504]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240078c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240078ca:	4a7d      	ldr	r2, [pc, #500]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240078cc:	f023 0301 	bic.w	r3, r3, #1
240078d0:	6713      	str	r3, [r2, #112]	; 0x70
240078d2:	4b7b      	ldr	r3, [pc, #492]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240078d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240078d6:	4a7a      	ldr	r2, [pc, #488]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240078d8:	f023 0304 	bic.w	r3, r3, #4
240078dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
240078de:	687b      	ldr	r3, [r7, #4]
240078e0:	689b      	ldr	r3, [r3, #8]
240078e2:	2b00      	cmp	r3, #0
240078e4:	d015      	beq.n	24007912 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
240078e6:	f7fa fc69 	bl	240021bc <HAL_GetTick>
240078ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
240078ec:	e00a      	b.n	24007904 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
240078ee:	f7fa fc65 	bl	240021bc <HAL_GetTick>
240078f2:	4602      	mov	r2, r0
240078f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
240078f6:	1ad3      	subs	r3, r2, r3
240078f8:	f241 3288 	movw	r2, #5000	; 0x1388
240078fc:	4293      	cmp	r3, r2
240078fe:	d901      	bls.n	24007904 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
24007900:	2303      	movs	r3, #3
24007902:	e122      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24007904:	4b6e      	ldr	r3, [pc, #440]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007908:	f003 0302 	and.w	r3, r3, #2
2400790c:	2b00      	cmp	r3, #0
2400790e:	d0ee      	beq.n	240078ee <HAL_RCC_OscConfig+0x5b6>
24007910:	e014      	b.n	2400793c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24007912:	f7fa fc53 	bl	240021bc <HAL_GetTick>
24007916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007918:	e00a      	b.n	24007930 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
2400791a:	f7fa fc4f 	bl	240021bc <HAL_GetTick>
2400791e:	4602      	mov	r2, r0
24007920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24007922:	1ad3      	subs	r3, r2, r3
24007924:	f241 3288 	movw	r2, #5000	; 0x1388
24007928:	4293      	cmp	r3, r2
2400792a:	d901      	bls.n	24007930 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
2400792c:	2303      	movs	r3, #3
2400792e:	e10c      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
24007930:	4b63      	ldr	r3, [pc, #396]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24007934:	f003 0302 	and.w	r3, r3, #2
24007938:	2b00      	cmp	r3, #0
2400793a:	d1ee      	bne.n	2400791a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
2400793c:	687b      	ldr	r3, [r7, #4]
2400793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24007940:	2b00      	cmp	r3, #0
24007942:	f000 8101 	beq.w	24007b48 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
24007946:	4b5e      	ldr	r3, [pc, #376]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007948:	691b      	ldr	r3, [r3, #16]
2400794a:	f003 0338 	and.w	r3, r3, #56	; 0x38
2400794e:	2b18      	cmp	r3, #24
24007950:	f000 80bc 	beq.w	24007acc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
24007954:	687b      	ldr	r3, [r7, #4]
24007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24007958:	2b02      	cmp	r3, #2
2400795a:	f040 8095 	bne.w	24007a88 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
2400795e:	4b58      	ldr	r3, [pc, #352]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007960:	681b      	ldr	r3, [r3, #0]
24007962:	4a57      	ldr	r2, [pc, #348]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24007968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
2400796a:	f7fa fc27 	bl	240021bc <HAL_GetTick>
2400796e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007970:	e008      	b.n	24007984 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
24007972:	f7fa fc23 	bl	240021bc <HAL_GetTick>
24007976:	4602      	mov	r2, r0
24007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
2400797a:	1ad3      	subs	r3, r2, r3
2400797c:	2b02      	cmp	r3, #2
2400797e:	d901      	bls.n	24007984 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
24007980:	2303      	movs	r3, #3
24007982:	e0e2      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007984:	4b4e      	ldr	r3, [pc, #312]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007986:	681b      	ldr	r3, [r3, #0]
24007988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
2400798c:	2b00      	cmp	r3, #0
2400798e:	d1f0      	bne.n	24007972 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
24007990:	4b4b      	ldr	r3, [pc, #300]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007992:	6a9a      	ldr	r2, [r3, #40]	; 0x28
24007994:	4b4b      	ldr	r3, [pc, #300]	; (24007ac4 <HAL_RCC_OscConfig+0x78c>)
24007996:	4013      	ands	r3, r2
24007998:	687a      	ldr	r2, [r7, #4]
2400799a:	6a91      	ldr	r1, [r2, #40]	; 0x28
2400799c:	687a      	ldr	r2, [r7, #4]
2400799e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
240079a0:	0112      	lsls	r2, r2, #4
240079a2:	430a      	orrs	r2, r1
240079a4:	4946      	ldr	r1, [pc, #280]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240079a6:	4313      	orrs	r3, r2
240079a8:	628b      	str	r3, [r1, #40]	; 0x28
240079aa:	687b      	ldr	r3, [r7, #4]
240079ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240079ae:	3b01      	subs	r3, #1
240079b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
240079b4:	687b      	ldr	r3, [r7, #4]
240079b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240079b8:	3b01      	subs	r3, #1
240079ba:	025b      	lsls	r3, r3, #9
240079bc:	b29b      	uxth	r3, r3
240079be:	431a      	orrs	r2, r3
240079c0:	687b      	ldr	r3, [r7, #4]
240079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240079c4:	3b01      	subs	r3, #1
240079c6:	041b      	lsls	r3, r3, #16
240079c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
240079cc:	431a      	orrs	r2, r3
240079ce:	687b      	ldr	r3, [r7, #4]
240079d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
240079d2:	3b01      	subs	r3, #1
240079d4:	061b      	lsls	r3, r3, #24
240079d6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
240079da:	4939      	ldr	r1, [pc, #228]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240079dc:	4313      	orrs	r3, r2
240079de:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
240079e0:	4b37      	ldr	r3, [pc, #220]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240079e4:	4a36      	ldr	r2, [pc, #216]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240079e6:	f023 0301 	bic.w	r3, r3, #1
240079ea:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
240079ec:	4b34      	ldr	r3, [pc, #208]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240079ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
240079f0:	4b35      	ldr	r3, [pc, #212]	; (24007ac8 <HAL_RCC_OscConfig+0x790>)
240079f2:	4013      	ands	r3, r2
240079f4:	687a      	ldr	r2, [r7, #4]
240079f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
240079f8:	00d2      	lsls	r2, r2, #3
240079fa:	4931      	ldr	r1, [pc, #196]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
240079fc:	4313      	orrs	r3, r2
240079fe:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
24007a00:	4b2f      	ldr	r3, [pc, #188]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24007a04:	f023 020c 	bic.w	r2, r3, #12
24007a08:	687b      	ldr	r3, [r7, #4]
24007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24007a0c:	492c      	ldr	r1, [pc, #176]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a0e:	4313      	orrs	r3, r2
24007a10:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
24007a12:	4b2b      	ldr	r3, [pc, #172]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24007a16:	f023 0202 	bic.w	r2, r3, #2
24007a1a:	687b      	ldr	r3, [r7, #4]
24007a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24007a1e:	4928      	ldr	r1, [pc, #160]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a20:	4313      	orrs	r3, r2
24007a22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
24007a24:	4b26      	ldr	r3, [pc, #152]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24007a28:	4a25      	ldr	r2, [pc, #148]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24007a2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24007a30:	4b23      	ldr	r3, [pc, #140]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24007a34:	4a22      	ldr	r2, [pc, #136]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24007a3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
24007a3c:	4b20      	ldr	r3, [pc, #128]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24007a40:	4a1f      	ldr	r2, [pc, #124]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
24007a46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
24007a48:	4b1d      	ldr	r3, [pc, #116]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24007a4c:	4a1c      	ldr	r2, [pc, #112]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a4e:	f043 0301 	orr.w	r3, r3, #1
24007a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
24007a54:	4b1a      	ldr	r3, [pc, #104]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a56:	681b      	ldr	r3, [r3, #0]
24007a58:	4a19      	ldr	r2, [pc, #100]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
24007a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24007a60:	f7fa fbac 	bl	240021bc <HAL_GetTick>
24007a64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007a66:	e008      	b.n	24007a7a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
24007a68:	f7fa fba8 	bl	240021bc <HAL_GetTick>
24007a6c:	4602      	mov	r2, r0
24007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24007a70:	1ad3      	subs	r3, r2, r3
24007a72:	2b02      	cmp	r3, #2
24007a74:	d901      	bls.n	24007a7a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
24007a76:	2303      	movs	r3, #3
24007a78:	e067      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007a7a:	4b11      	ldr	r3, [pc, #68]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a7c:	681b      	ldr	r3, [r3, #0]
24007a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24007a82:	2b00      	cmp	r3, #0
24007a84:	d0f0      	beq.n	24007a68 <HAL_RCC_OscConfig+0x730>
24007a86:	e05f      	b.n	24007b48 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
24007a88:	4b0d      	ldr	r3, [pc, #52]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a8a:	681b      	ldr	r3, [r3, #0]
24007a8c:	4a0c      	ldr	r2, [pc, #48]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
24007a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24007a94:	f7fa fb92 	bl	240021bc <HAL_GetTick>
24007a98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007a9a:	e008      	b.n	24007aae <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
24007a9c:	f7fa fb8e 	bl	240021bc <HAL_GetTick>
24007aa0:	4602      	mov	r2, r0
24007aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
24007aa4:	1ad3      	subs	r3, r2, r3
24007aa6:	2b02      	cmp	r3, #2
24007aa8:	d901      	bls.n	24007aae <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
24007aaa:	2303      	movs	r3, #3
24007aac:	e04d      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
24007aae:	4b04      	ldr	r3, [pc, #16]	; (24007ac0 <HAL_RCC_OscConfig+0x788>)
24007ab0:	681b      	ldr	r3, [r3, #0]
24007ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24007ab6:	2b00      	cmp	r3, #0
24007ab8:	d1f0      	bne.n	24007a9c <HAL_RCC_OscConfig+0x764>
24007aba:	e045      	b.n	24007b48 <HAL_RCC_OscConfig+0x810>
24007abc:	58024800 	.word	0x58024800
24007ac0:	58024400 	.word	0x58024400
24007ac4:	fffffc0c 	.word	0xfffffc0c
24007ac8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
24007acc:	4b21      	ldr	r3, [pc, #132]	; (24007b54 <HAL_RCC_OscConfig+0x81c>)
24007ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24007ad0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
24007ad2:	4b20      	ldr	r3, [pc, #128]	; (24007b54 <HAL_RCC_OscConfig+0x81c>)
24007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007ad6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24007ad8:	687b      	ldr	r3, [r7, #4]
24007ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
24007adc:	2b01      	cmp	r3, #1
24007ade:	d031      	beq.n	24007b44 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24007ae0:	693b      	ldr	r3, [r7, #16]
24007ae2:	f003 0203 	and.w	r2, r3, #3
24007ae6:	687b      	ldr	r3, [r7, #4]
24007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
24007aea:	429a      	cmp	r2, r3
24007aec:	d12a      	bne.n	24007b44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24007aee:	693b      	ldr	r3, [r7, #16]
24007af0:	091b      	lsrs	r3, r3, #4
24007af2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24007af6:	687b      	ldr	r3, [r7, #4]
24007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
24007afa:	429a      	cmp	r2, r3
24007afc:	d122      	bne.n	24007b44 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24007afe:	68fb      	ldr	r3, [r7, #12]
24007b00:	f3c3 0208 	ubfx	r2, r3, #0, #9
24007b04:	687b      	ldr	r3, [r7, #4]
24007b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24007b08:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
24007b0a:	429a      	cmp	r2, r3
24007b0c:	d11a      	bne.n	24007b44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24007b0e:	68fb      	ldr	r3, [r7, #12]
24007b10:	0a5b      	lsrs	r3, r3, #9
24007b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24007b16:	687b      	ldr	r3, [r7, #4]
24007b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
24007b1a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
24007b1c:	429a      	cmp	r2, r3
24007b1e:	d111      	bne.n	24007b44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24007b20:	68fb      	ldr	r3, [r7, #12]
24007b22:	0c1b      	lsrs	r3, r3, #16
24007b24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24007b28:	687b      	ldr	r3, [r7, #4]
24007b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24007b2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
24007b2e:	429a      	cmp	r2, r3
24007b30:	d108      	bne.n	24007b44 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
24007b32:	68fb      	ldr	r3, [r7, #12]
24007b34:	0e1b      	lsrs	r3, r3, #24
24007b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24007b3a:	687b      	ldr	r3, [r7, #4]
24007b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24007b3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
24007b40:	429a      	cmp	r2, r3
24007b42:	d001      	beq.n	24007b48 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
24007b44:	2301      	movs	r3, #1
24007b46:	e000      	b.n	24007b4a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
24007b48:	2300      	movs	r3, #0
}
24007b4a:	4618      	mov	r0, r3
24007b4c:	3730      	adds	r7, #48	; 0x30
24007b4e:	46bd      	mov	sp, r7
24007b50:	bd80      	pop	{r7, pc}
24007b52:	bf00      	nop
24007b54:	58024400 	.word	0x58024400

24007b58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
24007b58:	b580      	push	{r7, lr}
24007b5a:	b086      	sub	sp, #24
24007b5c:	af00      	add	r7, sp, #0
24007b5e:	6078      	str	r0, [r7, #4]
24007b60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
24007b62:	687b      	ldr	r3, [r7, #4]
24007b64:	2b00      	cmp	r3, #0
24007b66:	d101      	bne.n	24007b6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
24007b68:	2301      	movs	r3, #1
24007b6a:	e19c      	b.n	24007ea6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
24007b6c:	4b8a      	ldr	r3, [pc, #552]	; (24007d98 <HAL_RCC_ClockConfig+0x240>)
24007b6e:	681b      	ldr	r3, [r3, #0]
24007b70:	f003 030f 	and.w	r3, r3, #15
24007b74:	683a      	ldr	r2, [r7, #0]
24007b76:	429a      	cmp	r2, r3
24007b78:	d910      	bls.n	24007b9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
24007b7a:	4b87      	ldr	r3, [pc, #540]	; (24007d98 <HAL_RCC_ClockConfig+0x240>)
24007b7c:	681b      	ldr	r3, [r3, #0]
24007b7e:	f023 020f 	bic.w	r2, r3, #15
24007b82:	4985      	ldr	r1, [pc, #532]	; (24007d98 <HAL_RCC_ClockConfig+0x240>)
24007b84:	683b      	ldr	r3, [r7, #0]
24007b86:	4313      	orrs	r3, r2
24007b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
24007b8a:	4b83      	ldr	r3, [pc, #524]	; (24007d98 <HAL_RCC_ClockConfig+0x240>)
24007b8c:	681b      	ldr	r3, [r3, #0]
24007b8e:	f003 030f 	and.w	r3, r3, #15
24007b92:	683a      	ldr	r2, [r7, #0]
24007b94:	429a      	cmp	r2, r3
24007b96:	d001      	beq.n	24007b9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
24007b98:	2301      	movs	r3, #1
24007b9a:	e184      	b.n	24007ea6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007b9c:	687b      	ldr	r3, [r7, #4]
24007b9e:	681b      	ldr	r3, [r3, #0]
24007ba0:	f003 0304 	and.w	r3, r3, #4
24007ba4:	2b00      	cmp	r3, #0
24007ba6:	d010      	beq.n	24007bca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24007ba8:	687b      	ldr	r3, [r7, #4]
24007baa:	691a      	ldr	r2, [r3, #16]
24007bac:	4b7b      	ldr	r3, [pc, #492]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007bae:	699b      	ldr	r3, [r3, #24]
24007bb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007bb4:	429a      	cmp	r2, r3
24007bb6:	d908      	bls.n	24007bca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007bb8:	4b78      	ldr	r3, [pc, #480]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007bba:	699b      	ldr	r3, [r3, #24]
24007bbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24007bc0:	687b      	ldr	r3, [r7, #4]
24007bc2:	691b      	ldr	r3, [r3, #16]
24007bc4:	4975      	ldr	r1, [pc, #468]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007bc6:	4313      	orrs	r3, r2
24007bc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007bca:	687b      	ldr	r3, [r7, #4]
24007bcc:	681b      	ldr	r3, [r3, #0]
24007bce:	f003 0308 	and.w	r3, r3, #8
24007bd2:	2b00      	cmp	r3, #0
24007bd4:	d010      	beq.n	24007bf8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24007bd6:	687b      	ldr	r3, [r7, #4]
24007bd8:	695a      	ldr	r2, [r3, #20]
24007bda:	4b70      	ldr	r3, [pc, #448]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007bdc:	69db      	ldr	r3, [r3, #28]
24007bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007be2:	429a      	cmp	r2, r3
24007be4:	d908      	bls.n	24007bf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24007be6:	4b6d      	ldr	r3, [pc, #436]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007be8:	69db      	ldr	r3, [r3, #28]
24007bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24007bee:	687b      	ldr	r3, [r7, #4]
24007bf0:	695b      	ldr	r3, [r3, #20]
24007bf2:	496a      	ldr	r1, [pc, #424]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007bf4:	4313      	orrs	r3, r2
24007bf6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007bf8:	687b      	ldr	r3, [r7, #4]
24007bfa:	681b      	ldr	r3, [r3, #0]
24007bfc:	f003 0310 	and.w	r3, r3, #16
24007c00:	2b00      	cmp	r3, #0
24007c02:	d010      	beq.n	24007c26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007c04:	687b      	ldr	r3, [r7, #4]
24007c06:	699a      	ldr	r2, [r3, #24]
24007c08:	4b64      	ldr	r3, [pc, #400]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c0a:	69db      	ldr	r3, [r3, #28]
24007c0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
24007c10:	429a      	cmp	r2, r3
24007c12:	d908      	bls.n	24007c26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007c14:	4b61      	ldr	r3, [pc, #388]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c16:	69db      	ldr	r3, [r3, #28]
24007c18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
24007c1c:	687b      	ldr	r3, [r7, #4]
24007c1e:	699b      	ldr	r3, [r3, #24]
24007c20:	495e      	ldr	r1, [pc, #376]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c22:	4313      	orrs	r3, r2
24007c24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007c26:	687b      	ldr	r3, [r7, #4]
24007c28:	681b      	ldr	r3, [r3, #0]
24007c2a:	f003 0320 	and.w	r3, r3, #32
24007c2e:	2b00      	cmp	r3, #0
24007c30:	d010      	beq.n	24007c54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007c32:	687b      	ldr	r3, [r7, #4]
24007c34:	69da      	ldr	r2, [r3, #28]
24007c36:	4b59      	ldr	r3, [pc, #356]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c38:	6a1b      	ldr	r3, [r3, #32]
24007c3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007c3e:	429a      	cmp	r2, r3
24007c40:	d908      	bls.n	24007c54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
24007c42:	4b56      	ldr	r3, [pc, #344]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c44:	6a1b      	ldr	r3, [r3, #32]
24007c46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24007c4a:	687b      	ldr	r3, [r7, #4]
24007c4c:	69db      	ldr	r3, [r3, #28]
24007c4e:	4953      	ldr	r1, [pc, #332]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c50:	4313      	orrs	r3, r2
24007c52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007c54:	687b      	ldr	r3, [r7, #4]
24007c56:	681b      	ldr	r3, [r3, #0]
24007c58:	f003 0302 	and.w	r3, r3, #2
24007c5c:	2b00      	cmp	r3, #0
24007c5e:	d010      	beq.n	24007c82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007c60:	687b      	ldr	r3, [r7, #4]
24007c62:	68da      	ldr	r2, [r3, #12]
24007c64:	4b4d      	ldr	r3, [pc, #308]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c66:	699b      	ldr	r3, [r3, #24]
24007c68:	f003 030f 	and.w	r3, r3, #15
24007c6c:	429a      	cmp	r2, r3
24007c6e:	d908      	bls.n	24007c82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007c70:	4b4a      	ldr	r3, [pc, #296]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c72:	699b      	ldr	r3, [r3, #24]
24007c74:	f023 020f 	bic.w	r2, r3, #15
24007c78:	687b      	ldr	r3, [r7, #4]
24007c7a:	68db      	ldr	r3, [r3, #12]
24007c7c:	4947      	ldr	r1, [pc, #284]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c7e:	4313      	orrs	r3, r2
24007c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
24007c82:	687b      	ldr	r3, [r7, #4]
24007c84:	681b      	ldr	r3, [r3, #0]
24007c86:	f003 0301 	and.w	r3, r3, #1
24007c8a:	2b00      	cmp	r3, #0
24007c8c:	d055      	beq.n	24007d3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
24007c8e:	4b43      	ldr	r3, [pc, #268]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c90:	699b      	ldr	r3, [r3, #24]
24007c92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
24007c96:	687b      	ldr	r3, [r7, #4]
24007c98:	689b      	ldr	r3, [r3, #8]
24007c9a:	4940      	ldr	r1, [pc, #256]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007c9c:	4313      	orrs	r3, r2
24007c9e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
24007ca0:	687b      	ldr	r3, [r7, #4]
24007ca2:	685b      	ldr	r3, [r3, #4]
24007ca4:	2b02      	cmp	r3, #2
24007ca6:	d107      	bne.n	24007cb8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
24007ca8:	4b3c      	ldr	r3, [pc, #240]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007caa:	681b      	ldr	r3, [r3, #0]
24007cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
24007cb0:	2b00      	cmp	r3, #0
24007cb2:	d121      	bne.n	24007cf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24007cb4:	2301      	movs	r3, #1
24007cb6:	e0f6      	b.n	24007ea6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
24007cb8:	687b      	ldr	r3, [r7, #4]
24007cba:	685b      	ldr	r3, [r3, #4]
24007cbc:	2b03      	cmp	r3, #3
24007cbe:	d107      	bne.n	24007cd0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
24007cc0:	4b36      	ldr	r3, [pc, #216]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007cc2:	681b      	ldr	r3, [r3, #0]
24007cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
24007cc8:	2b00      	cmp	r3, #0
24007cca:	d115      	bne.n	24007cf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24007ccc:	2301      	movs	r3, #1
24007cce:	e0ea      	b.n	24007ea6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
24007cd0:	687b      	ldr	r3, [r7, #4]
24007cd2:	685b      	ldr	r3, [r3, #4]
24007cd4:	2b01      	cmp	r3, #1
24007cd6:	d107      	bne.n	24007ce8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
24007cd8:	4b30      	ldr	r3, [pc, #192]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007cda:	681b      	ldr	r3, [r3, #0]
24007cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
24007ce0:	2b00      	cmp	r3, #0
24007ce2:	d109      	bne.n	24007cf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24007ce4:	2301      	movs	r3, #1
24007ce6:	e0de      	b.n	24007ea6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
24007ce8:	4b2c      	ldr	r3, [pc, #176]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007cea:	681b      	ldr	r3, [r3, #0]
24007cec:	f003 0304 	and.w	r3, r3, #4
24007cf0:	2b00      	cmp	r3, #0
24007cf2:	d101      	bne.n	24007cf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
24007cf4:	2301      	movs	r3, #1
24007cf6:	e0d6      	b.n	24007ea6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
24007cf8:	4b28      	ldr	r3, [pc, #160]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007cfa:	691b      	ldr	r3, [r3, #16]
24007cfc:	f023 0207 	bic.w	r2, r3, #7
24007d00:	687b      	ldr	r3, [r7, #4]
24007d02:	685b      	ldr	r3, [r3, #4]
24007d04:	4925      	ldr	r1, [pc, #148]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007d06:	4313      	orrs	r3, r2
24007d08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
24007d0a:	f7fa fa57 	bl	240021bc <HAL_GetTick>
24007d0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24007d10:	e00a      	b.n	24007d28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
24007d12:	f7fa fa53 	bl	240021bc <HAL_GetTick>
24007d16:	4602      	mov	r2, r0
24007d18:	697b      	ldr	r3, [r7, #20]
24007d1a:	1ad3      	subs	r3, r2, r3
24007d1c:	f241 3288 	movw	r2, #5000	; 0x1388
24007d20:	4293      	cmp	r3, r2
24007d22:	d901      	bls.n	24007d28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
24007d24:	2303      	movs	r3, #3
24007d26:	e0be      	b.n	24007ea6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
24007d28:	4b1c      	ldr	r3, [pc, #112]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007d2a:	691b      	ldr	r3, [r3, #16]
24007d2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
24007d30:	687b      	ldr	r3, [r7, #4]
24007d32:	685b      	ldr	r3, [r3, #4]
24007d34:	00db      	lsls	r3, r3, #3
24007d36:	429a      	cmp	r2, r3
24007d38:	d1eb      	bne.n	24007d12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
24007d3a:	687b      	ldr	r3, [r7, #4]
24007d3c:	681b      	ldr	r3, [r3, #0]
24007d3e:	f003 0302 	and.w	r3, r3, #2
24007d42:	2b00      	cmp	r3, #0
24007d44:	d010      	beq.n	24007d68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
24007d46:	687b      	ldr	r3, [r7, #4]
24007d48:	68da      	ldr	r2, [r3, #12]
24007d4a:	4b14      	ldr	r3, [pc, #80]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007d4c:	699b      	ldr	r3, [r3, #24]
24007d4e:	f003 030f 	and.w	r3, r3, #15
24007d52:	429a      	cmp	r2, r3
24007d54:	d208      	bcs.n	24007d68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
24007d56:	4b11      	ldr	r3, [pc, #68]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007d58:	699b      	ldr	r3, [r3, #24]
24007d5a:	f023 020f 	bic.w	r2, r3, #15
24007d5e:	687b      	ldr	r3, [r7, #4]
24007d60:	68db      	ldr	r3, [r3, #12]
24007d62:	490e      	ldr	r1, [pc, #56]	; (24007d9c <HAL_RCC_ClockConfig+0x244>)
24007d64:	4313      	orrs	r3, r2
24007d66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
24007d68:	4b0b      	ldr	r3, [pc, #44]	; (24007d98 <HAL_RCC_ClockConfig+0x240>)
24007d6a:	681b      	ldr	r3, [r3, #0]
24007d6c:	f003 030f 	and.w	r3, r3, #15
24007d70:	683a      	ldr	r2, [r7, #0]
24007d72:	429a      	cmp	r2, r3
24007d74:	d214      	bcs.n	24007da0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
24007d76:	4b08      	ldr	r3, [pc, #32]	; (24007d98 <HAL_RCC_ClockConfig+0x240>)
24007d78:	681b      	ldr	r3, [r3, #0]
24007d7a:	f023 020f 	bic.w	r2, r3, #15
24007d7e:	4906      	ldr	r1, [pc, #24]	; (24007d98 <HAL_RCC_ClockConfig+0x240>)
24007d80:	683b      	ldr	r3, [r7, #0]
24007d82:	4313      	orrs	r3, r2
24007d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
24007d86:	4b04      	ldr	r3, [pc, #16]	; (24007d98 <HAL_RCC_ClockConfig+0x240>)
24007d88:	681b      	ldr	r3, [r3, #0]
24007d8a:	f003 030f 	and.w	r3, r3, #15
24007d8e:	683a      	ldr	r2, [r7, #0]
24007d90:	429a      	cmp	r2, r3
24007d92:	d005      	beq.n	24007da0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
24007d94:	2301      	movs	r3, #1
24007d96:	e086      	b.n	24007ea6 <HAL_RCC_ClockConfig+0x34e>
24007d98:	52002000 	.word	0x52002000
24007d9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
24007da0:	687b      	ldr	r3, [r7, #4]
24007da2:	681b      	ldr	r3, [r3, #0]
24007da4:	f003 0304 	and.w	r3, r3, #4
24007da8:	2b00      	cmp	r3, #0
24007daa:	d010      	beq.n	24007dce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
24007dac:	687b      	ldr	r3, [r7, #4]
24007dae:	691a      	ldr	r2, [r3, #16]
24007db0:	4b3f      	ldr	r3, [pc, #252]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007db2:	699b      	ldr	r3, [r3, #24]
24007db4:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007db8:	429a      	cmp	r2, r3
24007dba:	d208      	bcs.n	24007dce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
24007dbc:	4b3c      	ldr	r3, [pc, #240]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007dbe:	699b      	ldr	r3, [r3, #24]
24007dc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24007dc4:	687b      	ldr	r3, [r7, #4]
24007dc6:	691b      	ldr	r3, [r3, #16]
24007dc8:	4939      	ldr	r1, [pc, #228]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007dca:	4313      	orrs	r3, r2
24007dcc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
24007dce:	687b      	ldr	r3, [r7, #4]
24007dd0:	681b      	ldr	r3, [r3, #0]
24007dd2:	f003 0308 	and.w	r3, r3, #8
24007dd6:	2b00      	cmp	r3, #0
24007dd8:	d010      	beq.n	24007dfc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
24007dda:	687b      	ldr	r3, [r7, #4]
24007ddc:	695a      	ldr	r2, [r3, #20]
24007dde:	4b34      	ldr	r3, [pc, #208]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007de0:	69db      	ldr	r3, [r3, #28]
24007de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007de6:	429a      	cmp	r2, r3
24007de8:	d208      	bcs.n	24007dfc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
24007dea:	4b31      	ldr	r3, [pc, #196]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007dec:	69db      	ldr	r3, [r3, #28]
24007dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24007df2:	687b      	ldr	r3, [r7, #4]
24007df4:	695b      	ldr	r3, [r3, #20]
24007df6:	492e      	ldr	r1, [pc, #184]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007df8:	4313      	orrs	r3, r2
24007dfa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
24007dfc:	687b      	ldr	r3, [r7, #4]
24007dfe:	681b      	ldr	r3, [r3, #0]
24007e00:	f003 0310 	and.w	r3, r3, #16
24007e04:	2b00      	cmp	r3, #0
24007e06:	d010      	beq.n	24007e2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
24007e08:	687b      	ldr	r3, [r7, #4]
24007e0a:	699a      	ldr	r2, [r3, #24]
24007e0c:	4b28      	ldr	r3, [pc, #160]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007e0e:	69db      	ldr	r3, [r3, #28]
24007e10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
24007e14:	429a      	cmp	r2, r3
24007e16:	d208      	bcs.n	24007e2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
24007e18:	4b25      	ldr	r3, [pc, #148]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007e1a:	69db      	ldr	r3, [r3, #28]
24007e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
24007e20:	687b      	ldr	r3, [r7, #4]
24007e22:	699b      	ldr	r3, [r3, #24]
24007e24:	4922      	ldr	r1, [pc, #136]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007e26:	4313      	orrs	r3, r2
24007e28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
24007e2a:	687b      	ldr	r3, [r7, #4]
24007e2c:	681b      	ldr	r3, [r3, #0]
24007e2e:	f003 0320 	and.w	r3, r3, #32
24007e32:	2b00      	cmp	r3, #0
24007e34:	d010      	beq.n	24007e58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
24007e36:	687b      	ldr	r3, [r7, #4]
24007e38:	69da      	ldr	r2, [r3, #28]
24007e3a:	4b1d      	ldr	r3, [pc, #116]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007e3c:	6a1b      	ldr	r3, [r3, #32]
24007e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
24007e42:	429a      	cmp	r2, r3
24007e44:	d208      	bcs.n	24007e58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
24007e46:	4b1a      	ldr	r3, [pc, #104]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007e48:	6a1b      	ldr	r3, [r3, #32]
24007e4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
24007e4e:	687b      	ldr	r3, [r7, #4]
24007e50:	69db      	ldr	r3, [r3, #28]
24007e52:	4917      	ldr	r1, [pc, #92]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007e54:	4313      	orrs	r3, r2
24007e56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
24007e58:	f000 f8be 	bl	24007fd8 <HAL_RCC_GetSysClockFreq>
24007e5c:	4601      	mov	r1, r0
24007e5e:	4b14      	ldr	r3, [pc, #80]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007e60:	699b      	ldr	r3, [r3, #24]
24007e62:	0a1b      	lsrs	r3, r3, #8
24007e64:	f003 030f 	and.w	r3, r3, #15
24007e68:	4a12      	ldr	r2, [pc, #72]	; (24007eb4 <HAL_RCC_ClockConfig+0x35c>)
24007e6a:	5cd3      	ldrb	r3, [r2, r3]
24007e6c:	f003 031f 	and.w	r3, r3, #31
24007e70:	fa21 f303 	lsr.w	r3, r1, r3
24007e74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
24007e76:	4b0e      	ldr	r3, [pc, #56]	; (24007eb0 <HAL_RCC_ClockConfig+0x358>)
24007e78:	699b      	ldr	r3, [r3, #24]
24007e7a:	f003 030f 	and.w	r3, r3, #15
24007e7e:	4a0d      	ldr	r2, [pc, #52]	; (24007eb4 <HAL_RCC_ClockConfig+0x35c>)
24007e80:	5cd3      	ldrb	r3, [r2, r3]
24007e82:	f003 031f 	and.w	r3, r3, #31
24007e86:	693a      	ldr	r2, [r7, #16]
24007e88:	fa22 f303 	lsr.w	r3, r2, r3
24007e8c:	4a0a      	ldr	r2, [pc, #40]	; (24007eb8 <HAL_RCC_ClockConfig+0x360>)
24007e8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
24007e90:	4a0a      	ldr	r2, [pc, #40]	; (24007ebc <HAL_RCC_ClockConfig+0x364>)
24007e92:	693b      	ldr	r3, [r7, #16]
24007e94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
24007e96:	4b0a      	ldr	r3, [pc, #40]	; (24007ec0 <HAL_RCC_ClockConfig+0x368>)
24007e98:	681b      	ldr	r3, [r3, #0]
24007e9a:	4618      	mov	r0, r3
24007e9c:	f7fa f944 	bl	24002128 <HAL_InitTick>
24007ea0:	4603      	mov	r3, r0
24007ea2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
24007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
24007ea6:	4618      	mov	r0, r3
24007ea8:	3718      	adds	r7, #24
24007eaa:	46bd      	mov	sp, r7
24007eac:	bd80      	pop	{r7, pc}
24007eae:	bf00      	nop
24007eb0:	58024400 	.word	0x58024400
24007eb4:	2400ace0 	.word	0x2400ace0
24007eb8:	240004a8 	.word	0x240004a8
24007ebc:	240004a4 	.word	0x240004a4
24007ec0:	240004ac 	.word	0x240004ac

24007ec4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
24007ec4:	b580      	push	{r7, lr}
24007ec6:	b08c      	sub	sp, #48	; 0x30
24007ec8:	af00      	add	r7, sp, #0
24007eca:	60f8      	str	r0, [r7, #12]
24007ecc:	60b9      	str	r1, [r7, #8]
24007ece:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
24007ed0:	68fb      	ldr	r3, [r7, #12]
24007ed2:	2b00      	cmp	r3, #0
24007ed4:	d12a      	bne.n	24007f2c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
24007ed6:	4b2d      	ldr	r3, [pc, #180]	; (24007f8c <HAL_RCC_MCOConfig+0xc8>)
24007ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24007edc:	4a2b      	ldr	r2, [pc, #172]	; (24007f8c <HAL_RCC_MCOConfig+0xc8>)
24007ede:	f043 0301 	orr.w	r3, r3, #1
24007ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24007ee6:	4b29      	ldr	r3, [pc, #164]	; (24007f8c <HAL_RCC_MCOConfig+0xc8>)
24007ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24007eec:	f003 0301 	and.w	r3, r3, #1
24007ef0:	61bb      	str	r3, [r7, #24]
24007ef2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
24007ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
24007ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24007efa:	2302      	movs	r3, #2
24007efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24007efe:	2303      	movs	r3, #3
24007f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24007f02:	2300      	movs	r3, #0
24007f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
24007f06:	2300      	movs	r3, #0
24007f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
24007f0a:	f107 031c 	add.w	r3, r7, #28
24007f0e:	4619      	mov	r1, r3
24007f10:	481f      	ldr	r0, [pc, #124]	; (24007f90 <HAL_RCC_MCOConfig+0xcc>)
24007f12:	f7fb f8f1 	bl	240030f8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
24007f16:	4b1d      	ldr	r3, [pc, #116]	; (24007f8c <HAL_RCC_MCOConfig+0xc8>)
24007f18:	691b      	ldr	r3, [r3, #16]
24007f1a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
24007f1e:	68b9      	ldr	r1, [r7, #8]
24007f20:	687b      	ldr	r3, [r7, #4]
24007f22:	430b      	orrs	r3, r1
24007f24:	4919      	ldr	r1, [pc, #100]	; (24007f8c <HAL_RCC_MCOConfig+0xc8>)
24007f26:	4313      	orrs	r3, r2
24007f28:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
24007f2a:	e02a      	b.n	24007f82 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
24007f2c:	4b17      	ldr	r3, [pc, #92]	; (24007f8c <HAL_RCC_MCOConfig+0xc8>)
24007f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24007f32:	4a16      	ldr	r2, [pc, #88]	; (24007f8c <HAL_RCC_MCOConfig+0xc8>)
24007f34:	f043 0304 	orr.w	r3, r3, #4
24007f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
24007f3c:	4b13      	ldr	r3, [pc, #76]	; (24007f8c <HAL_RCC_MCOConfig+0xc8>)
24007f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
24007f42:	f003 0304 	and.w	r3, r3, #4
24007f46:	617b      	str	r3, [r7, #20]
24007f48:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
24007f4a:	f44f 7300 	mov.w	r3, #512	; 0x200
24007f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
24007f50:	2302      	movs	r3, #2
24007f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
24007f54:	2303      	movs	r3, #3
24007f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
24007f58:	2300      	movs	r3, #0
24007f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
24007f5c:	2300      	movs	r3, #0
24007f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
24007f60:	f107 031c 	add.w	r3, r7, #28
24007f64:	4619      	mov	r1, r3
24007f66:	480b      	ldr	r0, [pc, #44]	; (24007f94 <HAL_RCC_MCOConfig+0xd0>)
24007f68:	f7fb f8c6 	bl	240030f8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
24007f6c:	4b07      	ldr	r3, [pc, #28]	; (24007f8c <HAL_RCC_MCOConfig+0xc8>)
24007f6e:	691b      	ldr	r3, [r3, #16]
24007f70:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
24007f74:	687b      	ldr	r3, [r7, #4]
24007f76:	01d9      	lsls	r1, r3, #7
24007f78:	68bb      	ldr	r3, [r7, #8]
24007f7a:	430b      	orrs	r3, r1
24007f7c:	4903      	ldr	r1, [pc, #12]	; (24007f8c <HAL_RCC_MCOConfig+0xc8>)
24007f7e:	4313      	orrs	r3, r2
24007f80:	610b      	str	r3, [r1, #16]
}
24007f82:	bf00      	nop
24007f84:	3730      	adds	r7, #48	; 0x30
24007f86:	46bd      	mov	sp, r7
24007f88:	bd80      	pop	{r7, pc}
24007f8a:	bf00      	nop
24007f8c:	58024400 	.word	0x58024400
24007f90:	58020000 	.word	0x58020000
24007f94:	58020800 	.word	0x58020800

24007f98 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
24007f98:	b480      	push	{r7}
24007f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
24007f9c:	4b05      	ldr	r3, [pc, #20]	; (24007fb4 <HAL_RCC_EnableCSS+0x1c>)
24007f9e:	681b      	ldr	r3, [r3, #0]
24007fa0:	4a04      	ldr	r2, [pc, #16]	; (24007fb4 <HAL_RCC_EnableCSS+0x1c>)
24007fa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
24007fa6:	6013      	str	r3, [r2, #0]
}
24007fa8:	bf00      	nop
24007faa:	46bd      	mov	sp, r7
24007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
24007fb0:	4770      	bx	lr
24007fb2:	bf00      	nop
24007fb4:	58024400 	.word	0x58024400

24007fb8 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
24007fb8:	b480      	push	{r7}
24007fba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_CSSHSEON);
24007fbc:	4b05      	ldr	r3, [pc, #20]	; (24007fd4 <HAL_RCC_DisableCSS+0x1c>)
24007fbe:	681b      	ldr	r3, [r3, #0]
24007fc0:	4a04      	ldr	r2, [pc, #16]	; (24007fd4 <HAL_RCC_DisableCSS+0x1c>)
24007fc2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
24007fc6:	6013      	str	r3, [r2, #0]
}
24007fc8:	bf00      	nop
24007fca:	46bd      	mov	sp, r7
24007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
24007fd0:	4770      	bx	lr
24007fd2:	bf00      	nop
24007fd4:	58024400 	.word	0x58024400

24007fd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
24007fd8:	b480      	push	{r7}
24007fda:	b089      	sub	sp, #36	; 0x24
24007fdc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
24007fde:	4baf      	ldr	r3, [pc, #700]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
24007fe0:	691b      	ldr	r3, [r3, #16]
24007fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
24007fe6:	2b18      	cmp	r3, #24
24007fe8:	f200 814e 	bhi.w	24008288 <HAL_RCC_GetSysClockFreq+0x2b0>
24007fec:	a201      	add	r2, pc, #4	; (adr r2, 24007ff4 <HAL_RCC_GetSysClockFreq+0x1c>)
24007fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24007ff2:	bf00      	nop
24007ff4:	24008059 	.word	0x24008059
24007ff8:	24008289 	.word	0x24008289
24007ffc:	24008289 	.word	0x24008289
24008000:	24008289 	.word	0x24008289
24008004:	24008289 	.word	0x24008289
24008008:	24008289 	.word	0x24008289
2400800c:	24008289 	.word	0x24008289
24008010:	24008289 	.word	0x24008289
24008014:	2400807f 	.word	0x2400807f
24008018:	24008289 	.word	0x24008289
2400801c:	24008289 	.word	0x24008289
24008020:	24008289 	.word	0x24008289
24008024:	24008289 	.word	0x24008289
24008028:	24008289 	.word	0x24008289
2400802c:	24008289 	.word	0x24008289
24008030:	24008289 	.word	0x24008289
24008034:	24008085 	.word	0x24008085
24008038:	24008289 	.word	0x24008289
2400803c:	24008289 	.word	0x24008289
24008040:	24008289 	.word	0x24008289
24008044:	24008289 	.word	0x24008289
24008048:	24008289 	.word	0x24008289
2400804c:	24008289 	.word	0x24008289
24008050:	24008289 	.word	0x24008289
24008054:	2400808b 	.word	0x2400808b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24008058:	4b90      	ldr	r3, [pc, #576]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
2400805a:	681b      	ldr	r3, [r3, #0]
2400805c:	f003 0320 	and.w	r3, r3, #32
24008060:	2b00      	cmp	r3, #0
24008062:	d009      	beq.n	24008078 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24008064:	4b8d      	ldr	r3, [pc, #564]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
24008066:	681b      	ldr	r3, [r3, #0]
24008068:	08db      	lsrs	r3, r3, #3
2400806a:	f003 0303 	and.w	r3, r3, #3
2400806e:	4a8c      	ldr	r2, [pc, #560]	; (240082a0 <HAL_RCC_GetSysClockFreq+0x2c8>)
24008070:	fa22 f303 	lsr.w	r3, r2, r3
24008074:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
24008076:	e10a      	b.n	2400828e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
24008078:	4b89      	ldr	r3, [pc, #548]	; (240082a0 <HAL_RCC_GetSysClockFreq+0x2c8>)
2400807a:	61bb      	str	r3, [r7, #24]
    break;
2400807c:	e107      	b.n	2400828e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
2400807e:	4b89      	ldr	r3, [pc, #548]	; (240082a4 <HAL_RCC_GetSysClockFreq+0x2cc>)
24008080:	61bb      	str	r3, [r7, #24]
    break;
24008082:	e104      	b.n	2400828e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
24008084:	4b88      	ldr	r3, [pc, #544]	; (240082a8 <HAL_RCC_GetSysClockFreq+0x2d0>)
24008086:	61bb      	str	r3, [r7, #24]
    break;
24008088:	e101      	b.n	2400828e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400808a:	4b84      	ldr	r3, [pc, #528]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
2400808c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400808e:	f003 0303 	and.w	r3, r3, #3
24008092:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
24008094:	4b81      	ldr	r3, [pc, #516]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
24008096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24008098:	091b      	lsrs	r3, r3, #4
2400809a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400809e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
240080a0:	4b7e      	ldr	r3, [pc, #504]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
240080a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240080a4:	f003 0301 	and.w	r3, r3, #1
240080a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
240080aa:	4b7c      	ldr	r3, [pc, #496]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
240080ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
240080ae:	08db      	lsrs	r3, r3, #3
240080b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
240080b4:	68fa      	ldr	r2, [r7, #12]
240080b6:	fb02 f303 	mul.w	r3, r2, r3
240080ba:	ee07 3a90 	vmov	s15, r3
240080be:	eef8 7a67 	vcvt.f32.u32	s15, s15
240080c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
240080c6:	693b      	ldr	r3, [r7, #16]
240080c8:	2b00      	cmp	r3, #0
240080ca:	f000 80da 	beq.w	24008282 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
240080ce:	697b      	ldr	r3, [r7, #20]
240080d0:	2b01      	cmp	r3, #1
240080d2:	d05a      	beq.n	2400818a <HAL_RCC_GetSysClockFreq+0x1b2>
240080d4:	2b01      	cmp	r3, #1
240080d6:	d302      	bcc.n	240080de <HAL_RCC_GetSysClockFreq+0x106>
240080d8:	2b02      	cmp	r3, #2
240080da:	d078      	beq.n	240081ce <HAL_RCC_GetSysClockFreq+0x1f6>
240080dc:	e099      	b.n	24008212 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
240080de:	4b6f      	ldr	r3, [pc, #444]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
240080e0:	681b      	ldr	r3, [r3, #0]
240080e2:	f003 0320 	and.w	r3, r3, #32
240080e6:	2b00      	cmp	r3, #0
240080e8:	d02d      	beq.n	24008146 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
240080ea:	4b6c      	ldr	r3, [pc, #432]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
240080ec:	681b      	ldr	r3, [r3, #0]
240080ee:	08db      	lsrs	r3, r3, #3
240080f0:	f003 0303 	and.w	r3, r3, #3
240080f4:	4a6a      	ldr	r2, [pc, #424]	; (240082a0 <HAL_RCC_GetSysClockFreq+0x2c8>)
240080f6:	fa22 f303 	lsr.w	r3, r2, r3
240080fa:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
240080fc:	687b      	ldr	r3, [r7, #4]
240080fe:	ee07 3a90 	vmov	s15, r3
24008102:	eef8 6a67 	vcvt.f32.u32	s13, s15
24008106:	693b      	ldr	r3, [r7, #16]
24008108:	ee07 3a90 	vmov	s15, r3
2400810c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24008110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008114:	4b61      	ldr	r3, [pc, #388]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
24008116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008118:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400811c:	ee07 3a90 	vmov	s15, r3
24008120:	eef8 6a67 	vcvt.f32.u32	s13, s15
24008124:	ed97 6a02 	vldr	s12, [r7, #8]
24008128:	eddf 5a60 	vldr	s11, [pc, #384]	; 240082ac <HAL_RCC_GetSysClockFreq+0x2d4>
2400812c:	eec6 7a25 	vdiv.f32	s15, s12, s11
24008130:	ee76 7aa7 	vadd.f32	s15, s13, s15
24008134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24008138:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400813c:	ee67 7a27 	vmul.f32	s15, s14, s15
24008140:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
24008144:	e087      	b.n	24008256 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24008146:	693b      	ldr	r3, [r7, #16]
24008148:	ee07 3a90 	vmov	s15, r3
2400814c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24008150:	eddf 6a57 	vldr	s13, [pc, #348]	; 240082b0 <HAL_RCC_GetSysClockFreq+0x2d8>
24008154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008158:	4b50      	ldr	r3, [pc, #320]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
2400815a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400815c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24008160:	ee07 3a90 	vmov	s15, r3
24008164:	eef8 6a67 	vcvt.f32.u32	s13, s15
24008168:	ed97 6a02 	vldr	s12, [r7, #8]
2400816c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 240082ac <HAL_RCC_GetSysClockFreq+0x2d4>
24008170:	eec6 7a25 	vdiv.f32	s15, s12, s11
24008174:	ee76 7aa7 	vadd.f32	s15, s13, s15
24008178:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400817c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24008180:	ee67 7a27 	vmul.f32	s15, s14, s15
24008184:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24008188:	e065      	b.n	24008256 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2400818a:	693b      	ldr	r3, [r7, #16]
2400818c:	ee07 3a90 	vmov	s15, r3
24008190:	eef8 7a67 	vcvt.f32.u32	s15, s15
24008194:	eddf 6a47 	vldr	s13, [pc, #284]	; 240082b4 <HAL_RCC_GetSysClockFreq+0x2dc>
24008198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400819c:	4b3f      	ldr	r3, [pc, #252]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
2400819e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240081a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
240081a4:	ee07 3a90 	vmov	s15, r3
240081a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
240081ac:	ed97 6a02 	vldr	s12, [r7, #8]
240081b0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 240082ac <HAL_RCC_GetSysClockFreq+0x2d4>
240081b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
240081b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
240081bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
240081c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
240081c4:	ee67 7a27 	vmul.f32	s15, s14, s15
240081c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
240081cc:	e043      	b.n	24008256 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
240081ce:	693b      	ldr	r3, [r7, #16]
240081d0:	ee07 3a90 	vmov	s15, r3
240081d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
240081d8:	eddf 6a37 	vldr	s13, [pc, #220]	; 240082b8 <HAL_RCC_GetSysClockFreq+0x2e0>
240081dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
240081e0:	4b2e      	ldr	r3, [pc, #184]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
240081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240081e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
240081e8:	ee07 3a90 	vmov	s15, r3
240081ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
240081f0:	ed97 6a02 	vldr	s12, [r7, #8]
240081f4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 240082ac <HAL_RCC_GetSysClockFreq+0x2d4>
240081f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
240081fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
24008200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24008204:	ee77 7aa6 	vadd.f32	s15, s15, s13
24008208:	ee67 7a27 	vmul.f32	s15, s14, s15
2400820c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24008210:	e021      	b.n	24008256 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
24008212:	693b      	ldr	r3, [r7, #16]
24008214:	ee07 3a90 	vmov	s15, r3
24008218:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400821c:	eddf 6a25 	vldr	s13, [pc, #148]	; 240082b4 <HAL_RCC_GetSysClockFreq+0x2dc>
24008220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24008224:	4b1d      	ldr	r3, [pc, #116]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
24008226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008228:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400822c:	ee07 3a90 	vmov	s15, r3
24008230:	eef8 6a67 	vcvt.f32.u32	s13, s15
24008234:	ed97 6a02 	vldr	s12, [r7, #8]
24008238:	eddf 5a1c 	vldr	s11, [pc, #112]	; 240082ac <HAL_RCC_GetSysClockFreq+0x2d4>
2400823c:	eec6 7a25 	vdiv.f32	s15, s12, s11
24008240:	ee76 7aa7 	vadd.f32	s15, s13, s15
24008244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24008248:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400824c:	ee67 7a27 	vmul.f32	s15, s14, s15
24008250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
24008254:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
24008256:	4b11      	ldr	r3, [pc, #68]	; (2400829c <HAL_RCC_GetSysClockFreq+0x2c4>)
24008258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400825a:	0a5b      	lsrs	r3, r3, #9
2400825c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24008260:	3301      	adds	r3, #1
24008262:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
24008264:	683b      	ldr	r3, [r7, #0]
24008266:	ee07 3a90 	vmov	s15, r3
2400826a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
2400826e:	edd7 6a07 	vldr	s13, [r7, #28]
24008272:	eec6 7a87 	vdiv.f32	s15, s13, s14
24008276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400827a:	ee17 3a90 	vmov	r3, s15
2400827e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
24008280:	e005      	b.n	2400828e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
24008282:	2300      	movs	r3, #0
24008284:	61bb      	str	r3, [r7, #24]
    break;
24008286:	e002      	b.n	2400828e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
24008288:	4b06      	ldr	r3, [pc, #24]	; (240082a4 <HAL_RCC_GetSysClockFreq+0x2cc>)
2400828a:	61bb      	str	r3, [r7, #24]
    break;
2400828c:	bf00      	nop
  }

  return sysclockfreq;
2400828e:	69bb      	ldr	r3, [r7, #24]
}
24008290:	4618      	mov	r0, r3
24008292:	3724      	adds	r7, #36	; 0x24
24008294:	46bd      	mov	sp, r7
24008296:	f85d 7b04 	ldr.w	r7, [sp], #4
2400829a:	4770      	bx	lr
2400829c:	58024400 	.word	0x58024400
240082a0:	03d09000 	.word	0x03d09000
240082a4:	003d0900 	.word	0x003d0900
240082a8:	017d7840 	.word	0x017d7840
240082ac:	46000000 	.word	0x46000000
240082b0:	4c742400 	.word	0x4c742400
240082b4:	4a742400 	.word	0x4a742400
240082b8:	4bbebc20 	.word	0x4bbebc20

240082bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
240082bc:	b580      	push	{r7, lr}
240082be:	b082      	sub	sp, #8
240082c0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
240082c2:	f7ff fe89 	bl	24007fd8 <HAL_RCC_GetSysClockFreq>
240082c6:	4601      	mov	r1, r0
240082c8:	4b10      	ldr	r3, [pc, #64]	; (2400830c <HAL_RCC_GetHCLKFreq+0x50>)
240082ca:	699b      	ldr	r3, [r3, #24]
240082cc:	0a1b      	lsrs	r3, r3, #8
240082ce:	f003 030f 	and.w	r3, r3, #15
240082d2:	4a0f      	ldr	r2, [pc, #60]	; (24008310 <HAL_RCC_GetHCLKFreq+0x54>)
240082d4:	5cd3      	ldrb	r3, [r2, r3]
240082d6:	f003 031f 	and.w	r3, r3, #31
240082da:	fa21 f303 	lsr.w	r3, r1, r3
240082de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
240082e0:	4b0a      	ldr	r3, [pc, #40]	; (2400830c <HAL_RCC_GetHCLKFreq+0x50>)
240082e2:	699b      	ldr	r3, [r3, #24]
240082e4:	f003 030f 	and.w	r3, r3, #15
240082e8:	4a09      	ldr	r2, [pc, #36]	; (24008310 <HAL_RCC_GetHCLKFreq+0x54>)
240082ea:	5cd3      	ldrb	r3, [r2, r3]
240082ec:	f003 031f 	and.w	r3, r3, #31
240082f0:	687a      	ldr	r2, [r7, #4]
240082f2:	fa22 f303 	lsr.w	r3, r2, r3
240082f6:	4a07      	ldr	r2, [pc, #28]	; (24008314 <HAL_RCC_GetHCLKFreq+0x58>)
240082f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
240082fa:	4a07      	ldr	r2, [pc, #28]	; (24008318 <HAL_RCC_GetHCLKFreq+0x5c>)
240082fc:	687b      	ldr	r3, [r7, #4]
240082fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
24008300:	4b04      	ldr	r3, [pc, #16]	; (24008314 <HAL_RCC_GetHCLKFreq+0x58>)
24008302:	681b      	ldr	r3, [r3, #0]
}
24008304:	4618      	mov	r0, r3
24008306:	3708      	adds	r7, #8
24008308:	46bd      	mov	sp, r7
2400830a:	bd80      	pop	{r7, pc}
2400830c:	58024400 	.word	0x58024400
24008310:	2400ace0 	.word	0x2400ace0
24008314:	240004a8 	.word	0x240004a8
24008318:	240004a4 	.word	0x240004a4

2400831c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
2400831c:	b580      	push	{r7, lr}
2400831e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
24008320:	f7ff ffcc 	bl	240082bc <HAL_RCC_GetHCLKFreq>
24008324:	4601      	mov	r1, r0
24008326:	4b06      	ldr	r3, [pc, #24]	; (24008340 <HAL_RCC_GetPCLK1Freq+0x24>)
24008328:	69db      	ldr	r3, [r3, #28]
2400832a:	091b      	lsrs	r3, r3, #4
2400832c:	f003 0307 	and.w	r3, r3, #7
24008330:	4a04      	ldr	r2, [pc, #16]	; (24008344 <HAL_RCC_GetPCLK1Freq+0x28>)
24008332:	5cd3      	ldrb	r3, [r2, r3]
24008334:	f003 031f 	and.w	r3, r3, #31
24008338:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
2400833c:	4618      	mov	r0, r3
2400833e:	bd80      	pop	{r7, pc}
24008340:	58024400 	.word	0x58024400
24008344:	2400ace0 	.word	0x2400ace0

24008348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
24008348:	b580      	push	{r7, lr}
2400834a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
2400834c:	f7ff ffb6 	bl	240082bc <HAL_RCC_GetHCLKFreq>
24008350:	4601      	mov	r1, r0
24008352:	4b06      	ldr	r3, [pc, #24]	; (2400836c <HAL_RCC_GetPCLK2Freq+0x24>)
24008354:	69db      	ldr	r3, [r3, #28]
24008356:	0a1b      	lsrs	r3, r3, #8
24008358:	f003 0307 	and.w	r3, r3, #7
2400835c:	4a04      	ldr	r2, [pc, #16]	; (24008370 <HAL_RCC_GetPCLK2Freq+0x28>)
2400835e:	5cd3      	ldrb	r3, [r2, r3]
24008360:	f003 031f 	and.w	r3, r3, #31
24008364:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
24008368:	4618      	mov	r0, r3
2400836a:	bd80      	pop	{r7, pc}
2400836c:	58024400 	.word	0x58024400
24008370:	2400ace0 	.word	0x2400ace0

24008374 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct: pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
24008374:	b580      	push	{r7, lr}
24008376:	b082      	sub	sp, #8
24008378:	af00      	add	r7, sp, #0
2400837a:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_CSI | \
2400837c:	687b      	ldr	r3, [r7, #4]
2400837e:	223f      	movs	r2, #63	; 0x3f
24008380:	601a      	str	r2, [r3, #0]
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
  }
#else
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
24008382:	4b72      	ldr	r3, [pc, #456]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
24008384:	681b      	ldr	r3, [r3, #0]
24008386:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
2400838a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
2400838e:	d104      	bne.n	2400839a <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
24008390:	687b      	ldr	r3, [r7, #4]
24008392:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
24008396:	605a      	str	r2, [r3, #4]
24008398:	e00e      	b.n	240083b8 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
2400839a:	4b6c      	ldr	r3, [pc, #432]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
2400839c:	681b      	ldr	r3, [r3, #0]
2400839e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
240083a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
240083a6:	d104      	bne.n	240083b2 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
240083a8:	687b      	ldr	r3, [r7, #4]
240083aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
240083ae:	605a      	str	r2, [r3, #4]
240083b0:	e002      	b.n	240083b8 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
240083b2:	687b      	ldr	r3, [r7, #4]
240083b4:	2200      	movs	r2, #0
240083b6:	605a      	str	r2, [r3, #4]
  }
#endif /* RCC_CR_HSEEXT */

   /* Get the CSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_CSION) == RCC_CR_CSION)
240083b8:	4b64      	ldr	r3, [pc, #400]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
240083ba:	681b      	ldr	r3, [r3, #0]
240083bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
240083c0:	2b80      	cmp	r3, #128	; 0x80
240083c2:	d103      	bne.n	240083cc <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_ON;
240083c4:	687b      	ldr	r3, [r7, #4]
240083c6:	2280      	movs	r2, #128	; 0x80
240083c8:	61da      	str	r2, [r3, #28]
240083ca:	e002      	b.n	240083d2 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->CSIState = RCC_CSI_OFF;
240083cc:	687b      	ldr	r3, [r7, #4]
240083ce:	2200      	movs	r2, #0
240083d0:	61da      	str	r2, [r3, #28]
  }

#if defined(RCC_VER_X)
  if(HAL_GetREVID() <= REV_ID_Y)
240083d2:	f7f9 ff8b 	bl	240022ec <HAL_GetREVID>
240083d6:	4602      	mov	r2, r0
240083d8:	f241 0303 	movw	r3, #4099	; 0x1003
240083dc:	429a      	cmp	r2, r3
240083de:	d807      	bhi.n	240083f0 <HAL_RCC_GetOscConfig+0x7c>
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_CSITRIM_Msk) >> HAL_RCC_REV_Y_CSITRIM_Pos);
240083e0:	4b5a      	ldr	r3, [pc, #360]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
240083e2:	685b      	ldr	r3, [r3, #4]
240083e4:	0e9b      	lsrs	r3, r3, #26
240083e6:	f003 021f 	and.w	r2, r3, #31
240083ea:	687b      	ldr	r3, [r7, #4]
240083ec:	621a      	str	r2, [r3, #32]
240083ee:	e006      	b.n	240083fe <HAL_RCC_GetOscConfig+0x8a>
  }
  else
  {
    RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
240083f0:	4b56      	ldr	r3, [pc, #344]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
240083f2:	68db      	ldr	r3, [r3, #12]
240083f4:	0e1b      	lsrs	r3, r3, #24
240083f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240083fa:	687b      	ldr	r3, [r7, #4]
240083fc:	621a      	str	r2, [r3, #32]
#else
 RCC_OscInitStruct->CSICalibrationValue = (uint32_t)(READ_BIT(RCC->CSICFGR, RCC_CSICFGR_CSITRIM) >> RCC_CSICFGR_CSITRIM_Pos);
#endif /*RCC_VER_X*/

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
240083fe:	4b53      	ldr	r3, [pc, #332]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
24008400:	681b      	ldr	r3, [r3, #0]
24008402:	f003 0301 	and.w	r3, r3, #1
24008406:	2b01      	cmp	r3, #1
24008408:	d103      	bne.n	24008412 <HAL_RCC_GetOscConfig+0x9e>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
2400840a:	687b      	ldr	r3, [r7, #4]
2400840c:	2201      	movs	r2, #1
2400840e:	60da      	str	r2, [r3, #12]
24008410:	e002      	b.n	24008418 <HAL_RCC_GetOscConfig+0xa4>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
24008412:	687b      	ldr	r3, [r7, #4]
24008414:	2200      	movs	r2, #0
24008416:	60da      	str	r2, [r3, #12]
  }

#if defined(RCC_VER_X)
  if(HAL_GetREVID() <= REV_ID_Y)
24008418:	f7f9 ff68 	bl	240022ec <HAL_GetREVID>
2400841c:	4602      	mov	r2, r0
2400841e:	f241 0303 	movw	r3, #4099	; 0x1003
24008422:	429a      	cmp	r2, r3
24008424:	d807      	bhi.n	24008436 <HAL_RCC_GetOscConfig+0xc2>
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, HAL_RCC_REV_Y_HSITRIM_Msk) >> HAL_RCC_REV_Y_HSITRIM_Pos);
24008426:	4b49      	ldr	r3, [pc, #292]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
24008428:	685b      	ldr	r3, [r3, #4]
2400842a:	0b1b      	lsrs	r3, r3, #12
2400842c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24008430:	687b      	ldr	r3, [r7, #4]
24008432:	611a      	str	r2, [r3, #16]
24008434:	e006      	b.n	24008444 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->HSICalibrationValue = (uint32_t)(READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM) >> RCC_HSICFGR_HSITRIM_Pos);
24008436:	4b45      	ldr	r3, [pc, #276]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
24008438:	685b      	ldr	r3, [r3, #4]
2400843a:	0e1b      	lsrs	r3, r3, #24
2400843c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
24008440:	687b      	ldr	r3, [r7, #4]
24008442:	611a      	str	r2, [r3, #16]
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
  }
#else
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
24008444:	4b41      	ldr	r3, [pc, #260]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
24008446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24008448:	f003 0304 	and.w	r3, r3, #4
2400844c:	2b04      	cmp	r3, #4
2400844e:	d103      	bne.n	24008458 <HAL_RCC_GetOscConfig+0xe4>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
24008450:	687b      	ldr	r3, [r7, #4]
24008452:	2205      	movs	r2, #5
24008454:	609a      	str	r2, [r3, #8]
24008456:	e00c      	b.n	24008472 <HAL_RCC_GetOscConfig+0xfe>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
24008458:	4b3c      	ldr	r3, [pc, #240]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
2400845a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400845c:	f003 0301 	and.w	r3, r3, #1
24008460:	2b01      	cmp	r3, #1
24008462:	d103      	bne.n	2400846c <HAL_RCC_GetOscConfig+0xf8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
24008464:	687b      	ldr	r3, [r7, #4]
24008466:	2201      	movs	r2, #1
24008468:	609a      	str	r2, [r3, #8]
2400846a:	e002      	b.n	24008472 <HAL_RCC_GetOscConfig+0xfe>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
2400846c:	687b      	ldr	r3, [r7, #4]
2400846e:	2200      	movs	r2, #0
24008470:	609a      	str	r2, [r3, #8]
  }
#endif /* RCC_BDCR_LSEEXT */

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
24008472:	4b36      	ldr	r3, [pc, #216]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
24008474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24008476:	f003 0301 	and.w	r3, r3, #1
2400847a:	2b01      	cmp	r3, #1
2400847c:	d103      	bne.n	24008486 <HAL_RCC_GetOscConfig+0x112>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
2400847e:	687b      	ldr	r3, [r7, #4]
24008480:	2201      	movs	r2, #1
24008482:	615a      	str	r2, [r3, #20]
24008484:	e002      	b.n	2400848c <HAL_RCC_GetOscConfig+0x118>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
24008486:	687b      	ldr	r3, [r7, #4]
24008488:	2200      	movs	r2, #0
2400848a:	615a      	str	r2, [r3, #20]
  }

  /* Get the HSI48 configuration ---------------------------------------------*/
  if((RCC->CR & RCC_CR_HSI48ON) == RCC_CR_HSI48ON)
2400848c:	4b2f      	ldr	r3, [pc, #188]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
2400848e:	681b      	ldr	r3, [r3, #0]
24008490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24008494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24008498:	d103      	bne.n	240084a2 <HAL_RCC_GetOscConfig+0x12e>
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_ON;
2400849a:	687b      	ldr	r3, [r7, #4]
2400849c:	2201      	movs	r2, #1
2400849e:	619a      	str	r2, [r3, #24]
240084a0:	e002      	b.n	240084a8 <HAL_RCC_GetOscConfig+0x134>
  }
  else
  {
    RCC_OscInitStruct->HSI48State = RCC_HSI48_OFF;
240084a2:	687b      	ldr	r3, [r7, #4]
240084a4:	2200      	movs	r2, #0
240084a6:	619a      	str	r2, [r3, #24]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
240084a8:	4b28      	ldr	r3, [pc, #160]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
240084aa:	681b      	ldr	r3, [r3, #0]
240084ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
240084b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240084b4:	d103      	bne.n	240084be <HAL_RCC_GetOscConfig+0x14a>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
240084b6:	687b      	ldr	r3, [r7, #4]
240084b8:	2202      	movs	r2, #2
240084ba:	625a      	str	r2, [r3, #36]	; 0x24
240084bc:	e002      	b.n	240084c4 <HAL_RCC_GetOscConfig+0x150>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
240084be:	687b      	ldr	r3, [r7, #4]
240084c0:	2201      	movs	r2, #1
240084c2:	625a      	str	r2, [r3, #36]	; 0x24
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
240084c4:	4b21      	ldr	r3, [pc, #132]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
240084c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240084c8:	f003 0203 	and.w	r2, r3, #3
240084cc:	687b      	ldr	r3, [r7, #4]
240084ce:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> RCC_PLLCKSELR_DIVM1_Pos);
240084d0:	4b1e      	ldr	r3, [pc, #120]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
240084d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240084d4:	091b      	lsrs	r3, r3, #4
240084d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240084da:	687b      	ldr	r3, [r7, #4]
240084dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_N1) >> RCC_PLL1DIVR_N1_Pos)+ 1U;
240084de:	4b1b      	ldr	r3, [pc, #108]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
240084e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240084e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
240084e6:	1c5a      	adds	r2, r3, #1
240084e8:	687b      	ldr	r3, [r7, #4]
240084ea:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLR = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos)+ 1U;
240084ec:	4b17      	ldr	r3, [pc, #92]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
240084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
240084f0:	0e1b      	lsrs	r3, r3, #24
240084f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240084f6:	1c5a      	adds	r2, r3, #1
240084f8:	687b      	ldr	r3, [r7, #4]
240084fa:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos)+ 1U;
240084fc:	4b13      	ldr	r3, [pc, #76]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
240084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008500:	0a5b      	lsrs	r3, r3, #9
24008502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24008506:	1c5a      	adds	r2, r3, #1
24008508:	687b      	ldr	r3, [r7, #4]
2400850a:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos)+ 1U;
2400850c:	4b0f      	ldr	r3, [pc, #60]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
2400850e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
24008510:	0c1b      	lsrs	r3, r3, #16
24008512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24008516:	1c5a      	adds	r2, r3, #1
24008518:	687b      	ldr	r3, [r7, #4]
2400851a:	639a      	str	r2, [r3, #56]	; 0x38
  RCC_OscInitStruct->PLL.PLLRGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1RGE));
2400851c:	4b0b      	ldr	r3, [pc, #44]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
2400851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24008520:	f003 020c 	and.w	r2, r3, #12
24008524:	687b      	ldr	r3, [r7, #4]
24008526:	641a      	str	r2, [r3, #64]	; 0x40
  RCC_OscInitStruct->PLL.PLLVCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL1VCOSEL) >> RCC_PLLCFGR_PLL1VCOSEL_Pos);
24008528:	4b08      	ldr	r3, [pc, #32]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
2400852a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400852c:	085b      	lsrs	r3, r3, #1
2400852e:	f003 0201 	and.w	r2, r3, #1
24008532:	687b      	ldr	r3, [r7, #4]
24008534:	645a      	str	r2, [r3, #68]	; 0x44
  RCC_OscInitStruct->PLL.PLLFRACN = (uint32_t)(((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos));
24008536:	4b05      	ldr	r3, [pc, #20]	; (2400854c <HAL_RCC_GetOscConfig+0x1d8>)
24008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400853a:	08db      	lsrs	r3, r3, #3
2400853c:	f3c3 020c 	ubfx	r2, r3, #0, #13
24008540:	687b      	ldr	r3, [r7, #4]
24008542:	649a      	str	r2, [r3, #72]	; 0x48
}
24008544:	bf00      	nop
24008546:	3708      	adds	r7, #8
24008548:	46bd      	mov	sp, r7
2400854a:	bd80      	pop	{r7, pc}
2400854c:	58024400 	.word	0x58024400

24008550 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
24008550:	b480      	push	{r7}
24008552:	b083      	sub	sp, #12
24008554:	af00      	add	r7, sp, #0
24008556:	6078      	str	r0, [r7, #4]
24008558:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
2400855a:	687b      	ldr	r3, [r7, #4]
2400855c:	223f      	movs	r2, #63	; 0x3f
2400855e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
24008560:	4b1a      	ldr	r3, [pc, #104]	; (240085cc <HAL_RCC_GetClockConfig+0x7c>)
24008562:	691b      	ldr	r3, [r3, #16]
24008564:	f003 0207 	and.w	r2, r3, #7
24008568:	687b      	ldr	r3, [r7, #4]
2400856a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
2400856c:	4b17      	ldr	r3, [pc, #92]	; (240085cc <HAL_RCC_GetClockConfig+0x7c>)
2400856e:	699b      	ldr	r3, [r3, #24]
24008570:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
24008574:	687b      	ldr	r3, [r7, #4]
24008576:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
24008578:	4b14      	ldr	r3, [pc, #80]	; (240085cc <HAL_RCC_GetClockConfig+0x7c>)
2400857a:	699b      	ldr	r3, [r3, #24]
2400857c:	f003 020f 	and.w	r2, r3, #15
24008580:	687b      	ldr	r3, [r7, #4]
24008582:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
24008584:	4b11      	ldr	r3, [pc, #68]	; (240085cc <HAL_RCC_GetClockConfig+0x7c>)
24008586:	699b      	ldr	r3, [r3, #24]
24008588:	f003 0270 	and.w	r2, r3, #112	; 0x70
2400858c:	687b      	ldr	r3, [r7, #4]
2400858e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
24008590:	4b0e      	ldr	r3, [pc, #56]	; (240085cc <HAL_RCC_GetClockConfig+0x7c>)
24008592:	69db      	ldr	r3, [r3, #28]
24008594:	f003 0270 	and.w	r2, r3, #112	; 0x70
24008598:	687b      	ldr	r3, [r7, #4]
2400859a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
2400859c:	4b0b      	ldr	r3, [pc, #44]	; (240085cc <HAL_RCC_GetClockConfig+0x7c>)
2400859e:	69db      	ldr	r3, [r3, #28]
240085a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
240085a4:	687b      	ldr	r3, [r7, #4]
240085a6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
240085a8:	4b08      	ldr	r3, [pc, #32]	; (240085cc <HAL_RCC_GetClockConfig+0x7c>)
240085aa:	6a1b      	ldr	r3, [r3, #32]
240085ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
240085b0:	687b      	ldr	r3, [r7, #4]
240085b2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
240085b4:	4b06      	ldr	r3, [pc, #24]	; (240085d0 <HAL_RCC_GetClockConfig+0x80>)
240085b6:	681b      	ldr	r3, [r3, #0]
240085b8:	f003 020f 	and.w	r2, r3, #15
240085bc:	683b      	ldr	r3, [r7, #0]
240085be:	601a      	str	r2, [r3, #0]
}
240085c0:	bf00      	nop
240085c2:	370c      	adds	r7, #12
240085c4:	46bd      	mov	sp, r7
240085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
240085ca:	4770      	bx	lr
240085cc:	58024400 	.word	0x58024400
240085d0:	52002000 	.word	0x52002000

240085d4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
240085d4:	b580      	push	{r7, lr}
240085d6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
240085d8:	4b07      	ldr	r3, [pc, #28]	; (240085f8 <HAL_RCC_NMI_IRQHandler+0x24>)
240085da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
240085dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
240085e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
240085e4:	d105      	bne.n	240085f2 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
240085e6:	f000 f809 	bl	240085fc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
240085ea:	4b03      	ldr	r3, [pc, #12]	; (240085f8 <HAL_RCC_NMI_IRQHandler+0x24>)
240085ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
240085f0:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
240085f2:	bf00      	nop
240085f4:	bd80      	pop	{r7, pc}
240085f6:	bf00      	nop
240085f8:	58024400 	.word	0x58024400

240085fc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
240085fc:	b480      	push	{r7}
240085fe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
24008600:	bf00      	nop
24008602:	46bd      	mov	sp, r7
24008604:	f85d 7b04 	ldr.w	r7, [sp], #4
24008608:	4770      	bx	lr
2400860a:	bf00      	nop

2400860c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
2400860c:	b580      	push	{r7, lr}
2400860e:	b086      	sub	sp, #24
24008610:	af00      	add	r7, sp, #0
24008612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
24008614:	2300      	movs	r3, #0
24008616:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
24008618:	2300      	movs	r3, #0
2400861a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
2400861c:	687b      	ldr	r3, [r7, #4]
2400861e:	681b      	ldr	r3, [r3, #0]
24008620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
24008624:	2b00      	cmp	r3, #0
24008626:	d03d      	beq.n	240086a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
24008628:	687b      	ldr	r3, [r7, #4]
2400862a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400862c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24008630:	d013      	beq.n	2400865a <HAL_RCCEx_PeriphCLKConfig+0x4e>
24008632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
24008636:	d802      	bhi.n	2400863e <HAL_RCCEx_PeriphCLKConfig+0x32>
24008638:	2b00      	cmp	r3, #0
2400863a:	d007      	beq.n	2400864c <HAL_RCCEx_PeriphCLKConfig+0x40>
2400863c:	e01f      	b.n	2400867e <HAL_RCCEx_PeriphCLKConfig+0x72>
2400863e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24008642:	d013      	beq.n	2400866c <HAL_RCCEx_PeriphCLKConfig+0x60>
24008644:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
24008648:	d01c      	beq.n	24008684 <HAL_RCCEx_PeriphCLKConfig+0x78>
2400864a:	e018      	b.n	2400867e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400864c:	4baf      	ldr	r3, [pc, #700]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
2400864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24008650:	4aae      	ldr	r2, [pc, #696]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
24008652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
24008658:	e015      	b.n	24008686 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
2400865a:	687b      	ldr	r3, [r7, #4]
2400865c:	3304      	adds	r3, #4
2400865e:	2102      	movs	r1, #2
24008660:	4618      	mov	r0, r3
24008662:	f002 f8f8 	bl	2400a856 <RCCEx_PLL2_Config>
24008666:	4603      	mov	r3, r0
24008668:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
2400866a:	e00c      	b.n	24008686 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
2400866c:	687b      	ldr	r3, [r7, #4]
2400866e:	3324      	adds	r3, #36	; 0x24
24008670:	2102      	movs	r1, #2
24008672:	4618      	mov	r0, r3
24008674:	f002 f9a0 	bl	2400a9b8 <RCCEx_PLL3_Config>
24008678:	4603      	mov	r3, r0
2400867a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
2400867c:	e003      	b.n	24008686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2400867e:	2301      	movs	r3, #1
24008680:	75fb      	strb	r3, [r7, #23]
      break;
24008682:	e000      	b.n	24008686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
24008684:	bf00      	nop
    }

    if(ret == HAL_OK)
24008686:	7dfb      	ldrb	r3, [r7, #23]
24008688:	2b00      	cmp	r3, #0
2400868a:	d109      	bne.n	240086a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
2400868c:	4b9f      	ldr	r3, [pc, #636]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
2400868e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24008690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
24008694:	687b      	ldr	r3, [r7, #4]
24008696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
24008698:	499c      	ldr	r1, [pc, #624]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
2400869a:	4313      	orrs	r3, r2
2400869c:	650b      	str	r3, [r1, #80]	; 0x50
2400869e:	e001      	b.n	240086a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
240086a0:	7dfb      	ldrb	r3, [r7, #23]
240086a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
240086a4:	687b      	ldr	r3, [r7, #4]
240086a6:	681b      	ldr	r3, [r3, #0]
240086a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
240086ac:	2b00      	cmp	r3, #0
240086ae:	d03d      	beq.n	2400872c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
240086b0:	687b      	ldr	r3, [r7, #4]
240086b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240086b4:	2b04      	cmp	r3, #4
240086b6:	d826      	bhi.n	24008706 <HAL_RCCEx_PeriphCLKConfig+0xfa>
240086b8:	a201      	add	r2, pc, #4	; (adr r2, 240086c0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
240086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240086be:	bf00      	nop
240086c0:	240086d5 	.word	0x240086d5
240086c4:	240086e3 	.word	0x240086e3
240086c8:	240086f5 	.word	0x240086f5
240086cc:	2400870d 	.word	0x2400870d
240086d0:	2400870d 	.word	0x2400870d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240086d4:	4b8d      	ldr	r3, [pc, #564]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
240086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240086d8:	4a8c      	ldr	r2, [pc, #560]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
240086da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240086de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
240086e0:	e015      	b.n	2400870e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
240086e2:	687b      	ldr	r3, [r7, #4]
240086e4:	3304      	adds	r3, #4
240086e6:	2100      	movs	r1, #0
240086e8:	4618      	mov	r0, r3
240086ea:	f002 f8b4 	bl	2400a856 <RCCEx_PLL2_Config>
240086ee:	4603      	mov	r3, r0
240086f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
240086f2:	e00c      	b.n	2400870e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
240086f4:	687b      	ldr	r3, [r7, #4]
240086f6:	3324      	adds	r3, #36	; 0x24
240086f8:	2100      	movs	r1, #0
240086fa:	4618      	mov	r0, r3
240086fc:	f002 f95c 	bl	2400a9b8 <RCCEx_PLL3_Config>
24008700:	4603      	mov	r3, r0
24008702:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24008704:	e003      	b.n	2400870e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24008706:	2301      	movs	r3, #1
24008708:	75fb      	strb	r3, [r7, #23]
      break;
2400870a:	e000      	b.n	2400870e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
2400870c:	bf00      	nop
    }

    if(ret == HAL_OK)
2400870e:	7dfb      	ldrb	r3, [r7, #23]
24008710:	2b00      	cmp	r3, #0
24008712:	d109      	bne.n	24008728 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
24008714:	4b7d      	ldr	r3, [pc, #500]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
24008716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24008718:	f023 0207 	bic.w	r2, r3, #7
2400871c:	687b      	ldr	r3, [r7, #4]
2400871e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24008720:	497a      	ldr	r1, [pc, #488]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
24008722:	4313      	orrs	r3, r2
24008724:	650b      	str	r3, [r1, #80]	; 0x50
24008726:	e001      	b.n	2400872c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008728:	7dfb      	ldrb	r3, [r7, #23]
2400872a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
2400872c:	687b      	ldr	r3, [r7, #4]
2400872e:	681b      	ldr	r3, [r3, #0]
24008730:	f403 7300 	and.w	r3, r3, #512	; 0x200
24008734:	2b00      	cmp	r3, #0
24008736:	d03e      	beq.n	240087b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
24008738:	687b      	ldr	r3, [r7, #4]
2400873a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400873c:	2b80      	cmp	r3, #128	; 0x80
2400873e:	d01c      	beq.n	2400877a <HAL_RCCEx_PeriphCLKConfig+0x16e>
24008740:	2b80      	cmp	r3, #128	; 0x80
24008742:	d804      	bhi.n	2400874e <HAL_RCCEx_PeriphCLKConfig+0x142>
24008744:	2b00      	cmp	r3, #0
24008746:	d008      	beq.n	2400875a <HAL_RCCEx_PeriphCLKConfig+0x14e>
24008748:	2b40      	cmp	r3, #64	; 0x40
2400874a:	d00d      	beq.n	24008768 <HAL_RCCEx_PeriphCLKConfig+0x15c>
2400874c:	e01e      	b.n	2400878c <HAL_RCCEx_PeriphCLKConfig+0x180>
2400874e:	2bc0      	cmp	r3, #192	; 0xc0
24008750:	d01f      	beq.n	24008792 <HAL_RCCEx_PeriphCLKConfig+0x186>
24008752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24008756:	d01e      	beq.n	24008796 <HAL_RCCEx_PeriphCLKConfig+0x18a>
24008758:	e018      	b.n	2400878c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
2400875a:	4b6c      	ldr	r3, [pc, #432]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
2400875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400875e:	4a6b      	ldr	r2, [pc, #428]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
24008760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008764:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
24008766:	e017      	b.n	24008798 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24008768:	687b      	ldr	r3, [r7, #4]
2400876a:	3304      	adds	r3, #4
2400876c:	2100      	movs	r1, #0
2400876e:	4618      	mov	r0, r3
24008770:	f002 f871 	bl	2400a856 <RCCEx_PLL2_Config>
24008774:	4603      	mov	r3, r0
24008776:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
24008778:	e00e      	b.n	24008798 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2400877a:	687b      	ldr	r3, [r7, #4]
2400877c:	3324      	adds	r3, #36	; 0x24
2400877e:	2100      	movs	r1, #0
24008780:	4618      	mov	r0, r3
24008782:	f002 f919 	bl	2400a9b8 <RCCEx_PLL3_Config>
24008786:	4603      	mov	r3, r0
24008788:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
2400878a:	e005      	b.n	24008798 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2400878c:	2301      	movs	r3, #1
2400878e:	75fb      	strb	r3, [r7, #23]
      break;
24008790:	e002      	b.n	24008798 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
24008792:	bf00      	nop
24008794:	e000      	b.n	24008798 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
24008796:	bf00      	nop
    }

    if(ret == HAL_OK)
24008798:	7dfb      	ldrb	r3, [r7, #23]
2400879a:	2b00      	cmp	r3, #0
2400879c:	d109      	bne.n	240087b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
2400879e:	4b5b      	ldr	r3, [pc, #364]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
240087a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240087a2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
240087a6:	687b      	ldr	r3, [r7, #4]
240087a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240087aa:	4958      	ldr	r1, [pc, #352]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
240087ac:	4313      	orrs	r3, r2
240087ae:	650b      	str	r3, [r1, #80]	; 0x50
240087b0:	e001      	b.n	240087b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
240087b2:	7dfb      	ldrb	r3, [r7, #23]
240087b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
240087b6:	687b      	ldr	r3, [r7, #4]
240087b8:	681b      	ldr	r3, [r3, #0]
240087ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
240087be:	2b00      	cmp	r3, #0
240087c0:	d044      	beq.n	2400884c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
240087c2:	687b      	ldr	r3, [r7, #4]
240087c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
240087c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240087cc:	d01f      	beq.n	2400880e <HAL_RCCEx_PeriphCLKConfig+0x202>
240087ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
240087d2:	d805      	bhi.n	240087e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
240087d4:	2b00      	cmp	r3, #0
240087d6:	d00a      	beq.n	240087ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
240087d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240087dc:	d00e      	beq.n	240087fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
240087de:	e01f      	b.n	24008820 <HAL_RCCEx_PeriphCLKConfig+0x214>
240087e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
240087e4:	d01f      	beq.n	24008826 <HAL_RCCEx_PeriphCLKConfig+0x21a>
240087e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
240087ea:	d01e      	beq.n	2400882a <HAL_RCCEx_PeriphCLKConfig+0x21e>
240087ec:	e018      	b.n	24008820 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240087ee:	4b47      	ldr	r3, [pc, #284]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
240087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240087f2:	4a46      	ldr	r2, [pc, #280]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
240087f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
240087f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
240087fa:	e017      	b.n	2400882c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
240087fc:	687b      	ldr	r3, [r7, #4]
240087fe:	3304      	adds	r3, #4
24008800:	2100      	movs	r1, #0
24008802:	4618      	mov	r0, r3
24008804:	f002 f827 	bl	2400a856 <RCCEx_PLL2_Config>
24008808:	4603      	mov	r3, r0
2400880a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
2400880c:	e00e      	b.n	2400882c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
2400880e:	687b      	ldr	r3, [r7, #4]
24008810:	3324      	adds	r3, #36	; 0x24
24008812:	2100      	movs	r1, #0
24008814:	4618      	mov	r0, r3
24008816:	f002 f8cf 	bl	2400a9b8 <RCCEx_PLL3_Config>
2400881a:	4603      	mov	r3, r0
2400881c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
2400881e:	e005      	b.n	2400882c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
24008820:	2301      	movs	r3, #1
24008822:	75fb      	strb	r3, [r7, #23]
      break;
24008824:	e002      	b.n	2400882c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
24008826:	bf00      	nop
24008828:	e000      	b.n	2400882c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
2400882a:	bf00      	nop
    }

    if(ret == HAL_OK)
2400882c:	7dfb      	ldrb	r3, [r7, #23]
2400882e:	2b00      	cmp	r3, #0
24008830:	d10a      	bne.n	24008848 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
24008832:	4b36      	ldr	r3, [pc, #216]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
24008834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24008836:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
2400883a:	687b      	ldr	r3, [r7, #4]
2400883c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
24008840:	4932      	ldr	r1, [pc, #200]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
24008842:	4313      	orrs	r3, r2
24008844:	658b      	str	r3, [r1, #88]	; 0x58
24008846:	e001      	b.n	2400884c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008848:	7dfb      	ldrb	r3, [r7, #23]
2400884a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
2400884c:	687b      	ldr	r3, [r7, #4]
2400884e:	681b      	ldr	r3, [r3, #0]
24008850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
24008854:	2b00      	cmp	r3, #0
24008856:	d044      	beq.n	240088e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
24008858:	687b      	ldr	r3, [r7, #4]
2400885a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
2400885e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24008862:	d01f      	beq.n	240088a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
24008864:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
24008868:	d805      	bhi.n	24008876 <HAL_RCCEx_PeriphCLKConfig+0x26a>
2400886a:	2b00      	cmp	r3, #0
2400886c:	d00a      	beq.n	24008884 <HAL_RCCEx_PeriphCLKConfig+0x278>
2400886e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
24008872:	d00e      	beq.n	24008892 <HAL_RCCEx_PeriphCLKConfig+0x286>
24008874:	e01f      	b.n	240088b6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
24008876:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
2400887a:	d01f      	beq.n	240088bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
2400887c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24008880:	d01e      	beq.n	240088c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
24008882:	e018      	b.n	240088b6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008884:	4b21      	ldr	r3, [pc, #132]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
24008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24008888:	4a20      	ldr	r2, [pc, #128]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
2400888a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400888e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
24008890:	e017      	b.n	240088c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24008892:	687b      	ldr	r3, [r7, #4]
24008894:	3304      	adds	r3, #4
24008896:	2100      	movs	r1, #0
24008898:	4618      	mov	r0, r3
2400889a:	f001 ffdc 	bl	2400a856 <RCCEx_PLL2_Config>
2400889e:	4603      	mov	r3, r0
240088a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
240088a2:	e00e      	b.n	240088c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
240088a4:	687b      	ldr	r3, [r7, #4]
240088a6:	3324      	adds	r3, #36	; 0x24
240088a8:	2100      	movs	r1, #0
240088aa:	4618      	mov	r0, r3
240088ac:	f002 f884 	bl	2400a9b8 <RCCEx_PLL3_Config>
240088b0:	4603      	mov	r3, r0
240088b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
240088b4:	e005      	b.n	240088c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
240088b6:	2301      	movs	r3, #1
240088b8:	75fb      	strb	r3, [r7, #23]
      break;
240088ba:	e002      	b.n	240088c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
240088bc:	bf00      	nop
240088be:	e000      	b.n	240088c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
240088c0:	bf00      	nop
    }

    if(ret == HAL_OK)
240088c2:	7dfb      	ldrb	r3, [r7, #23]
240088c4:	2b00      	cmp	r3, #0
240088c6:	d10a      	bne.n	240088de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
240088c8:	4b10      	ldr	r3, [pc, #64]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
240088ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240088cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
240088d0:	687b      	ldr	r3, [r7, #4]
240088d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
240088d6:	490d      	ldr	r1, [pc, #52]	; (2400890c <HAL_RCCEx_PeriphCLKConfig+0x300>)
240088d8:	4313      	orrs	r3, r2
240088da:	658b      	str	r3, [r1, #88]	; 0x58
240088dc:	e001      	b.n	240088e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
240088de:	7dfb      	ldrb	r3, [r7, #23]
240088e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
240088e2:	687b      	ldr	r3, [r7, #4]
240088e4:	681b      	ldr	r3, [r3, #0]
240088e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
240088ea:	2b00      	cmp	r3, #0
240088ec:	d035      	beq.n	2400895a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
240088ee:	687b      	ldr	r3, [r7, #4]
240088f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
240088f2:	2b10      	cmp	r3, #16
240088f4:	d00c      	beq.n	24008910 <HAL_RCCEx_PeriphCLKConfig+0x304>
240088f6:	2b10      	cmp	r3, #16
240088f8:	d802      	bhi.n	24008900 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
240088fa:	2b00      	cmp	r3, #0
240088fc:	d01b      	beq.n	24008936 <HAL_RCCEx_PeriphCLKConfig+0x32a>
240088fe:	e017      	b.n	24008930 <HAL_RCCEx_PeriphCLKConfig+0x324>
24008900:	2b20      	cmp	r3, #32
24008902:	d00c      	beq.n	2400891e <HAL_RCCEx_PeriphCLKConfig+0x312>
24008904:	2b30      	cmp	r3, #48	; 0x30
24008906:	d018      	beq.n	2400893a <HAL_RCCEx_PeriphCLKConfig+0x32e>
24008908:	e012      	b.n	24008930 <HAL_RCCEx_PeriphCLKConfig+0x324>
2400890a:	bf00      	nop
2400890c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008910:	4baf      	ldr	r3, [pc, #700]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24008914:	4aae      	ldr	r2, [pc, #696]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400891a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
2400891c:	e00e      	b.n	2400893c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
2400891e:	687b      	ldr	r3, [r7, #4]
24008920:	3304      	adds	r3, #4
24008922:	2102      	movs	r1, #2
24008924:	4618      	mov	r0, r3
24008926:	f001 ff96 	bl	2400a856 <RCCEx_PLL2_Config>
2400892a:	4603      	mov	r3, r0
2400892c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
2400892e:	e005      	b.n	2400893c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
24008930:	2301      	movs	r3, #1
24008932:	75fb      	strb	r3, [r7, #23]
      break;
24008934:	e002      	b.n	2400893c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
24008936:	bf00      	nop
24008938:	e000      	b.n	2400893c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
2400893a:	bf00      	nop
    }

    if(ret == HAL_OK)
2400893c:	7dfb      	ldrb	r3, [r7, #23]
2400893e:	2b00      	cmp	r3, #0
24008940:	d109      	bne.n	24008956 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
24008942:	4ba3      	ldr	r3, [pc, #652]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24008946:	f023 0230 	bic.w	r2, r3, #48	; 0x30
2400894a:	687b      	ldr	r3, [r7, #4]
2400894c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
2400894e:	49a0      	ldr	r1, [pc, #640]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008950:	4313      	orrs	r3, r2
24008952:	64cb      	str	r3, [r1, #76]	; 0x4c
24008954:	e001      	b.n	2400895a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008956:	7dfb      	ldrb	r3, [r7, #23]
24008958:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
2400895a:	687b      	ldr	r3, [r7, #4]
2400895c:	681b      	ldr	r3, [r3, #0]
2400895e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
24008962:	2b00      	cmp	r3, #0
24008964:	d042      	beq.n	240089ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
24008966:	687b      	ldr	r3, [r7, #4]
24008968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
2400896a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
2400896e:	d01f      	beq.n	240089b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
24008970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24008974:	d805      	bhi.n	24008982 <HAL_RCCEx_PeriphCLKConfig+0x376>
24008976:	2b00      	cmp	r3, #0
24008978:	d00a      	beq.n	24008990 <HAL_RCCEx_PeriphCLKConfig+0x384>
2400897a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
2400897e:	d00e      	beq.n	2400899e <HAL_RCCEx_PeriphCLKConfig+0x392>
24008980:	e01f      	b.n	240089c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
24008982:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
24008986:	d01f      	beq.n	240089c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
24008988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
2400898c:	d01e      	beq.n	240089cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
2400898e:	e018      	b.n	240089c2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008990:	4b8f      	ldr	r3, [pc, #572]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24008994:	4a8e      	ldr	r2, [pc, #568]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400899a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
2400899c:	e017      	b.n	240089ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2400899e:	687b      	ldr	r3, [r7, #4]
240089a0:	3304      	adds	r3, #4
240089a2:	2100      	movs	r1, #0
240089a4:	4618      	mov	r0, r3
240089a6:	f001 ff56 	bl	2400a856 <RCCEx_PLL2_Config>
240089aa:	4603      	mov	r3, r0
240089ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
240089ae:	e00e      	b.n	240089ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
240089b0:	687b      	ldr	r3, [r7, #4]
240089b2:	3324      	adds	r3, #36	; 0x24
240089b4:	2100      	movs	r1, #0
240089b6:	4618      	mov	r0, r3
240089b8:	f001 fffe 	bl	2400a9b8 <RCCEx_PLL3_Config>
240089bc:	4603      	mov	r3, r0
240089be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
240089c0:	e005      	b.n	240089ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240089c2:	2301      	movs	r3, #1
240089c4:	75fb      	strb	r3, [r7, #23]
      break;
240089c6:	e002      	b.n	240089ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
240089c8:	bf00      	nop
240089ca:	e000      	b.n	240089ce <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
240089cc:	bf00      	nop
    }

    if(ret == HAL_OK)
240089ce:	7dfb      	ldrb	r3, [r7, #23]
240089d0:	2b00      	cmp	r3, #0
240089d2:	d109      	bne.n	240089e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
240089d4:	4b7e      	ldr	r3, [pc, #504]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
240089d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240089d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
240089dc:	687b      	ldr	r3, [r7, #4]
240089de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
240089e0:	497b      	ldr	r1, [pc, #492]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
240089e2:	4313      	orrs	r3, r2
240089e4:	650b      	str	r3, [r1, #80]	; 0x50
240089e6:	e001      	b.n	240089ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
240089e8:	7dfb      	ldrb	r3, [r7, #23]
240089ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
240089ec:	687b      	ldr	r3, [r7, #4]
240089ee:	681b      	ldr	r3, [r3, #0]
240089f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
240089f4:	2b00      	cmp	r3, #0
240089f6:	d042      	beq.n	24008a7e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
240089f8:	687b      	ldr	r3, [r7, #4]
240089fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
240089fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24008a00:	d01b      	beq.n	24008a3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
24008a02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24008a06:	d805      	bhi.n	24008a14 <HAL_RCCEx_PeriphCLKConfig+0x408>
24008a08:	2b00      	cmp	r3, #0
24008a0a:	d022      	beq.n	24008a52 <HAL_RCCEx_PeriphCLKConfig+0x446>
24008a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24008a10:	d00a      	beq.n	24008a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
24008a12:	e01b      	b.n	24008a4c <HAL_RCCEx_PeriphCLKConfig+0x440>
24008a14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
24008a18:	d01d      	beq.n	24008a56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
24008a1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
24008a1e:	d01c      	beq.n	24008a5a <HAL_RCCEx_PeriphCLKConfig+0x44e>
24008a20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
24008a24:	d01b      	beq.n	24008a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
24008a26:	e011      	b.n	24008a4c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24008a28:	687b      	ldr	r3, [r7, #4]
24008a2a:	3304      	adds	r3, #4
24008a2c:	2101      	movs	r1, #1
24008a2e:	4618      	mov	r0, r3
24008a30:	f001 ff11 	bl	2400a856 <RCCEx_PLL2_Config>
24008a34:	4603      	mov	r3, r0
24008a36:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
24008a38:	e012      	b.n	24008a60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24008a3a:	687b      	ldr	r3, [r7, #4]
24008a3c:	3324      	adds	r3, #36	; 0x24
24008a3e:	2101      	movs	r1, #1
24008a40:	4618      	mov	r0, r3
24008a42:	f001 ffb9 	bl	2400a9b8 <RCCEx_PLL3_Config>
24008a46:	4603      	mov	r3, r0
24008a48:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
24008a4a:	e009      	b.n	24008a60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24008a4c:	2301      	movs	r3, #1
24008a4e:	75fb      	strb	r3, [r7, #23]
      break;
24008a50:	e006      	b.n	24008a60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
24008a52:	bf00      	nop
24008a54:	e004      	b.n	24008a60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
24008a56:	bf00      	nop
24008a58:	e002      	b.n	24008a60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
24008a5a:	bf00      	nop
24008a5c:	e000      	b.n	24008a60 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
24008a5e:	bf00      	nop
    }

    if(ret == HAL_OK)
24008a60:	7dfb      	ldrb	r3, [r7, #23]
24008a62:	2b00      	cmp	r3, #0
24008a64:	d109      	bne.n	24008a7a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
24008a66:	4b5a      	ldr	r3, [pc, #360]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24008a6a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
24008a6e:	687b      	ldr	r3, [r7, #4]
24008a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
24008a72:	4957      	ldr	r1, [pc, #348]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008a74:	4313      	orrs	r3, r2
24008a76:	650b      	str	r3, [r1, #80]	; 0x50
24008a78:	e001      	b.n	24008a7e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008a7a:	7dfb      	ldrb	r3, [r7, #23]
24008a7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
24008a7e:	687b      	ldr	r3, [r7, #4]
24008a80:	681b      	ldr	r3, [r3, #0]
24008a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
24008a86:	2b00      	cmp	r3, #0
24008a88:	d044      	beq.n	24008b14 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
24008a8a:	687b      	ldr	r3, [r7, #4]
24008a8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
24008a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24008a94:	d01b      	beq.n	24008ace <HAL_RCCEx_PeriphCLKConfig+0x4c2>
24008a96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24008a9a:	d805      	bhi.n	24008aa8 <HAL_RCCEx_PeriphCLKConfig+0x49c>
24008a9c:	2b00      	cmp	r3, #0
24008a9e:	d022      	beq.n	24008ae6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
24008aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008aa4:	d00a      	beq.n	24008abc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
24008aa6:	e01b      	b.n	24008ae0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
24008aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24008aac:	d01d      	beq.n	24008aea <HAL_RCCEx_PeriphCLKConfig+0x4de>
24008aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24008ab2:	d01c      	beq.n	24008aee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
24008ab4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24008ab8:	d01b      	beq.n	24008af2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
24008aba:	e011      	b.n	24008ae0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24008abc:	687b      	ldr	r3, [r7, #4]
24008abe:	3304      	adds	r3, #4
24008ac0:	2101      	movs	r1, #1
24008ac2:	4618      	mov	r0, r3
24008ac4:	f001 fec7 	bl	2400a856 <RCCEx_PLL2_Config>
24008ac8:	4603      	mov	r3, r0
24008aca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
24008acc:	e012      	b.n	24008af4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24008ace:	687b      	ldr	r3, [r7, #4]
24008ad0:	3324      	adds	r3, #36	; 0x24
24008ad2:	2101      	movs	r1, #1
24008ad4:	4618      	mov	r0, r3
24008ad6:	f001 ff6f 	bl	2400a9b8 <RCCEx_PLL3_Config>
24008ada:	4603      	mov	r3, r0
24008adc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
24008ade:	e009      	b.n	24008af4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
24008ae0:	2301      	movs	r3, #1
24008ae2:	75fb      	strb	r3, [r7, #23]
      break;
24008ae4:	e006      	b.n	24008af4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
24008ae6:	bf00      	nop
24008ae8:	e004      	b.n	24008af4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
24008aea:	bf00      	nop
24008aec:	e002      	b.n	24008af4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
24008aee:	bf00      	nop
24008af0:	e000      	b.n	24008af4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
24008af2:	bf00      	nop
    }

    if(ret == HAL_OK)
24008af4:	7dfb      	ldrb	r3, [r7, #23]
24008af6:	2b00      	cmp	r3, #0
24008af8:	d10a      	bne.n	24008b10 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
24008afa:	4b35      	ldr	r3, [pc, #212]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24008afe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
24008b02:	687b      	ldr	r3, [r7, #4]
24008b04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
24008b08:	4931      	ldr	r1, [pc, #196]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008b0a:	4313      	orrs	r3, r2
24008b0c:	658b      	str	r3, [r1, #88]	; 0x58
24008b0e:	e001      	b.n	24008b14 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008b10:	7dfb      	ldrb	r3, [r7, #23]
24008b12:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
24008b14:	687b      	ldr	r3, [r7, #4]
24008b16:	681b      	ldr	r3, [r3, #0]
24008b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24008b1c:	2b00      	cmp	r3, #0
24008b1e:	d02d      	beq.n	24008b7c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
24008b20:	687b      	ldr	r3, [r7, #4]
24008b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24008b24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008b28:	d005      	beq.n	24008b36 <HAL_RCCEx_PeriphCLKConfig+0x52a>
24008b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24008b2e:	d009      	beq.n	24008b44 <HAL_RCCEx_PeriphCLKConfig+0x538>
24008b30:	2b00      	cmp	r3, #0
24008b32:	d013      	beq.n	24008b5c <HAL_RCCEx_PeriphCLKConfig+0x550>
24008b34:	e00f      	b.n	24008b56 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008b36:	4b26      	ldr	r3, [pc, #152]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24008b3a:	4a25      	ldr	r2, [pc, #148]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008b40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
24008b42:	e00c      	b.n	24008b5e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24008b44:	687b      	ldr	r3, [r7, #4]
24008b46:	3304      	adds	r3, #4
24008b48:	2101      	movs	r1, #1
24008b4a:	4618      	mov	r0, r3
24008b4c:	f001 fe83 	bl	2400a856 <RCCEx_PLL2_Config>
24008b50:	4603      	mov	r3, r0
24008b52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
24008b54:	e003      	b.n	24008b5e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24008b56:	2301      	movs	r3, #1
24008b58:	75fb      	strb	r3, [r7, #23]
      break;
24008b5a:	e000      	b.n	24008b5e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
24008b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
24008b5e:	7dfb      	ldrb	r3, [r7, #23]
24008b60:	2b00      	cmp	r3, #0
24008b62:	d109      	bne.n	24008b78 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
24008b64:	4b1a      	ldr	r3, [pc, #104]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24008b68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
24008b6c:	687b      	ldr	r3, [r7, #4]
24008b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
24008b70:	4917      	ldr	r1, [pc, #92]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008b72:	4313      	orrs	r3, r2
24008b74:	650b      	str	r3, [r1, #80]	; 0x50
24008b76:	e001      	b.n	24008b7c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008b78:	7dfb      	ldrb	r3, [r7, #23]
24008b7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
24008b7c:	687b      	ldr	r3, [r7, #4]
24008b7e:	681b      	ldr	r3, [r3, #0]
24008b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
24008b84:	2b00      	cmp	r3, #0
24008b86:	d035      	beq.n	24008bf4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
24008b88:	687b      	ldr	r3, [r7, #4]
24008b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24008b8c:	2b03      	cmp	r3, #3
24008b8e:	d81b      	bhi.n	24008bc8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
24008b90:	a201      	add	r2, pc, #4	; (adr r2, 24008b98 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
24008b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24008b96:	bf00      	nop
24008b98:	24008bd5 	.word	0x24008bd5
24008b9c:	24008ba9 	.word	0x24008ba9
24008ba0:	24008bb7 	.word	0x24008bb7
24008ba4:	24008bd5 	.word	0x24008bd5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24008ba8:	4b09      	ldr	r3, [pc, #36]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24008bac:	4a08      	ldr	r2, [pc, #32]	; (24008bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
24008bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24008bb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
24008bb4:	e00f      	b.n	24008bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
24008bb6:	687b      	ldr	r3, [r7, #4]
24008bb8:	3304      	adds	r3, #4
24008bba:	2102      	movs	r1, #2
24008bbc:	4618      	mov	r0, r3
24008bbe:	f001 fe4a 	bl	2400a856 <RCCEx_PLL2_Config>
24008bc2:	4603      	mov	r3, r0
24008bc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
24008bc6:	e006      	b.n	24008bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
24008bc8:	2301      	movs	r3, #1
24008bca:	75fb      	strb	r3, [r7, #23]
      break;
24008bcc:	e003      	b.n	24008bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
24008bce:	bf00      	nop
24008bd0:	58024400 	.word	0x58024400
      break;
24008bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
24008bd6:	7dfb      	ldrb	r3, [r7, #23]
24008bd8:	2b00      	cmp	r3, #0
24008bda:	d109      	bne.n	24008bf0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
24008bdc:	4bba      	ldr	r3, [pc, #744]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24008be0:	f023 0203 	bic.w	r2, r3, #3
24008be4:	687b      	ldr	r3, [r7, #4]
24008be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24008be8:	49b7      	ldr	r1, [pc, #732]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008bea:	4313      	orrs	r3, r2
24008bec:	64cb      	str	r3, [r1, #76]	; 0x4c
24008bee:	e001      	b.n	24008bf4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008bf0:	7dfb      	ldrb	r3, [r7, #23]
24008bf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
24008bf4:	687b      	ldr	r3, [r7, #4]
24008bf6:	681b      	ldr	r3, [r3, #0]
24008bf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
24008bfc:	2b00      	cmp	r3, #0
24008bfe:	f000 8086 	beq.w	24008d0e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
24008c02:	4bb2      	ldr	r3, [pc, #712]	; (24008ecc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
24008c04:	681b      	ldr	r3, [r3, #0]
24008c06:	4ab1      	ldr	r2, [pc, #708]	; (24008ecc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
24008c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
24008c0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
24008c0e:	f7f9 fad5 	bl	240021bc <HAL_GetTick>
24008c12:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
24008c14:	e009      	b.n	24008c2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
24008c16:	f7f9 fad1 	bl	240021bc <HAL_GetTick>
24008c1a:	4602      	mov	r2, r0
24008c1c:	693b      	ldr	r3, [r7, #16]
24008c1e:	1ad3      	subs	r3, r2, r3
24008c20:	2b64      	cmp	r3, #100	; 0x64
24008c22:	d902      	bls.n	24008c2a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
24008c24:	2303      	movs	r3, #3
24008c26:	75fb      	strb	r3, [r7, #23]
        break;
24008c28:	e005      	b.n	24008c36 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
24008c2a:	4ba8      	ldr	r3, [pc, #672]	; (24008ecc <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
24008c2c:	681b      	ldr	r3, [r3, #0]
24008c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
24008c32:	2b00      	cmp	r3, #0
24008c34:	d0ef      	beq.n	24008c16 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
24008c36:	7dfb      	ldrb	r3, [r7, #23]
24008c38:	2b00      	cmp	r3, #0
24008c3a:	d166      	bne.n	24008d0a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
24008c3c:	4ba2      	ldr	r3, [pc, #648]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008c3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24008c40:	687b      	ldr	r3, [r7, #4]
24008c42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24008c46:	4053      	eors	r3, r2
24008c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
24008c4c:	2b00      	cmp	r3, #0
24008c4e:	d013      	beq.n	24008c78 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
24008c50:	4b9d      	ldr	r3, [pc, #628]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24008c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
24008c58:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
24008c5a:	4b9b      	ldr	r3, [pc, #620]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24008c5e:	4a9a      	ldr	r2, [pc, #616]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
24008c64:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
24008c66:	4b98      	ldr	r3, [pc, #608]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24008c6a:	4a97      	ldr	r2, [pc, #604]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
24008c70:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
24008c72:	4a95      	ldr	r2, [pc, #596]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008c74:	68fb      	ldr	r3, [r7, #12]
24008c76:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
24008c78:	687b      	ldr	r3, [r7, #4]
24008c7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24008c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
24008c82:	d115      	bne.n	24008cb0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
24008c84:	f7f9 fa9a 	bl	240021bc <HAL_GetTick>
24008c88:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008c8a:	e00b      	b.n	24008ca4 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
24008c8c:	f7f9 fa96 	bl	240021bc <HAL_GetTick>
24008c90:	4602      	mov	r2, r0
24008c92:	693b      	ldr	r3, [r7, #16]
24008c94:	1ad3      	subs	r3, r2, r3
24008c96:	f241 3288 	movw	r2, #5000	; 0x1388
24008c9a:	4293      	cmp	r3, r2
24008c9c:	d902      	bls.n	24008ca4 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
24008c9e:	2303      	movs	r3, #3
24008ca0:	75fb      	strb	r3, [r7, #23]
            break;
24008ca2:	e005      	b.n	24008cb0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
24008ca4:	4b88      	ldr	r3, [pc, #544]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
24008ca8:	f003 0302 	and.w	r3, r3, #2
24008cac:	2b00      	cmp	r3, #0
24008cae:	d0ed      	beq.n	24008c8c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
24008cb0:	7dfb      	ldrb	r3, [r7, #23]
24008cb2:	2b00      	cmp	r3, #0
24008cb4:	d126      	bne.n	24008d04 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
24008cb6:	687b      	ldr	r3, [r7, #4]
24008cb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24008cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
24008cc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
24008cc4:	d10d      	bne.n	24008ce2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
24008cc6:	4b80      	ldr	r3, [pc, #512]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008cc8:	691b      	ldr	r3, [r3, #16]
24008cca:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
24008cce:	687b      	ldr	r3, [r7, #4]
24008cd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24008cd4:	0919      	lsrs	r1, r3, #4
24008cd6:	4b7e      	ldr	r3, [pc, #504]	; (24008ed0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
24008cd8:	400b      	ands	r3, r1
24008cda:	497b      	ldr	r1, [pc, #492]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008cdc:	4313      	orrs	r3, r2
24008cde:	610b      	str	r3, [r1, #16]
24008ce0:	e005      	b.n	24008cee <HAL_RCCEx_PeriphCLKConfig+0x6e2>
24008ce2:	4b79      	ldr	r3, [pc, #484]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008ce4:	691b      	ldr	r3, [r3, #16]
24008ce6:	4a78      	ldr	r2, [pc, #480]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008ce8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
24008cec:	6113      	str	r3, [r2, #16]
24008cee:	4b76      	ldr	r3, [pc, #472]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008cf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
24008cf2:	687b      	ldr	r3, [r7, #4]
24008cf4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
24008cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
24008cfc:	4972      	ldr	r1, [pc, #456]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008cfe:	4313      	orrs	r3, r2
24008d00:	670b      	str	r3, [r1, #112]	; 0x70
24008d02:	e004      	b.n	24008d0e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
24008d04:	7dfb      	ldrb	r3, [r7, #23]
24008d06:	75bb      	strb	r3, [r7, #22]
24008d08:	e001      	b.n	24008d0e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
24008d0a:	7dfb      	ldrb	r3, [r7, #23]
24008d0c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
24008d0e:	687b      	ldr	r3, [r7, #4]
24008d10:	681b      	ldr	r3, [r3, #0]
24008d12:	f003 0301 	and.w	r3, r3, #1
24008d16:	2b00      	cmp	r3, #0
24008d18:	d07d      	beq.n	24008e16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
24008d1a:	687b      	ldr	r3, [r7, #4]
24008d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
24008d1e:	2b28      	cmp	r3, #40	; 0x28
24008d20:	d866      	bhi.n	24008df0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
24008d22:	a201      	add	r2, pc, #4	; (adr r2, 24008d28 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
24008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24008d28:	24008df7 	.word	0x24008df7
24008d2c:	24008df1 	.word	0x24008df1
24008d30:	24008df1 	.word	0x24008df1
24008d34:	24008df1 	.word	0x24008df1
24008d38:	24008df1 	.word	0x24008df1
24008d3c:	24008df1 	.word	0x24008df1
24008d40:	24008df1 	.word	0x24008df1
24008d44:	24008df1 	.word	0x24008df1
24008d48:	24008dcd 	.word	0x24008dcd
24008d4c:	24008df1 	.word	0x24008df1
24008d50:	24008df1 	.word	0x24008df1
24008d54:	24008df1 	.word	0x24008df1
24008d58:	24008df1 	.word	0x24008df1
24008d5c:	24008df1 	.word	0x24008df1
24008d60:	24008df1 	.word	0x24008df1
24008d64:	24008df1 	.word	0x24008df1
24008d68:	24008ddf 	.word	0x24008ddf
24008d6c:	24008df1 	.word	0x24008df1
24008d70:	24008df1 	.word	0x24008df1
24008d74:	24008df1 	.word	0x24008df1
24008d78:	24008df1 	.word	0x24008df1
24008d7c:	24008df1 	.word	0x24008df1
24008d80:	24008df1 	.word	0x24008df1
24008d84:	24008df1 	.word	0x24008df1
24008d88:	24008df7 	.word	0x24008df7
24008d8c:	24008df1 	.word	0x24008df1
24008d90:	24008df1 	.word	0x24008df1
24008d94:	24008df1 	.word	0x24008df1
24008d98:	24008df1 	.word	0x24008df1
24008d9c:	24008df1 	.word	0x24008df1
24008da0:	24008df1 	.word	0x24008df1
24008da4:	24008df1 	.word	0x24008df1
24008da8:	24008df7 	.word	0x24008df7
24008dac:	24008df1 	.word	0x24008df1
24008db0:	24008df1 	.word	0x24008df1
24008db4:	24008df1 	.word	0x24008df1
24008db8:	24008df1 	.word	0x24008df1
24008dbc:	24008df1 	.word	0x24008df1
24008dc0:	24008df1 	.word	0x24008df1
24008dc4:	24008df1 	.word	0x24008df1
24008dc8:	24008df7 	.word	0x24008df7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24008dcc:	687b      	ldr	r3, [r7, #4]
24008dce:	3304      	adds	r3, #4
24008dd0:	2101      	movs	r1, #1
24008dd2:	4618      	mov	r0, r3
24008dd4:	f001 fd3f 	bl	2400a856 <RCCEx_PLL2_Config>
24008dd8:	4603      	mov	r3, r0
24008dda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
24008ddc:	e00c      	b.n	24008df8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24008dde:	687b      	ldr	r3, [r7, #4]
24008de0:	3324      	adds	r3, #36	; 0x24
24008de2:	2101      	movs	r1, #1
24008de4:	4618      	mov	r0, r3
24008de6:	f001 fde7 	bl	2400a9b8 <RCCEx_PLL3_Config>
24008dea:	4603      	mov	r3, r0
24008dec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
24008dee:	e003      	b.n	24008df8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24008df0:	2301      	movs	r3, #1
24008df2:	75fb      	strb	r3, [r7, #23]
      break;
24008df4:	e000      	b.n	24008df8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
24008df6:	bf00      	nop
    }

    if(ret == HAL_OK)
24008df8:	7dfb      	ldrb	r3, [r7, #23]
24008dfa:	2b00      	cmp	r3, #0
24008dfc:	d109      	bne.n	24008e12 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
24008dfe:	4b32      	ldr	r3, [pc, #200]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24008e02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
24008e06:	687b      	ldr	r3, [r7, #4]
24008e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
24008e0a:	492f      	ldr	r1, [pc, #188]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008e0c:	4313      	orrs	r3, r2
24008e0e:	654b      	str	r3, [r1, #84]	; 0x54
24008e10:	e001      	b.n	24008e16 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008e12:	7dfb      	ldrb	r3, [r7, #23]
24008e14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
24008e16:	687b      	ldr	r3, [r7, #4]
24008e18:	681b      	ldr	r3, [r3, #0]
24008e1a:	f003 0302 	and.w	r3, r3, #2
24008e1e:	2b00      	cmp	r3, #0
24008e20:	d037      	beq.n	24008e92 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
24008e22:	687b      	ldr	r3, [r7, #4]
24008e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24008e26:	2b05      	cmp	r3, #5
24008e28:	d820      	bhi.n	24008e6c <HAL_RCCEx_PeriphCLKConfig+0x860>
24008e2a:	a201      	add	r2, pc, #4	; (adr r2, 24008e30 <HAL_RCCEx_PeriphCLKConfig+0x824>)
24008e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24008e30:	24008e73 	.word	0x24008e73
24008e34:	24008e49 	.word	0x24008e49
24008e38:	24008e5b 	.word	0x24008e5b
24008e3c:	24008e73 	.word	0x24008e73
24008e40:	24008e73 	.word	0x24008e73
24008e44:	24008e73 	.word	0x24008e73
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24008e48:	687b      	ldr	r3, [r7, #4]
24008e4a:	3304      	adds	r3, #4
24008e4c:	2101      	movs	r1, #1
24008e4e:	4618      	mov	r0, r3
24008e50:	f001 fd01 	bl	2400a856 <RCCEx_PLL2_Config>
24008e54:	4603      	mov	r3, r0
24008e56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
24008e58:	e00c      	b.n	24008e74 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24008e5a:	687b      	ldr	r3, [r7, #4]
24008e5c:	3324      	adds	r3, #36	; 0x24
24008e5e:	2101      	movs	r1, #1
24008e60:	4618      	mov	r0, r3
24008e62:	f001 fda9 	bl	2400a9b8 <RCCEx_PLL3_Config>
24008e66:	4603      	mov	r3, r0
24008e68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
24008e6a:	e003      	b.n	24008e74 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24008e6c:	2301      	movs	r3, #1
24008e6e:	75fb      	strb	r3, [r7, #23]
      break;
24008e70:	e000      	b.n	24008e74 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
24008e72:	bf00      	nop
    }

    if(ret == HAL_OK)
24008e74:	7dfb      	ldrb	r3, [r7, #23]
24008e76:	2b00      	cmp	r3, #0
24008e78:	d109      	bne.n	24008e8e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
24008e7a:	4b13      	ldr	r3, [pc, #76]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24008e7e:	f023 0207 	bic.w	r2, r3, #7
24008e82:	687b      	ldr	r3, [r7, #4]
24008e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
24008e86:	4910      	ldr	r1, [pc, #64]	; (24008ec8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
24008e88:	4313      	orrs	r3, r2
24008e8a:	654b      	str	r3, [r1, #84]	; 0x54
24008e8c:	e001      	b.n	24008e92 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008e8e:	7dfb      	ldrb	r3, [r7, #23]
24008e90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
24008e92:	687b      	ldr	r3, [r7, #4]
24008e94:	681b      	ldr	r3, [r3, #0]
24008e96:	f003 0304 	and.w	r3, r3, #4
24008e9a:	2b00      	cmp	r3, #0
24008e9c:	d040      	beq.n	24008f20 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
24008e9e:	687b      	ldr	r3, [r7, #4]
24008ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24008ea4:	2b05      	cmp	r3, #5
24008ea6:	d827      	bhi.n	24008ef8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
24008ea8:	a201      	add	r2, pc, #4	; (adr r2, 24008eb0 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
24008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
24008eae:	bf00      	nop
24008eb0:	24008eff 	.word	0x24008eff
24008eb4:	24008ed5 	.word	0x24008ed5
24008eb8:	24008ee7 	.word	0x24008ee7
24008ebc:	24008eff 	.word	0x24008eff
24008ec0:	24008eff 	.word	0x24008eff
24008ec4:	24008eff 	.word	0x24008eff
24008ec8:	58024400 	.word	0x58024400
24008ecc:	58024800 	.word	0x58024800
24008ed0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
24008ed4:	687b      	ldr	r3, [r7, #4]
24008ed6:	3304      	adds	r3, #4
24008ed8:	2101      	movs	r1, #1
24008eda:	4618      	mov	r0, r3
24008edc:	f001 fcbb 	bl	2400a856 <RCCEx_PLL2_Config>
24008ee0:	4603      	mov	r3, r0
24008ee2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
24008ee4:	e00c      	b.n	24008f00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
24008ee6:	687b      	ldr	r3, [r7, #4]
24008ee8:	3324      	adds	r3, #36	; 0x24
24008eea:	2101      	movs	r1, #1
24008eec:	4618      	mov	r0, r3
24008eee:	f001 fd63 	bl	2400a9b8 <RCCEx_PLL3_Config>
24008ef2:	4603      	mov	r3, r0
24008ef4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
24008ef6:	e003      	b.n	24008f00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24008ef8:	2301      	movs	r3, #1
24008efa:	75fb      	strb	r3, [r7, #23]
      break;
24008efc:	e000      	b.n	24008f00 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
24008efe:	bf00      	nop
    }

    if(ret == HAL_OK)
24008f00:	7dfb      	ldrb	r3, [r7, #23]
24008f02:	2b00      	cmp	r3, #0
24008f04:	d10a      	bne.n	24008f1c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
24008f06:	4bb2      	ldr	r3, [pc, #712]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
24008f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24008f0a:	f023 0207 	bic.w	r2, r3, #7
24008f0e:	687b      	ldr	r3, [r7, #4]
24008f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
24008f14:	49ae      	ldr	r1, [pc, #696]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
24008f16:	4313      	orrs	r3, r2
24008f18:	658b      	str	r3, [r1, #88]	; 0x58
24008f1a:	e001      	b.n	24008f20 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008f1c:	7dfb      	ldrb	r3, [r7, #23]
24008f1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
24008f20:	687b      	ldr	r3, [r7, #4]
24008f22:	681b      	ldr	r3, [r3, #0]
24008f24:	f003 0320 	and.w	r3, r3, #32
24008f28:	2b00      	cmp	r3, #0
24008f2a:	d044      	beq.n	24008fb6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
24008f2c:	687b      	ldr	r3, [r7, #4]
24008f2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
24008f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24008f36:	d01b      	beq.n	24008f70 <HAL_RCCEx_PeriphCLKConfig+0x964>
24008f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24008f3c:	d805      	bhi.n	24008f4a <HAL_RCCEx_PeriphCLKConfig+0x93e>
24008f3e:	2b00      	cmp	r3, #0
24008f40:	d022      	beq.n	24008f88 <HAL_RCCEx_PeriphCLKConfig+0x97c>
24008f42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24008f46:	d00a      	beq.n	24008f5e <HAL_RCCEx_PeriphCLKConfig+0x952>
24008f48:	e01b      	b.n	24008f82 <HAL_RCCEx_PeriphCLKConfig+0x976>
24008f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24008f4e:	d01d      	beq.n	24008f8c <HAL_RCCEx_PeriphCLKConfig+0x980>
24008f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24008f54:	d01c      	beq.n	24008f90 <HAL_RCCEx_PeriphCLKConfig+0x984>
24008f56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24008f5a:	d01b      	beq.n	24008f94 <HAL_RCCEx_PeriphCLKConfig+0x988>
24008f5c:	e011      	b.n	24008f82 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24008f5e:	687b      	ldr	r3, [r7, #4]
24008f60:	3304      	adds	r3, #4
24008f62:	2100      	movs	r1, #0
24008f64:	4618      	mov	r0, r3
24008f66:	f001 fc76 	bl	2400a856 <RCCEx_PLL2_Config>
24008f6a:	4603      	mov	r3, r0
24008f6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
24008f6e:	e012      	b.n	24008f96 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24008f70:	687b      	ldr	r3, [r7, #4]
24008f72:	3324      	adds	r3, #36	; 0x24
24008f74:	2102      	movs	r1, #2
24008f76:	4618      	mov	r0, r3
24008f78:	f001 fd1e 	bl	2400a9b8 <RCCEx_PLL3_Config>
24008f7c:	4603      	mov	r3, r0
24008f7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
24008f80:	e009      	b.n	24008f96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24008f82:	2301      	movs	r3, #1
24008f84:	75fb      	strb	r3, [r7, #23]
      break;
24008f86:	e006      	b.n	24008f96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
24008f88:	bf00      	nop
24008f8a:	e004      	b.n	24008f96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
24008f8c:	bf00      	nop
24008f8e:	e002      	b.n	24008f96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
24008f90:	bf00      	nop
24008f92:	e000      	b.n	24008f96 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
24008f94:	bf00      	nop
    }

    if(ret == HAL_OK)
24008f96:	7dfb      	ldrb	r3, [r7, #23]
24008f98:	2b00      	cmp	r3, #0
24008f9a:	d10a      	bne.n	24008fb2 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
24008f9c:	4b8c      	ldr	r3, [pc, #560]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
24008f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24008fa0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
24008fa4:	687b      	ldr	r3, [r7, #4]
24008fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
24008faa:	4989      	ldr	r1, [pc, #548]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
24008fac:	4313      	orrs	r3, r2
24008fae:	654b      	str	r3, [r1, #84]	; 0x54
24008fb0:	e001      	b.n	24008fb6 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
24008fb2:	7dfb      	ldrb	r3, [r7, #23]
24008fb4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
24008fb6:	687b      	ldr	r3, [r7, #4]
24008fb8:	681b      	ldr	r3, [r3, #0]
24008fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
24008fbe:	2b00      	cmp	r3, #0
24008fc0:	d044      	beq.n	2400904c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
24008fc2:	687b      	ldr	r3, [r7, #4]
24008fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
24008fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24008fcc:	d01b      	beq.n	24009006 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
24008fce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
24008fd2:	d805      	bhi.n	24008fe0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
24008fd4:	2b00      	cmp	r3, #0
24008fd6:	d022      	beq.n	2400901e <HAL_RCCEx_PeriphCLKConfig+0xa12>
24008fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24008fdc:	d00a      	beq.n	24008ff4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
24008fde:	e01b      	b.n	24009018 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
24008fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24008fe4:	d01d      	beq.n	24009022 <HAL_RCCEx_PeriphCLKConfig+0xa16>
24008fe6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
24008fea:	d01c      	beq.n	24009026 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
24008fec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
24008ff0:	d01b      	beq.n	2400902a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
24008ff2:	e011      	b.n	24009018 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24008ff4:	687b      	ldr	r3, [r7, #4]
24008ff6:	3304      	adds	r3, #4
24008ff8:	2100      	movs	r1, #0
24008ffa:	4618      	mov	r0, r3
24008ffc:	f001 fc2b 	bl	2400a856 <RCCEx_PLL2_Config>
24009000:	4603      	mov	r3, r0
24009002:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
24009004:	e012      	b.n	2400902c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
24009006:	687b      	ldr	r3, [r7, #4]
24009008:	3324      	adds	r3, #36	; 0x24
2400900a:	2102      	movs	r1, #2
2400900c:	4618      	mov	r0, r3
2400900e:	f001 fcd3 	bl	2400a9b8 <RCCEx_PLL3_Config>
24009012:	4603      	mov	r3, r0
24009014:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
24009016:	e009      	b.n	2400902c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24009018:	2301      	movs	r3, #1
2400901a:	75fb      	strb	r3, [r7, #23]
      break;
2400901c:	e006      	b.n	2400902c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
2400901e:	bf00      	nop
24009020:	e004      	b.n	2400902c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
24009022:	bf00      	nop
24009024:	e002      	b.n	2400902c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
24009026:	bf00      	nop
24009028:	e000      	b.n	2400902c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
2400902a:	bf00      	nop
    }

    if(ret == HAL_OK)
2400902c:	7dfb      	ldrb	r3, [r7, #23]
2400902e:	2b00      	cmp	r3, #0
24009030:	d10a      	bne.n	24009048 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
24009032:	4b67      	ldr	r3, [pc, #412]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
24009034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009036:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
2400903a:	687b      	ldr	r3, [r7, #4]
2400903c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
24009040:	4963      	ldr	r1, [pc, #396]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
24009042:	4313      	orrs	r3, r2
24009044:	658b      	str	r3, [r1, #88]	; 0x58
24009046:	e001      	b.n	2400904c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
24009048:	7dfb      	ldrb	r3, [r7, #23]
2400904a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
2400904c:	687b      	ldr	r3, [r7, #4]
2400904e:	681b      	ldr	r3, [r3, #0]
24009050:	f003 0380 	and.w	r3, r3, #128	; 0x80
24009054:	2b00      	cmp	r3, #0
24009056:	d044      	beq.n	240090e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
24009058:	687b      	ldr	r3, [r7, #4]
2400905a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
2400905e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24009062:	d01b      	beq.n	2400909c <HAL_RCCEx_PeriphCLKConfig+0xa90>
24009064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24009068:	d805      	bhi.n	24009076 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
2400906a:	2b00      	cmp	r3, #0
2400906c:	d022      	beq.n	240090b4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
2400906e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
24009072:	d00a      	beq.n	2400908a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
24009074:	e01b      	b.n	240090ae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
24009076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2400907a:	d01d      	beq.n	240090b8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
2400907c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
24009080:	d01c      	beq.n	240090bc <HAL_RCCEx_PeriphCLKConfig+0xab0>
24009082:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
24009086:	d01b      	beq.n	240090c0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
24009088:	e011      	b.n	240090ae <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
2400908a:	687b      	ldr	r3, [r7, #4]
2400908c:	3304      	adds	r3, #4
2400908e:	2100      	movs	r1, #0
24009090:	4618      	mov	r0, r3
24009092:	f001 fbe0 	bl	2400a856 <RCCEx_PLL2_Config>
24009096:	4603      	mov	r3, r0
24009098:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
2400909a:	e012      	b.n	240090c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
2400909c:	687b      	ldr	r3, [r7, #4]
2400909e:	3324      	adds	r3, #36	; 0x24
240090a0:	2102      	movs	r1, #2
240090a2:	4618      	mov	r0, r3
240090a4:	f001 fc88 	bl	2400a9b8 <RCCEx_PLL3_Config>
240090a8:	4603      	mov	r3, r0
240090aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
240090ac:	e009      	b.n	240090c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240090ae:	2301      	movs	r3, #1
240090b0:	75fb      	strb	r3, [r7, #23]
      break;
240090b2:	e006      	b.n	240090c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
240090b4:	bf00      	nop
240090b6:	e004      	b.n	240090c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
240090b8:	bf00      	nop
240090ba:	e002      	b.n	240090c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
240090bc:	bf00      	nop
240090be:	e000      	b.n	240090c2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
240090c0:	bf00      	nop
    }

    if(ret == HAL_OK)
240090c2:	7dfb      	ldrb	r3, [r7, #23]
240090c4:	2b00      	cmp	r3, #0
240090c6:	d10a      	bne.n	240090de <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
240090c8:	4b41      	ldr	r3, [pc, #260]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
240090ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240090cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
240090d0:	687b      	ldr	r3, [r7, #4]
240090d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
240090d6:	493e      	ldr	r1, [pc, #248]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
240090d8:	4313      	orrs	r3, r2
240090da:	658b      	str	r3, [r1, #88]	; 0x58
240090dc:	e001      	b.n	240090e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
240090de:	7dfb      	ldrb	r3, [r7, #23]
240090e0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
240090e2:	687b      	ldr	r3, [r7, #4]
240090e4:	681b      	ldr	r3, [r3, #0]
240090e6:	f003 0308 	and.w	r3, r3, #8
240090ea:	2b00      	cmp	r3, #0
240090ec:	d01a      	beq.n	24009124 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
240090ee:	687b      	ldr	r3, [r7, #4]
240090f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
240090f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240090f8:	d10a      	bne.n	24009110 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
240090fa:	687b      	ldr	r3, [r7, #4]
240090fc:	3324      	adds	r3, #36	; 0x24
240090fe:	2102      	movs	r1, #2
24009100:	4618      	mov	r0, r3
24009102:	f001 fc59 	bl	2400a9b8 <RCCEx_PLL3_Config>
24009106:	4603      	mov	r3, r0
24009108:	2b00      	cmp	r3, #0
2400910a:	d001      	beq.n	24009110 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
2400910c:	2301      	movs	r3, #1
2400910e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
24009110:	4b2f      	ldr	r3, [pc, #188]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
24009112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24009114:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
24009118:	687b      	ldr	r3, [r7, #4]
2400911a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2400911e:	492c      	ldr	r1, [pc, #176]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
24009120:	4313      	orrs	r3, r2
24009122:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
24009124:	687b      	ldr	r3, [r7, #4]
24009126:	681b      	ldr	r3, [r3, #0]
24009128:	f003 0310 	and.w	r3, r3, #16
2400912c:	2b00      	cmp	r3, #0
2400912e:	d01a      	beq.n	24009166 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
24009130:	687b      	ldr	r3, [r7, #4]
24009132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24009136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400913a:	d10a      	bne.n	24009152 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
2400913c:	687b      	ldr	r3, [r7, #4]
2400913e:	3324      	adds	r3, #36	; 0x24
24009140:	2102      	movs	r1, #2
24009142:	4618      	mov	r0, r3
24009144:	f001 fc38 	bl	2400a9b8 <RCCEx_PLL3_Config>
24009148:	4603      	mov	r3, r0
2400914a:	2b00      	cmp	r3, #0
2400914c:	d001      	beq.n	24009152 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
2400914e:	2301      	movs	r3, #1
24009150:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
24009152:	4b1f      	ldr	r3, [pc, #124]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
24009154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009156:	f423 7240 	bic.w	r2, r3, #768	; 0x300
2400915a:	687b      	ldr	r3, [r7, #4]
2400915c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
24009160:	491b      	ldr	r1, [pc, #108]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
24009162:	4313      	orrs	r3, r2
24009164:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
24009166:	687b      	ldr	r3, [r7, #4]
24009168:	681b      	ldr	r3, [r3, #0]
2400916a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
2400916e:	2b00      	cmp	r3, #0
24009170:	d032      	beq.n	240091d8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
24009172:	687b      	ldr	r3, [r7, #4]
24009174:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
24009178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400917c:	d00d      	beq.n	2400919a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
2400917e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24009182:	d016      	beq.n	240091b2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
24009184:	2b00      	cmp	r3, #0
24009186:	d111      	bne.n	240091ac <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
24009188:	687b      	ldr	r3, [r7, #4]
2400918a:	3304      	adds	r3, #4
2400918c:	2100      	movs	r1, #0
2400918e:	4618      	mov	r0, r3
24009190:	f001 fb61 	bl	2400a856 <RCCEx_PLL2_Config>
24009194:	4603      	mov	r3, r0
24009196:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
24009198:	e00c      	b.n	240091b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
2400919a:	687b      	ldr	r3, [r7, #4]
2400919c:	3324      	adds	r3, #36	; 0x24
2400919e:	2102      	movs	r1, #2
240091a0:	4618      	mov	r0, r3
240091a2:	f001 fc09 	bl	2400a9b8 <RCCEx_PLL3_Config>
240091a6:	4603      	mov	r3, r0
240091a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
240091aa:	e003      	b.n	240091b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
240091ac:	2301      	movs	r3, #1
240091ae:	75fb      	strb	r3, [r7, #23]
      break;
240091b0:	e000      	b.n	240091b4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
240091b2:	bf00      	nop
    }

    if(ret == HAL_OK)
240091b4:	7dfb      	ldrb	r3, [r7, #23]
240091b6:	2b00      	cmp	r3, #0
240091b8:	d10c      	bne.n	240091d4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
240091ba:	4b05      	ldr	r3, [pc, #20]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
240091bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240091be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
240091c2:	687b      	ldr	r3, [r7, #4]
240091c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
240091c8:	4901      	ldr	r1, [pc, #4]	; (240091d0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
240091ca:	4313      	orrs	r3, r2
240091cc:	658b      	str	r3, [r1, #88]	; 0x58
240091ce:	e003      	b.n	240091d8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
240091d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
240091d4:	7dfb      	ldrb	r3, [r7, #23]
240091d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
240091d8:	687b      	ldr	r3, [r7, #4]
240091da:	681b      	ldr	r3, [r3, #0]
240091dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
240091e0:	2b00      	cmp	r3, #0
240091e2:	d02f      	beq.n	24009244 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
240091e4:	687b      	ldr	r3, [r7, #4]
240091e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
240091ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
240091ee:	d00c      	beq.n	2400920a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
240091f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
240091f4:	d015      	beq.n	24009222 <HAL_RCCEx_PeriphCLKConfig+0xc16>
240091f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
240091fa:	d10f      	bne.n	2400921c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240091fc:	4b79      	ldr	r3, [pc, #484]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
240091fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24009200:	4a78      	ldr	r2, [pc, #480]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
24009202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
24009208:	e00c      	b.n	24009224 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
2400920a:	687b      	ldr	r3, [r7, #4]
2400920c:	3324      	adds	r3, #36	; 0x24
2400920e:	2101      	movs	r1, #1
24009210:	4618      	mov	r0, r3
24009212:	f001 fbd1 	bl	2400a9b8 <RCCEx_PLL3_Config>
24009216:	4603      	mov	r3, r0
24009218:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
2400921a:	e003      	b.n	24009224 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
2400921c:	2301      	movs	r3, #1
2400921e:	75fb      	strb	r3, [r7, #23]
      break;
24009220:	e000      	b.n	24009224 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
24009222:	bf00      	nop
    }

    if(ret == HAL_OK)
24009224:	7dfb      	ldrb	r3, [r7, #23]
24009226:	2b00      	cmp	r3, #0
24009228:	d10a      	bne.n	24009240 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
2400922a:	4b6e      	ldr	r3, [pc, #440]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400922c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400922e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
24009232:	687b      	ldr	r3, [r7, #4]
24009234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
24009238:	496a      	ldr	r1, [pc, #424]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400923a:	4313      	orrs	r3, r2
2400923c:	654b      	str	r3, [r1, #84]	; 0x54
2400923e:	e001      	b.n	24009244 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
24009240:	7dfb      	ldrb	r3, [r7, #23]
24009242:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
24009244:	687b      	ldr	r3, [r7, #4]
24009246:	681b      	ldr	r3, [r3, #0]
24009248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2400924c:	2b00      	cmp	r3, #0
2400924e:	d029      	beq.n	240092a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
24009250:	687b      	ldr	r3, [r7, #4]
24009252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24009254:	2b00      	cmp	r3, #0
24009256:	d003      	beq.n	24009260 <HAL_RCCEx_PeriphCLKConfig+0xc54>
24009258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2400925c:	d007      	beq.n	2400926e <HAL_RCCEx_PeriphCLKConfig+0xc62>
2400925e:	e00f      	b.n	24009280 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
24009260:	4b60      	ldr	r3, [pc, #384]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
24009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24009264:	4a5f      	ldr	r2, [pc, #380]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
24009266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
2400926a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
2400926c:	e00b      	b.n	24009286 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
2400926e:	687b      	ldr	r3, [r7, #4]
24009270:	3304      	adds	r3, #4
24009272:	2102      	movs	r1, #2
24009274:	4618      	mov	r0, r3
24009276:	f001 faee 	bl	2400a856 <RCCEx_PLL2_Config>
2400927a:	4603      	mov	r3, r0
2400927c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
2400927e:	e002      	b.n	24009286 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
24009280:	2301      	movs	r3, #1
24009282:	75fb      	strb	r3, [r7, #23]
      break;
24009284:	bf00      	nop
    }

    if(ret == HAL_OK)
24009286:	7dfb      	ldrb	r3, [r7, #23]
24009288:	2b00      	cmp	r3, #0
2400928a:	d109      	bne.n	240092a0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
2400928c:	4b55      	ldr	r3, [pc, #340]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400928e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24009290:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
24009294:	687b      	ldr	r3, [r7, #4]
24009296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24009298:	4952      	ldr	r1, [pc, #328]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400929a:	4313      	orrs	r3, r2
2400929c:	64cb      	str	r3, [r1, #76]	; 0x4c
2400929e:	e001      	b.n	240092a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
240092a0:	7dfb      	ldrb	r3, [r7, #23]
240092a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
240092a4:	687b      	ldr	r3, [r7, #4]
240092a6:	681b      	ldr	r3, [r3, #0]
240092a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
240092ac:	2b00      	cmp	r3, #0
240092ae:	d00a      	beq.n	240092c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
240092b0:	687b      	ldr	r3, [r7, #4]
240092b2:	3324      	adds	r3, #36	; 0x24
240092b4:	2102      	movs	r1, #2
240092b6:	4618      	mov	r0, r3
240092b8:	f001 fb7e 	bl	2400a9b8 <RCCEx_PLL3_Config>
240092bc:	4603      	mov	r3, r0
240092be:	2b00      	cmp	r3, #0
240092c0:	d001      	beq.n	240092c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
240092c2:	2301      	movs	r3, #1
240092c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
240092c6:	687b      	ldr	r3, [r7, #4]
240092c8:	681b      	ldr	r3, [r3, #0]
240092ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
240092ce:	2b00      	cmp	r3, #0
240092d0:	d02f      	beq.n	24009332 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
240092d2:	687b      	ldr	r3, [r7, #4]
240092d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
240092d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240092da:	d00c      	beq.n	240092f6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
240092dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240092e0:	d802      	bhi.n	240092e8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
240092e2:	2b00      	cmp	r3, #0
240092e4:	d011      	beq.n	2400930a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
240092e6:	e00d      	b.n	24009304 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
240092e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
240092ec:	d00f      	beq.n	2400930e <HAL_RCCEx_PeriphCLKConfig+0xd02>
240092ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
240092f2:	d00e      	beq.n	24009312 <HAL_RCCEx_PeriphCLKConfig+0xd06>
240092f4:	e006      	b.n	24009304 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
240092f6:	4b3b      	ldr	r3, [pc, #236]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
240092f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240092fa:	4a3a      	ldr	r2, [pc, #232]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
240092fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
24009300:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
24009302:	e007      	b.n	24009314 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
24009304:	2301      	movs	r3, #1
24009306:	75fb      	strb	r3, [r7, #23]
      break;
24009308:	e004      	b.n	24009314 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
2400930a:	bf00      	nop
2400930c:	e002      	b.n	24009314 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
2400930e:	bf00      	nop
24009310:	e000      	b.n	24009314 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
24009312:	bf00      	nop
    }

    if(ret == HAL_OK)
24009314:	7dfb      	ldrb	r3, [r7, #23]
24009316:	2b00      	cmp	r3, #0
24009318:	d109      	bne.n	2400932e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
2400931a:	4b32      	ldr	r3, [pc, #200]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400931c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400931e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
24009322:	687b      	ldr	r3, [r7, #4]
24009324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
24009326:	492f      	ldr	r1, [pc, #188]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
24009328:	4313      	orrs	r3, r2
2400932a:	654b      	str	r3, [r1, #84]	; 0x54
2400932c:	e001      	b.n	24009332 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
2400932e:	7dfb      	ldrb	r3, [r7, #23]
24009330:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
24009332:	687b      	ldr	r3, [r7, #4]
24009334:	681b      	ldr	r3, [r3, #0]
24009336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2400933a:	2b00      	cmp	r3, #0
2400933c:	d008      	beq.n	24009350 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
2400933e:	4b29      	ldr	r3, [pc, #164]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
24009340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009342:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
24009346:	687b      	ldr	r3, [r7, #4]
24009348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400934a:	4926      	ldr	r1, [pc, #152]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400934c:	4313      	orrs	r3, r2
2400934e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
24009350:	687b      	ldr	r3, [r7, #4]
24009352:	681b      	ldr	r3, [r3, #0]
24009354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
24009358:	2b00      	cmp	r3, #0
2400935a:	d009      	beq.n	24009370 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
2400935c:	4b21      	ldr	r3, [pc, #132]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400935e:	691b      	ldr	r3, [r3, #16]
24009360:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
24009364:	687b      	ldr	r3, [r7, #4]
24009366:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
2400936a:	491e      	ldr	r1, [pc, #120]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400936c:	4313      	orrs	r3, r2
2400936e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
24009370:	687b      	ldr	r3, [r7, #4]
24009372:	681b      	ldr	r3, [r3, #0]
24009374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
24009378:	2b00      	cmp	r3, #0
2400937a:	d008      	beq.n	2400938e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
2400937c:	4b19      	ldr	r3, [pc, #100]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400937e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009380:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
24009384:	687b      	ldr	r3, [r7, #4]
24009386:	6e9b      	ldr	r3, [r3, #104]	; 0x68
24009388:	4916      	ldr	r1, [pc, #88]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400938a:	4313      	orrs	r3, r2
2400938c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
2400938e:	687b      	ldr	r3, [r7, #4]
24009390:	681b      	ldr	r3, [r3, #0]
24009392:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
24009396:	2b00      	cmp	r3, #0
24009398:	d00d      	beq.n	240093b6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
2400939a:	4b12      	ldr	r3, [pc, #72]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
2400939c:	691b      	ldr	r3, [r3, #16]
2400939e:	4a11      	ldr	r2, [pc, #68]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
240093a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
240093a4:	6113      	str	r3, [r2, #16]
240093a6:	4b0f      	ldr	r3, [pc, #60]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
240093a8:	691a      	ldr	r2, [r3, #16]
240093aa:	687b      	ldr	r3, [r7, #4]
240093ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
240093b0:	490c      	ldr	r1, [pc, #48]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
240093b2:	4313      	orrs	r3, r2
240093b4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
240093b6:	687b      	ldr	r3, [r7, #4]
240093b8:	681b      	ldr	r3, [r3, #0]
240093ba:	2b00      	cmp	r3, #0
240093bc:	da08      	bge.n	240093d0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
240093be:	4b09      	ldr	r3, [pc, #36]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
240093c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240093c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
240093c6:	687b      	ldr	r3, [r7, #4]
240093c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240093ca:	4906      	ldr	r1, [pc, #24]	; (240093e4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
240093cc:	4313      	orrs	r3, r2
240093ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
240093d0:	7dbb      	ldrb	r3, [r7, #22]
240093d2:	2b00      	cmp	r3, #0
240093d4:	d101      	bne.n	240093da <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
240093d6:	2300      	movs	r3, #0
240093d8:	e000      	b.n	240093dc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
240093da:	2301      	movs	r3, #1
}
240093dc:	4618      	mov	r0, r3
240093de:	3718      	adds	r7, #24
240093e0:	46bd      	mov	sp, r7
240093e2:	bd80      	pop	{r7, pc}
240093e4:	58024400 	.word	0x58024400

240093e8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
240093e8:	b480      	push	{r7}
240093ea:	b083      	sub	sp, #12
240093ec:	af00      	add	r7, sp, #0
240093ee:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
240093f0:	687b      	ldr	r3, [r7, #4]
240093f2:	4aa3      	ldr	r2, [pc, #652]	; (24009680 <HAL_RCCEx_GetPeriphCLKConfig+0x298>)
240093f4:	601a      	str	r2, [r3, #0]
	         RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
240093f6:	687b      	ldr	r3, [r7, #4]
240093f8:	681b      	ldr	r3, [r3, #0]
240093fa:	f043 0208 	orr.w	r2, r3, #8
240093fe:	687b      	ldr	r3, [r7, #4]
24009400:	601a      	str	r2, [r3, #0]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)		 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)	 
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
24009402:	687b      	ldr	r3, [r7, #4]
24009404:	681b      	ldr	r3, [r3, #0]
24009406:	f443 7200 	orr.w	r2, r3, #512	; 0x200
2400940a:	687b      	ldr	r3, [r7, #4]
2400940c:	601a      	str	r2, [r3, #0]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
2400940e:	687b      	ldr	r3, [r7, #4]
24009410:	681b      	ldr	r3, [r3, #0]
24009412:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
24009416:	687b      	ldr	r3, [r7, #4]
24009418:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
2400941a:	687b      	ldr	r3, [r7, #4]
2400941c:	681b      	ldr	r3, [r3, #0]
2400941e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
24009422:	687b      	ldr	r3, [r7, #4]
24009424:	601a      	str	r2, [r3, #0]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
24009426:	687b      	ldr	r3, [r7, #4]
24009428:	681b      	ldr	r3, [r3, #0]
2400942a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
2400942e:	687b      	ldr	r3, [r7, #4]
24009430:	601a      	str	r2, [r3, #0]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
24009432:	687b      	ldr	r3, [r7, #4]
24009434:	681b      	ldr	r3, [r3, #0]
24009436:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
2400943a:	687b      	ldr	r3, [r7, #4]
2400943c:	601a      	str	r2, [r3, #0]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
2400943e:	687b      	ldr	r3, [r7, #4]
24009440:	681b      	ldr	r3, [r3, #0]
24009442:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
24009446:	687b      	ldr	r3, [r7, #4]
24009448:	601a      	str	r2, [r3, #0]
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> RCC_PLLCKSELR_DIVM3_Pos);
2400944a:	4b8e      	ldr	r3, [pc, #568]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400944c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400944e:	0d1b      	lsrs	r3, r3, #20
24009450:	f003 023f 	and.w	r2, r3, #63	; 0x3f
24009454:	687b      	ldr	r3, [r7, #4]
24009456:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos)+ 1U;
24009458:	4b8a      	ldr	r3, [pc, #552]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400945a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400945c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009460:	1c5a      	adds	r2, r3, #1
24009462:	687b      	ldr	r3, [r7, #4]
24009464:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos)+ 1U;
24009466:	4b87      	ldr	r3, [pc, #540]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400946a:	0e1b      	lsrs	r3, r3, #24
2400946c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24009470:	1c5a      	adds	r2, r3, #1
24009472:	687b      	ldr	r3, [r7, #4]
24009474:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos)+ 1U;
24009476:	4b83      	ldr	r3, [pc, #524]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400947a:	0a5b      	lsrs	r3, r3, #9
2400947c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24009480:	1c5a      	adds	r2, r3, #1
24009482:	687b      	ldr	r3, [r7, #4]
24009484:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos)+ 1U;
24009486:	4b7f      	ldr	r3, [pc, #508]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400948a:	0c1b      	lsrs	r3, r3, #16
2400948c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24009490:	1c5a      	adds	r2, r3, #1
24009492:	687b      	ldr	r3, [r7, #4]
24009494:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
24009496:	4b7b      	ldr	r3, [pc, #492]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400949a:	0a9b      	lsrs	r3, r3, #10
2400949c:	f003 0203 	and.w	r2, r3, #3
240094a0:	687b      	ldr	r3, [r7, #4]
240094a2:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
240094a4:	4b77      	ldr	r3, [pc, #476]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
240094a8:	0a5b      	lsrs	r3, r3, #9
240094aa:	f003 0201 	and.w	r2, r3, #1
240094ae:	687b      	ldr	r3, [r7, #4]
240094b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> RCC_PLLCKSELR_DIVM2_Pos);
240094b2:	4b74      	ldr	r3, [pc, #464]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240094b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
240094b6:	0b1b      	lsrs	r3, r3, #12
240094b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
240094bc:	687b      	ldr	r3, [r7, #4]
240094be:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos)+ 1U;
240094c0:	4b70      	ldr	r3, [pc, #448]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240094c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240094c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
240094c8:	1c5a      	adds	r2, r3, #1
240094ca:	687b      	ldr	r3, [r7, #4]
240094cc:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos)+ 1U;
240094ce:	4b6d      	ldr	r3, [pc, #436]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240094d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240094d2:	0e1b      	lsrs	r3, r3, #24
240094d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240094d8:	1c5a      	adds	r2, r3, #1
240094da:	687b      	ldr	r3, [r7, #4]
240094dc:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos)+ 1U;
240094de:	4b69      	ldr	r3, [pc, #420]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240094e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240094e2:	0a5b      	lsrs	r3, r3, #9
240094e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240094e8:	1c5a      	adds	r2, r3, #1
240094ea:	687b      	ldr	r3, [r7, #4]
240094ec:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos)+ 1U;
240094ee:	4b65      	ldr	r3, [pc, #404]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240094f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
240094f2:	0c1b      	lsrs	r3, r3, #16
240094f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
240094f8:	1c5a      	adds	r2, r3, #1
240094fa:	687b      	ldr	r3, [r7, #4]
240094fc:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
240094fe:	4b61      	ldr	r3, [pc, #388]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24009502:	099b      	lsrs	r3, r3, #6
24009504:	f003 0203 	and.w	r2, r3, #3
24009508:	687b      	ldr	r3, [r7, #4]
2400950a:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
2400950c:	4b5d      	ldr	r3, [pc, #372]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400950e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24009510:	095b      	lsrs	r3, r3, #5
24009512:	f003 0201 	and.w	r2, r3, #1
24009516:	687b      	ldr	r3, [r7, #4]
24009518:	61da      	str	r2, [r3, #28]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
2400951a:	4b5a      	ldr	r3, [pc, #360]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400951c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400951e:	f003 0238 	and.w	r2, r3, #56	; 0x38
24009522:	687b      	ldr	r3, [r7, #4]
24009524:	679a      	str	r2, [r3, #120]	; 0x78
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
24009526:	4b57      	ldr	r3, [pc, #348]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
2400952a:	f003 0207 	and.w	r2, r3, #7
2400952e:	687b      	ldr	r3, [r7, #4]
24009530:	675a      	str	r2, [r3, #116]	; 0x74
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
24009532:	4b54      	ldr	r3, [pc, #336]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009536:	f003 0207 	and.w	r2, r3, #7
2400953a:	687b      	ldr	r3, [r7, #4]
2400953c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
24009540:	4b50      	ldr	r3, [pc, #320]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24009544:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
24009548:	687b      	ldr	r3, [r7, #4]
2400954a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
2400954e:	4b4d      	ldr	r3, [pc, #308]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24009552:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
24009556:	687b      	ldr	r3, [r7, #4]
24009558:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
2400955c:	4b49      	ldr	r3, [pc, #292]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400955e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009560:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
24009564:	687b      	ldr	r3, [r7, #4]
24009566:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
2400956a:	4b46      	ldr	r3, [pc, #280]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400956c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400956e:	f403 4260 	and.w	r2, r3, #57344	; 0xe000
24009572:	687b      	ldr	r3, [r7, #4]
24009574:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
24009578:	4b42      	ldr	r3, [pc, #264]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400957a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400957c:	f003 0207 	and.w	r2, r3, #7
24009580:	687b      	ldr	r3, [r7, #4]
24009582:	655a      	str	r2, [r3, #84]	; 0x54
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
24009584:	4b3f      	ldr	r3, [pc, #252]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009588:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
2400958c:	687b      	ldr	r3, [r7, #4]
2400958e:	659a      	str	r2, [r3, #88]	; 0x58
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
24009590:	4b3c      	ldr	r3, [pc, #240]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009594:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
24009598:	687b      	ldr	r3, [r7, #4]
2400959a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
2400959e:	4b39      	ldr	r3, [pc, #228]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240095a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240095a2:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
240095a6:	687b      	ldr	r3, [r7, #4]
240095a8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
240095ac:	4b35      	ldr	r3, [pc, #212]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240095ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
240095b0:	f403 7240 	and.w	r2, r3, #768	; 0x300
240095b4:	687b      	ldr	r3, [r7, #4]
240095b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
240095ba:	4b32      	ldr	r3, [pc, #200]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240095bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240095be:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
240095c2:	687b      	ldr	r3, [r7, #4]
240095c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
240095c8:	4b2e      	ldr	r3, [pc, #184]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240095ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240095cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
240095d0:	687b      	ldr	r3, [r7, #4]
240095d2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
240095d4:	4b2b      	ldr	r3, [pc, #172]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240095d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
240095d8:	f403 7240 	and.w	r2, r3, #768	; 0x300
240095dc:	687b      	ldr	r3, [r7, #4]
240095de:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
240095e0:	4b28      	ldr	r3, [pc, #160]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240095e2:	691b      	ldr	r3, [r3, #16]
240095e4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
240095e8:	687b      	ldr	r3, [r7, #4]
240095ea:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
240095ee:	4b25      	ldr	r3, [pc, #148]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240095f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240095f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
240095f6:	687b      	ldr	r3, [r7, #4]
240095f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
240095fc:	4b21      	ldr	r3, [pc, #132]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
240095fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009600:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
24009604:	687b      	ldr	r3, [r7, #4]
24009606:	671a      	str	r2, [r3, #112]	; 0x70
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
24009608:	4b1e      	ldr	r3, [pc, #120]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400960a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400960c:	f003 7280 	and.w	r2, r3, #16777216	; 0x1000000
24009610:	687b      	ldr	r3, [r7, #4]
24009612:	669a      	str	r2, [r3, #104]	; 0x68
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
24009614:	4b1b      	ldr	r3, [pc, #108]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009618:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
2400961c:	687b      	ldr	r3, [r7, #4]
2400961e:	665a      	str	r2, [r3, #100]	; 0x64
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
24009620:	4b18      	ldr	r3, [pc, #96]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009624:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
24009628:	687b      	ldr	r3, [r7, #4]
2400962a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
2400962c:	4b15      	ldr	r3, [pc, #84]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400962e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
24009630:	f403 22e0 	and.w	r2, r3, #458752	; 0x70000
24009634:	687b      	ldr	r3, [r7, #4]
24009636:	661a      	str	r2, [r3, #96]	; 0x60
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
24009638:	4b12      	ldr	r3, [pc, #72]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400963a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
2400963c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
24009640:	687b      	ldr	r3, [r7, #4]
24009642:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
24009646:	4b0f      	ldr	r3, [pc, #60]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400964a:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
2400964e:	687b      	ldr	r3, [r7, #4]
24009650:	66da      	str	r2, [r3, #108]	; 0x6c
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
24009652:	4b0c      	ldr	r3, [pc, #48]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
24009656:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
2400965a:	687b      	ldr	r3, [r7, #4]
2400965c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
24009660:	4b08      	ldr	r3, [pc, #32]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
24009662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24009664:	f003 0203 	and.w	r2, r3, #3
24009668:	687b      	ldr	r3, [r7, #4]
2400966a:	645a      	str	r2, [r3, #68]	; 0x44
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
2400966c:	4b05      	ldr	r3, [pc, #20]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400966e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24009670:	f003 0230 	and.w	r2, r3, #48	; 0x30
24009674:	687b      	ldr	r3, [r7, #4]
24009676:	649a      	str	r2, [r3, #72]	; 0x48
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
24009678:	4b02      	ldr	r3, [pc, #8]	; (24009684 <HAL_RCCEx_GetPeriphCLKConfig+0x29c>)
2400967a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
2400967c:	e004      	b.n	24009688 <HAL_RCCEx_GetPeriphCLKConfig+0x2a0>
2400967e:	bf00      	nop
24009680:	c9fff1f7 	.word	0xc9fff1f7
24009684:	58024400 	.word	0x58024400
24009688:	f003 5240 	and.w	r2, r3, #805306368	; 0x30000000
2400968c:	687b      	ldr	r3, [r7, #4]
2400968e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
24009690:	4b0a      	ldr	r3, [pc, #40]	; (240096bc <HAL_RCCEx_GetPeriphCLKConfig+0x2d4>)
24009692:	691b      	ldr	r3, [r3, #16]
24009694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
24009698:	2b00      	cmp	r3, #0
2400969a:	d104      	bne.n	240096a6 <HAL_RCCEx_GetPeriphCLKConfig+0x2be>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
2400969c:	687b      	ldr	r3, [r7, #4]
2400969e:	2200      	movs	r2, #0
240096a0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
240096a4:	e004      	b.n	240096b0 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
240096a6:	687b      	ldr	r3, [r7, #4]
240096a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
240096ac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
240096b0:	bf00      	nop
240096b2:	370c      	adds	r7, #12
240096b4:	46bd      	mov	sp, r7
240096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
240096ba:	4770      	bx	lr
240096bc:	58024400 	.word	0x58024400

240096c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
240096c0:	b580      	push	{r7, lr}
240096c2:	b090      	sub	sp, #64	; 0x40
240096c4:	af00      	add	r7, sp, #0
240096c6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
240096c8:	687b      	ldr	r3, [r7, #4]
240096ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240096ce:	d150      	bne.n	24009772 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
240096d0:	4ba1      	ldr	r3, [pc, #644]	; (24009958 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
240096d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
240096d4:	f003 0307 	and.w	r3, r3, #7
240096d8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
240096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240096dc:	2b04      	cmp	r3, #4
240096de:	d844      	bhi.n	2400976a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
240096e0:	a201      	add	r2, pc, #4	; (adr r2, 240096e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
240096e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
240096e6:	bf00      	nop
240096e8:	240096fd 	.word	0x240096fd
240096ec:	2400970d 	.word	0x2400970d
240096f0:	2400971d 	.word	0x2400971d
240096f4:	24009765 	.word	0x24009765
240096f8:	2400972d 	.word	0x2400972d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240096fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
24009700:	4618      	mov	r0, r3
24009702:	f000 fd19 	bl	2400a138 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
24009708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2400970a:	e241      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2400970c:	f107 0318 	add.w	r3, r7, #24
24009710:	4618      	mov	r0, r3
24009712:	f000 fa79 	bl	24009c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24009716:	69bb      	ldr	r3, [r7, #24]
24009718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2400971a:	e239      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
2400971c:	f107 030c 	add.w	r3, r7, #12
24009720:	4618      	mov	r0, r3
24009722:	f000 fbbd 	bl	24009ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
24009726:	68fb      	ldr	r3, [r7, #12]
24009728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2400972a:	e231      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
2400972c:	4b8a      	ldr	r3, [pc, #552]	; (24009958 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
2400972e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24009730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24009734:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
24009736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009738:	2b00      	cmp	r3, #0
2400973a:	d102      	bne.n	24009742 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
2400973c:	4b87      	ldr	r3, [pc, #540]	; (2400995c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
2400973e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
24009740:	e226      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
24009742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009748:	d102      	bne.n	24009750 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
2400974a:	4b85      	ldr	r3, [pc, #532]	; (24009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
2400974c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2400974e:	e21f      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
24009750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009756:	d102      	bne.n	2400975e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
24009758:	4b82      	ldr	r3, [pc, #520]	; (24009964 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
2400975a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2400975c:	e218      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
2400975e:	2300      	movs	r3, #0
24009760:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009762:	e215      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24009764:	4b80      	ldr	r3, [pc, #512]	; (24009968 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
24009766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009768:	e212      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
2400976a:	2300      	movs	r3, #0
2400976c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2400976e:	bf00      	nop
24009770:	e20e      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
24009772:	687b      	ldr	r3, [r7, #4]
24009774:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
24009778:	d14f      	bne.n	2400981a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
2400977a:	4b77      	ldr	r3, [pc, #476]	; (24009958 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
2400977c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400977e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
24009782:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
24009784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
24009786:	2b80      	cmp	r3, #128	; 0x80
24009788:	d01c      	beq.n	240097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
2400978a:	2b80      	cmp	r3, #128	; 0x80
2400978c:	d804      	bhi.n	24009798 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
2400978e:	2b00      	cmp	r3, #0
24009790:	d008      	beq.n	240097a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
24009792:	2b40      	cmp	r3, #64	; 0x40
24009794:	d00e      	beq.n	240097b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
24009796:	e03c      	b.n	24009812 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
24009798:	2bc0      	cmp	r3, #192	; 0xc0
2400979a:	d037      	beq.n	2400980c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
2400979c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
240097a0:	d018      	beq.n	240097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
240097a2:	e036      	b.n	24009812 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240097a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
240097a8:	4618      	mov	r0, r3
240097aa:	f000 fcc5 	bl	2400a138 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240097ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
240097b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240097b2:	e1ed      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240097b4:	f107 0318 	add.w	r3, r7, #24
240097b8:	4618      	mov	r0, r3
240097ba:	f000 fa25 	bl	24009c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240097be:	69bb      	ldr	r3, [r7, #24]
240097c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240097c2:	e1e5      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240097c4:	f107 030c 	add.w	r3, r7, #12
240097c8:	4618      	mov	r0, r3
240097ca:	f000 fb69 	bl	24009ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240097ce:	68fb      	ldr	r3, [r7, #12]
240097d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240097d2:	e1dd      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
240097d4:	4b60      	ldr	r3, [pc, #384]	; (24009958 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
240097d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240097d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
240097dc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
240097de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240097e0:	2b00      	cmp	r3, #0
240097e2:	d102      	bne.n	240097ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
240097e4:	4b5d      	ldr	r3, [pc, #372]	; (2400995c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
240097e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
240097e8:	e1d2      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
240097ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240097ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240097f0:	d102      	bne.n	240097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
240097f2:	4b5b      	ldr	r3, [pc, #364]	; (24009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
240097f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240097f6:	e1cb      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
240097f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240097fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240097fe:	d102      	bne.n	24009806 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
24009800:	4b58      	ldr	r3, [pc, #352]	; (24009964 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
24009802:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009804:	e1c4      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
24009806:	2300      	movs	r3, #0
24009808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2400980a:	e1c1      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
2400980c:	4b56      	ldr	r3, [pc, #344]	; (24009968 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
2400980e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009810:	e1be      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
24009812:	2300      	movs	r3, #0
24009814:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009816:	bf00      	nop
24009818:	e1ba      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
2400981a:	687b      	ldr	r3, [r7, #4]
2400981c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
24009820:	d153      	bne.n	240098ca <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
24009822:	4b4d      	ldr	r3, [pc, #308]	; (24009958 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
24009824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009826:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
2400982a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
2400982c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
2400982e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24009832:	d01f      	beq.n	24009874 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
24009834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
24009838:	d805      	bhi.n	24009846 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
2400983a:	2b00      	cmp	r3, #0
2400983c:	d00a      	beq.n	24009854 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
2400983e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
24009842:	d00f      	beq.n	24009864 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
24009844:	e03d      	b.n	240098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
24009846:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
2400984a:	d037      	beq.n	240098bc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
2400984c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
24009850:	d018      	beq.n	24009884 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
24009852:	e036      	b.n	240098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24009854:	f107 0324 	add.w	r3, r7, #36	; 0x24
24009858:	4618      	mov	r0, r3
2400985a:	f000 fc6d 	bl	2400a138 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2400985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
24009860:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009862:	e195      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009864:	f107 0318 	add.w	r3, r7, #24
24009868:	4618      	mov	r0, r3
2400986a:	f000 f9cd 	bl	24009c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2400986e:	69bb      	ldr	r3, [r7, #24]
24009870:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009872:	e18d      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009874:	f107 030c 	add.w	r3, r7, #12
24009878:	4618      	mov	r0, r3
2400987a:	f000 fb11 	bl	24009ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2400987e:	68fb      	ldr	r3, [r7, #12]
24009880:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009882:	e185      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24009884:	4b34      	ldr	r3, [pc, #208]	; (24009958 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
24009886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24009888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2400988c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
2400988e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009890:	2b00      	cmp	r3, #0
24009892:	d102      	bne.n	2400989a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
24009894:	4b31      	ldr	r3, [pc, #196]	; (2400995c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
24009896:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
24009898:	e17a      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
2400989a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2400989c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
240098a0:	d102      	bne.n	240098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
240098a2:	4b2f      	ldr	r3, [pc, #188]	; (24009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
240098a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240098a6:	e173      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
240098a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
240098aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
240098ae:	d102      	bne.n	240098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
240098b0:	4b2c      	ldr	r3, [pc, #176]	; (24009964 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
240098b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240098b4:	e16c      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
240098b6:	2300      	movs	r3, #0
240098b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240098ba:	e169      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
240098bc:	4b2a      	ldr	r3, [pc, #168]	; (24009968 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
240098be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240098c0:	e166      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
240098c2:	2300      	movs	r3, #0
240098c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240098c6:	bf00      	nop
240098c8:	e162      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
240098ca:	687b      	ldr	r3, [r7, #4]
240098cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
240098d0:	d15d      	bne.n	2400998e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
240098d2:	4b21      	ldr	r3, [pc, #132]	; (24009958 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
240098d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
240098d6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
240098da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
240098dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
240098de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240098e2:	d01f      	beq.n	24009924 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
240098e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
240098e8:	d805      	bhi.n	240098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
240098ea:	2b00      	cmp	r3, #0
240098ec:	d00a      	beq.n	24009904 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
240098ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
240098f2:	d00f      	beq.n	24009914 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
240098f4:	e047      	b.n	24009986 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
240098f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
240098fa:	d041      	beq.n	24009980 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
240098fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
24009900:	d018      	beq.n	24009934 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
24009902:	e040      	b.n	24009986 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24009904:	f107 0324 	add.w	r3, r7, #36	; 0x24
24009908:	4618      	mov	r0, r3
2400990a:	f000 fc15 	bl	2400a138 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
2400990e:	6abb      	ldr	r3, [r7, #40]	; 0x28
24009910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009912:	e13d      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009914:	f107 0318 	add.w	r3, r7, #24
24009918:	4618      	mov	r0, r3
2400991a:	f000 f975 	bl	24009c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
2400991e:	69bb      	ldr	r3, [r7, #24]
24009920:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009922:	e135      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009924:	f107 030c 	add.w	r3, r7, #12
24009928:	4618      	mov	r0, r3
2400992a:	f000 fab9 	bl	24009ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
2400992e:	68fb      	ldr	r3, [r7, #12]
24009930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009932:	e12d      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24009934:	4b08      	ldr	r3, [pc, #32]	; (24009958 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
24009936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24009938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
2400993c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
2400993e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009940:	2b00      	cmp	r3, #0
24009942:	d102      	bne.n	2400994a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
24009944:	4b05      	ldr	r3, [pc, #20]	; (2400995c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
24009946:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
24009948:	e122      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
2400994a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2400994c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009950:	d10c      	bne.n	2400996c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
24009952:	4b03      	ldr	r3, [pc, #12]	; (24009960 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
24009954:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009956:	e11b      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
24009958:	58024400 	.word	0x58024400
2400995c:	03d09000 	.word	0x03d09000
24009960:	003d0900 	.word	0x003d0900
24009964:	017d7840 	.word	0x017d7840
24009968:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
2400996c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2400996e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009972:	d102      	bne.n	2400997a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
24009974:	4b89      	ldr	r3, [pc, #548]	; (24009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
24009976:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009978:	e10a      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
2400997a:	2300      	movs	r3, #0
2400997c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2400997e:	e107      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24009980:	4b87      	ldr	r3, [pc, #540]	; (24009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
24009982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009984:	e104      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
24009986:	2300      	movs	r3, #0
24009988:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
2400998a:	bf00      	nop
2400998c:	e100      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
2400998e:	687b      	ldr	r3, [r7, #4]
24009990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
24009994:	d153      	bne.n	24009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
24009996:	4b83      	ldr	r3, [pc, #524]	; (24009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
24009998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
2400999a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
2400999e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
240099a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
240099a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240099a6:	d01f      	beq.n	240099e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
240099a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
240099ac:	d805      	bhi.n	240099ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
240099ae:	2b00      	cmp	r3, #0
240099b0:	d00a      	beq.n	240099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
240099b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
240099b6:	d00f      	beq.n	240099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
240099b8:	e03d      	b.n	24009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
240099ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
240099be:	d037      	beq.n	24009a30 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
240099c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
240099c4:	d018      	beq.n	240099f8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
240099c6:	e036      	b.n	24009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
240099c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
240099cc:	4618      	mov	r0, r3
240099ce:	f000 fbb3 	bl	2400a138 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
240099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
240099d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240099d6:	e0db      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
240099d8:	f107 0318 	add.w	r3, r7, #24
240099dc:	4618      	mov	r0, r3
240099de:	f000 f913 	bl	24009c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
240099e2:	69bb      	ldr	r3, [r7, #24]
240099e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240099e6:	e0d3      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
240099e8:	f107 030c 	add.w	r3, r7, #12
240099ec:	4618      	mov	r0, r3
240099ee:	f000 fa57 	bl	24009ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
240099f2:	68fb      	ldr	r3, [r7, #12]
240099f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
240099f6:	e0cb      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
240099f8:	4b6a      	ldr	r3, [pc, #424]	; (24009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
240099fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
240099fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24009a00:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
24009a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009a04:	2b00      	cmp	r3, #0
24009a06:	d102      	bne.n	24009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
24009a08:	4b67      	ldr	r3, [pc, #412]	; (24009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
24009a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
24009a0c:	e0c0      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
24009a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009a10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009a14:	d102      	bne.n	24009a1c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
24009a16:	4b65      	ldr	r3, [pc, #404]	; (24009bac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
24009a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009a1a:	e0b9      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
24009a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009a22:	d102      	bne.n	24009a2a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
24009a24:	4b5d      	ldr	r3, [pc, #372]	; (24009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
24009a26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009a28:	e0b2      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
24009a2a:	2300      	movs	r3, #0
24009a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009a2e:	e0af      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
24009a30:	4b5b      	ldr	r3, [pc, #364]	; (24009ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
24009a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009a34:	e0ac      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
24009a36:	2300      	movs	r3, #0
24009a38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009a3a:	bf00      	nop
24009a3c:	e0a8      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
24009a3e:	687b      	ldr	r3, [r7, #4]
24009a40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
24009a44:	d13d      	bne.n	24009ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
24009a46:	4b57      	ldr	r3, [pc, #348]	; (24009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
24009a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009a4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
24009a4e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24009a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009a56:	d00c      	beq.n	24009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
24009a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
24009a5c:	d011      	beq.n	24009a82 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
24009a5e:	2b00      	cmp	r3, #0
24009a60:	d12b      	bne.n	24009aba <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009a62:	f107 0318 	add.w	r3, r7, #24
24009a66:	4618      	mov	r0, r3
24009a68:	f000 f8ce 	bl	24009c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
24009a6c:	69bb      	ldr	r3, [r7, #24]
24009a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009a70:	e08e      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009a72:	f107 030c 	add.w	r3, r7, #12
24009a76:	4618      	mov	r0, r3
24009a78:	f000 fa12 	bl	24009ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
24009a7c:	697b      	ldr	r3, [r7, #20]
24009a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009a80:	e086      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
24009a82:	4b48      	ldr	r3, [pc, #288]	; (24009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
24009a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24009a86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
24009a8a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
24009a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009a8e:	2b00      	cmp	r3, #0
24009a90:	d102      	bne.n	24009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
24009a92:	4b45      	ldr	r3, [pc, #276]	; (24009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
24009a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
24009a96:	e07b      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
24009a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009a9e:	d102      	bne.n	24009aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
24009aa0:	4b42      	ldr	r3, [pc, #264]	; (24009bac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
24009aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009aa4:	e074      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
24009aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
24009aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009aac:	d102      	bne.n	24009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
24009aae:	4b3b      	ldr	r3, [pc, #236]	; (24009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
24009ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009ab2:	e06d      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
24009ab4:	2300      	movs	r3, #0
24009ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009ab8:	e06a      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
24009aba:	2300      	movs	r3, #0
24009abc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009abe:	bf00      	nop
24009ac0:	e066      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
24009ac2:	687b      	ldr	r3, [r7, #4]
24009ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009ac8:	d11f      	bne.n	24009b0a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
24009aca:	4b36      	ldr	r3, [pc, #216]	; (24009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
24009acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
24009ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
24009ad2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24009ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24009ad6:	2b00      	cmp	r3, #0
24009ad8:	d003      	beq.n	24009ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
24009ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
24009ade:	d008      	beq.n	24009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
24009ae0:	e00f      	b.n	24009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
24009ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
24009ae6:	4618      	mov	r0, r3
24009ae8:	f000 fb26 	bl	2400a138 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
24009aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
24009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009af0:	e04e      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009af2:	f107 0318 	add.w	r3, r7, #24
24009af6:	4618      	mov	r0, r3
24009af8:	f000 f886 	bl	24009c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
24009afc:	6a3b      	ldr	r3, [r7, #32]
24009afe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009b00:	e046      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
24009b02:	2300      	movs	r3, #0
24009b04:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009b06:	bf00      	nop
24009b08:	e042      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
24009b0a:	687b      	ldr	r3, [r7, #4]
24009b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
24009b10:	d13c      	bne.n	24009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
24009b12:	4b24      	ldr	r3, [pc, #144]	; (24009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
24009b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
24009b16:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
24009b1a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
24009b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
24009b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009b22:	d01e      	beq.n	24009b62 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
24009b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
24009b28:	d805      	bhi.n	24009b36 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
24009b2a:	2b00      	cmp	r3, #0
24009b2c:	d00d      	beq.n	24009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
24009b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
24009b32:	d00e      	beq.n	24009b52 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
24009b34:	e026      	b.n	24009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
24009b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
24009b3a:	d01d      	beq.n	24009b78 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
24009b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
24009b40:	d01d      	beq.n	24009b7e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
24009b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
24009b46:	d014      	beq.n	24009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
24009b48:	e01c      	b.n	24009b84 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
24009b4a:	f000 f847 	bl	24009bdc <HAL_RCCEx_GetD3PCLK1Freq>
24009b4e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
24009b50:	e01e      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
24009b52:	f107 0318 	add.w	r3, r7, #24
24009b56:	4618      	mov	r0, r3
24009b58:	f000 f856 	bl	24009c08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
24009b5c:	69fb      	ldr	r3, [r7, #28]
24009b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009b60:	e016      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
24009b62:	f107 030c 	add.w	r3, r7, #12
24009b66:	4618      	mov	r0, r3
24009b68:	f000 f99a 	bl	24009ea0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
24009b6c:	693b      	ldr	r3, [r7, #16]
24009b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009b70:	e00e      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
24009b72:	4b0d      	ldr	r3, [pc, #52]	; (24009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
24009b74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009b76:	e00b      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
24009b78:	4b0c      	ldr	r3, [pc, #48]	; (24009bac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
24009b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009b7c:	e008      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
24009b7e:	4b07      	ldr	r3, [pc, #28]	; (24009b9c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
24009b80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009b82:	e005      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
24009b84:	2300      	movs	r3, #0
24009b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
24009b88:	bf00      	nop
24009b8a:	e001      	b.n	24009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
24009b8c:	2300      	movs	r3, #0
24009b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
24009b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
24009b92:	4618      	mov	r0, r3
24009b94:	3740      	adds	r7, #64	; 0x40
24009b96:	46bd      	mov	sp, r7
24009b98:	bd80      	pop	{r7, pc}
24009b9a:	bf00      	nop
24009b9c:	017d7840 	.word	0x017d7840
24009ba0:	00bb8000 	.word	0x00bb8000
24009ba4:	58024400 	.word	0x58024400
24009ba8:	03d09000 	.word	0x03d09000
24009bac:	003d0900 	.word	0x003d0900

24009bb0 <HAL_RCCEx_GetD1PCLK1Freq>:
  * @note   Each time D1PCLK1 changes, this function must be called to update the
  *         right D1PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D1PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD1PCLK1Freq(void)
{
24009bb0:	b580      	push	{r7, lr}
24009bb2:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1PPRE)
  /* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1PPRE)>> RCC_D1CFGR_D1PPRE_Pos] & 0x1FU));
24009bb4:	f7fe fb82 	bl	240082bc <HAL_RCC_GetHCLKFreq>
24009bb8:	4601      	mov	r1, r0
24009bba:	4b06      	ldr	r3, [pc, #24]	; (24009bd4 <HAL_RCCEx_GetD1PCLK1Freq+0x24>)
24009bbc:	699b      	ldr	r3, [r3, #24]
24009bbe:	091b      	lsrs	r3, r3, #4
24009bc0:	f003 0307 	and.w	r3, r3, #7
24009bc4:	4a04      	ldr	r2, [pc, #16]	; (24009bd8 <HAL_RCCEx_GetD1PCLK1Freq+0x28>)
24009bc6:	5cd3      	ldrb	r3, [r2, r3]
24009bc8:	f003 031f 	and.w	r3, r3, #31
24009bcc:	fa21 f303 	lsr.w	r3, r1, r3
#else
/* Get HCLK source and Compute D1PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE)>> RCC_CDCFGR1_CDPPRE_Pos] & 0x1FU));
#endif
}
24009bd0:	4618      	mov	r0, r3
24009bd2:	bd80      	pop	{r7, pc}
24009bd4:	58024400 	.word	0x58024400
24009bd8:	2400ace0 	.word	0x2400ace0

24009bdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
24009bdc:	b580      	push	{r7, lr}
24009bde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
24009be0:	f7fe fb6c 	bl	240082bc <HAL_RCC_GetHCLKFreq>
24009be4:	4601      	mov	r1, r0
24009be6:	4b06      	ldr	r3, [pc, #24]	; (24009c00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
24009be8:	6a1b      	ldr	r3, [r3, #32]
24009bea:	091b      	lsrs	r3, r3, #4
24009bec:	f003 0307 	and.w	r3, r3, #7
24009bf0:	4a04      	ldr	r2, [pc, #16]	; (24009c04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
24009bf2:	5cd3      	ldrb	r3, [r2, r3]
24009bf4:	f003 031f 	and.w	r3, r3, #31
24009bf8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
24009bfc:	4618      	mov	r0, r3
24009bfe:	bd80      	pop	{r7, pc}
24009c00:	58024400 	.word	0x58024400
24009c04:	2400ace0 	.word	0x2400ace0

24009c08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
24009c08:	b480      	push	{r7}
24009c0a:	b089      	sub	sp, #36	; 0x24
24009c0c:	af00      	add	r7, sp, #0
24009c0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009c10:	4b9d      	ldr	r3, [pc, #628]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24009c14:	f003 0303 	and.w	r3, r3, #3
24009c18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
24009c1a:	4b9b      	ldr	r3, [pc, #620]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24009c1e:	0b1b      	lsrs	r3, r3, #12
24009c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24009c24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
24009c26:	4b98      	ldr	r3, [pc, #608]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24009c2a:	091b      	lsrs	r3, r3, #4
24009c2c:	f003 0301 	and.w	r3, r3, #1
24009c30:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
24009c32:	4b95      	ldr	r3, [pc, #596]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
24009c36:	08db      	lsrs	r3, r3, #3
24009c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
24009c3c:	693a      	ldr	r2, [r7, #16]
24009c3e:	fb02 f303 	mul.w	r3, r2, r3
24009c42:	ee07 3a90 	vmov	s15, r3
24009c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009c4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
24009c4e:	697b      	ldr	r3, [r7, #20]
24009c50:	2b00      	cmp	r3, #0
24009c52:	f000 810a 	beq.w	24009e6a <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
24009c56:	69bb      	ldr	r3, [r7, #24]
24009c58:	2b01      	cmp	r3, #1
24009c5a:	d05a      	beq.n	24009d12 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
24009c5c:	2b01      	cmp	r3, #1
24009c5e:	d302      	bcc.n	24009c66 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
24009c60:	2b02      	cmp	r3, #2
24009c62:	d078      	beq.n	24009d56 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
24009c64:	e099      	b.n	24009d9a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24009c66:	4b88      	ldr	r3, [pc, #544]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009c68:	681b      	ldr	r3, [r3, #0]
24009c6a:	f003 0320 	and.w	r3, r3, #32
24009c6e:	2b00      	cmp	r3, #0
24009c70:	d02d      	beq.n	24009cce <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24009c72:	4b85      	ldr	r3, [pc, #532]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009c74:	681b      	ldr	r3, [r3, #0]
24009c76:	08db      	lsrs	r3, r3, #3
24009c78:	f003 0303 	and.w	r3, r3, #3
24009c7c:	4a83      	ldr	r2, [pc, #524]	; (24009e8c <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
24009c7e:	fa22 f303 	lsr.w	r3, r2, r3
24009c82:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24009c84:	68bb      	ldr	r3, [r7, #8]
24009c86:	ee07 3a90 	vmov	s15, r3
24009c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
24009c8e:	697b      	ldr	r3, [r7, #20]
24009c90:	ee07 3a90 	vmov	s15, r3
24009c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009c98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009c9c:	4b7a      	ldr	r3, [pc, #488]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24009ca0:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009ca4:	ee07 3a90 	vmov	s15, r3
24009ca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
24009cac:	ed97 6a03 	vldr	s12, [r7, #12]
24009cb0:	eddf 5a77 	vldr	s11, [pc, #476]	; 24009e90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
24009cb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
24009cb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
24009cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009cc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
24009cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
24009cc8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
24009ccc:	e087      	b.n	24009dde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24009cce:	697b      	ldr	r3, [r7, #20]
24009cd0:	ee07 3a90 	vmov	s15, r3
24009cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009cd8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 24009e94 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
24009cdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009ce0:	4b69      	ldr	r3, [pc, #420]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24009ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009ce8:	ee07 3a90 	vmov	s15, r3
24009cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
24009cf0:	ed97 6a03 	vldr	s12, [r7, #12]
24009cf4:	eddf 5a66 	vldr	s11, [pc, #408]	; 24009e90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
24009cf8:	eec6 7a25 	vdiv.f32	s15, s12, s11
24009cfc:	ee76 7aa7 	vadd.f32	s15, s13, s15
24009d00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
24009d08:	ee67 7a27 	vmul.f32	s15, s14, s15
24009d0c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24009d10:	e065      	b.n	24009dde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24009d12:	697b      	ldr	r3, [r7, #20]
24009d14:	ee07 3a90 	vmov	s15, r3
24009d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009d1c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 24009e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
24009d20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009d24:	4b58      	ldr	r3, [pc, #352]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24009d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009d2c:	ee07 3a90 	vmov	s15, r3
24009d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
24009d34:	ed97 6a03 	vldr	s12, [r7, #12]
24009d38:	eddf 5a55 	vldr	s11, [pc, #340]	; 24009e90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
24009d3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
24009d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
24009d44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
24009d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
24009d50:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24009d54:	e043      	b.n	24009dde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24009d56:	697b      	ldr	r3, [r7, #20]
24009d58:	ee07 3a90 	vmov	s15, r3
24009d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009d60:	eddf 6a4e 	vldr	s13, [pc, #312]	; 24009e9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
24009d64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009d68:	4b47      	ldr	r3, [pc, #284]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24009d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009d70:	ee07 3a90 	vmov	s15, r3
24009d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
24009d78:	ed97 6a03 	vldr	s12, [r7, #12]
24009d7c:	eddf 5a44 	vldr	s11, [pc, #272]	; 24009e90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
24009d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
24009d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
24009d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24009d90:	ee67 7a27 	vmul.f32	s15, s14, s15
24009d94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24009d98:	e021      	b.n	24009dde <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
24009d9a:	697b      	ldr	r3, [r7, #20]
24009d9c:	ee07 3a90 	vmov	s15, r3
24009da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009da4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 24009e98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
24009da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009dac:	4b36      	ldr	r3, [pc, #216]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24009db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009db4:	ee07 3a90 	vmov	s15, r3
24009db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
24009dbc:	ed97 6a03 	vldr	s12, [r7, #12]
24009dc0:	eddf 5a33 	vldr	s11, [pc, #204]	; 24009e90 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
24009dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
24009dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
24009dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
24009dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
24009dd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24009ddc:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
24009dde:	4b2a      	ldr	r3, [pc, #168]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24009de2:	0a5b      	lsrs	r3, r3, #9
24009de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24009de8:	ee07 3a90 	vmov	s15, r3
24009dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24009df4:	ee37 7a87 	vadd.f32	s14, s15, s14
24009df8:	edd7 6a07 	vldr	s13, [r7, #28]
24009dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009e04:	ee17 2a90 	vmov	r2, s15
24009e08:	687b      	ldr	r3, [r7, #4]
24009e0a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
24009e0c:	4b1e      	ldr	r3, [pc, #120]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24009e10:	0c1b      	lsrs	r3, r3, #16
24009e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24009e16:	ee07 3a90 	vmov	s15, r3
24009e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009e1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24009e22:	ee37 7a87 	vadd.f32	s14, s15, s14
24009e26:	edd7 6a07 	vldr	s13, [r7, #28]
24009e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009e32:	ee17 2a90 	vmov	r2, s15
24009e36:	687b      	ldr	r3, [r7, #4]
24009e38:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
24009e3a:	4b13      	ldr	r3, [pc, #76]	; (24009e88 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
24009e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
24009e3e:	0e1b      	lsrs	r3, r3, #24
24009e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
24009e44:	ee07 3a90 	vmov	s15, r3
24009e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009e4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
24009e50:	ee37 7a87 	vadd.f32	s14, s15, s14
24009e54:	edd7 6a07 	vldr	s13, [r7, #28]
24009e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
24009e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
24009e60:	ee17 2a90 	vmov	r2, s15
24009e64:	687b      	ldr	r3, [r7, #4]
24009e66:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
24009e68:	e008      	b.n	24009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
24009e6a:	687b      	ldr	r3, [r7, #4]
24009e6c:	2200      	movs	r2, #0
24009e6e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
24009e70:	687b      	ldr	r3, [r7, #4]
24009e72:	2200      	movs	r2, #0
24009e74:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
24009e76:	687b      	ldr	r3, [r7, #4]
24009e78:	2200      	movs	r2, #0
24009e7a:	609a      	str	r2, [r3, #8]
}
24009e7c:	bf00      	nop
24009e7e:	3724      	adds	r7, #36	; 0x24
24009e80:	46bd      	mov	sp, r7
24009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
24009e86:	4770      	bx	lr
24009e88:	58024400 	.word	0x58024400
24009e8c:	03d09000 	.word	0x03d09000
24009e90:	46000000 	.word	0x46000000
24009e94:	4c742400 	.word	0x4c742400
24009e98:	4a742400 	.word	0x4a742400
24009e9c:	4bbebc20 	.word	0x4bbebc20

24009ea0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
24009ea0:	b480      	push	{r7}
24009ea2:	b089      	sub	sp, #36	; 0x24
24009ea4:	af00      	add	r7, sp, #0
24009ea6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
24009ea8:	4b9d      	ldr	r3, [pc, #628]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
24009eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24009eac:	f003 0303 	and.w	r3, r3, #3
24009eb0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
24009eb2:	4b9b      	ldr	r3, [pc, #620]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
24009eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
24009eb6:	0d1b      	lsrs	r3, r3, #20
24009eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
24009ebc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
24009ebe:	4b98      	ldr	r3, [pc, #608]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
24009ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
24009ec2:	0a1b      	lsrs	r3, r3, #8
24009ec4:	f003 0301 	and.w	r3, r3, #1
24009ec8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
24009eca:	4b95      	ldr	r3, [pc, #596]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
24009ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
24009ece:	08db      	lsrs	r3, r3, #3
24009ed0:	f3c3 030c 	ubfx	r3, r3, #0, #13
24009ed4:	693a      	ldr	r2, [r7, #16]
24009ed6:	fb02 f303 	mul.w	r3, r2, r3
24009eda:	ee07 3a90 	vmov	s15, r3
24009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009ee2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
24009ee6:	697b      	ldr	r3, [r7, #20]
24009ee8:	2b00      	cmp	r3, #0
24009eea:	f000 810a 	beq.w	2400a102 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
24009eee:	69bb      	ldr	r3, [r7, #24]
24009ef0:	2b01      	cmp	r3, #1
24009ef2:	d05a      	beq.n	24009faa <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
24009ef4:	2b01      	cmp	r3, #1
24009ef6:	d302      	bcc.n	24009efe <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
24009ef8:	2b02      	cmp	r3, #2
24009efa:	d078      	beq.n	24009fee <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
24009efc:	e099      	b.n	2400a032 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
24009efe:	4b88      	ldr	r3, [pc, #544]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
24009f00:	681b      	ldr	r3, [r3, #0]
24009f02:	f003 0320 	and.w	r3, r3, #32
24009f06:	2b00      	cmp	r3, #0
24009f08:	d02d      	beq.n	24009f66 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
24009f0a:	4b85      	ldr	r3, [pc, #532]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
24009f0c:	681b      	ldr	r3, [r3, #0]
24009f0e:	08db      	lsrs	r3, r3, #3
24009f10:	f003 0303 	and.w	r3, r3, #3
24009f14:	4a83      	ldr	r2, [pc, #524]	; (2400a124 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
24009f16:	fa22 f303 	lsr.w	r3, r2, r3
24009f1a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
24009f1c:	68bb      	ldr	r3, [r7, #8]
24009f1e:	ee07 3a90 	vmov	s15, r3
24009f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
24009f26:	697b      	ldr	r3, [r7, #20]
24009f28:	ee07 3a90 	vmov	s15, r3
24009f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009f30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009f34:	4b7a      	ldr	r3, [pc, #488]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
24009f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24009f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009f3c:	ee07 3a90 	vmov	s15, r3
24009f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
24009f44:	ed97 6a03 	vldr	s12, [r7, #12]
24009f48:	eddf 5a77 	vldr	s11, [pc, #476]	; 2400a128 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
24009f4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
24009f50:	ee76 7aa7 	vadd.f32	s15, s13, s15
24009f54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009f58:	ee77 7aa6 	vadd.f32	s15, s15, s13
24009f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
24009f60:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
24009f64:	e087      	b.n	2400a076 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
24009f66:	697b      	ldr	r3, [r7, #20]
24009f68:	ee07 3a90 	vmov	s15, r3
24009f6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009f70:	eddf 6a6e 	vldr	s13, [pc, #440]	; 2400a12c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
24009f74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009f78:	4b69      	ldr	r3, [pc, #420]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
24009f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24009f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009f80:	ee07 3a90 	vmov	s15, r3
24009f84:	eef8 6a67 	vcvt.f32.u32	s13, s15
24009f88:	ed97 6a03 	vldr	s12, [r7, #12]
24009f8c:	eddf 5a66 	vldr	s11, [pc, #408]	; 2400a128 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
24009f90:	eec6 7a25 	vdiv.f32	s15, s12, s11
24009f94:	ee76 7aa7 	vadd.f32	s15, s13, s15
24009f98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009f9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
24009fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
24009fa4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24009fa8:	e065      	b.n	2400a076 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
24009faa:	697b      	ldr	r3, [r7, #20]
24009fac:	ee07 3a90 	vmov	s15, r3
24009fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009fb4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 2400a130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
24009fb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
24009fbc:	4b58      	ldr	r3, [pc, #352]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
24009fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
24009fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
24009fc4:	ee07 3a90 	vmov	s15, r3
24009fc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
24009fcc:	ed97 6a03 	vldr	s12, [r7, #12]
24009fd0:	eddf 5a55 	vldr	s11, [pc, #340]	; 2400a128 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
24009fd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
24009fd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
24009fdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
24009fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
24009fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
24009fe8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
24009fec:	e043      	b.n	2400a076 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
24009fee:	697b      	ldr	r3, [r7, #20]
24009ff0:	ee07 3a90 	vmov	s15, r3
24009ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
24009ff8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 2400a134 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
24009ffc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400a000:	4b47      	ldr	r3, [pc, #284]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
2400a002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400a004:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a008:	ee07 3a90 	vmov	s15, r3
2400a00c:	eef8 6a67 	vcvt.f32.u32	s13, s15
2400a010:	ed97 6a03 	vldr	s12, [r7, #12]
2400a014:	eddf 5a44 	vldr	s11, [pc, #272]	; 2400a128 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
2400a018:	eec6 7a25 	vdiv.f32	s15, s12, s11
2400a01c:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400a020:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400a024:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a028:	ee67 7a27 	vmul.f32	s15, s14, s15
2400a02c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2400a030:	e021      	b.n	2400a076 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
2400a032:	697b      	ldr	r3, [r7, #20]
2400a034:	ee07 3a90 	vmov	s15, r3
2400a038:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a03c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 2400a130 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
2400a040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400a044:	4b36      	ldr	r3, [pc, #216]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
2400a046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400a048:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a04c:	ee07 3a90 	vmov	s15, r3
2400a050:	eef8 6a67 	vcvt.f32.u32	s13, s15
2400a054:	ed97 6a03 	vldr	s12, [r7, #12]
2400a058:	eddf 5a33 	vldr	s11, [pc, #204]	; 2400a128 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
2400a05c:	eec6 7a25 	vdiv.f32	s15, s12, s11
2400a060:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400a064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400a068:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a06c:	ee67 7a27 	vmul.f32	s15, s14, s15
2400a070:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2400a074:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
2400a076:	4b2a      	ldr	r3, [pc, #168]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
2400a078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400a07a:	0a5b      	lsrs	r3, r3, #9
2400a07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400a080:	ee07 3a90 	vmov	s15, r3
2400a084:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a088:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400a08c:	ee37 7a87 	vadd.f32	s14, s15, s14
2400a090:	edd7 6a07 	vldr	s13, [r7, #28]
2400a094:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400a098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400a09c:	ee17 2a90 	vmov	r2, s15
2400a0a0:	687b      	ldr	r3, [r7, #4]
2400a0a2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
2400a0a4:	4b1e      	ldr	r3, [pc, #120]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
2400a0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400a0a8:	0c1b      	lsrs	r3, r3, #16
2400a0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400a0ae:	ee07 3a90 	vmov	s15, r3
2400a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a0b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400a0ba:	ee37 7a87 	vadd.f32	s14, s15, s14
2400a0be:	edd7 6a07 	vldr	s13, [r7, #28]
2400a0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400a0c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400a0ca:	ee17 2a90 	vmov	r2, s15
2400a0ce:	687b      	ldr	r3, [r7, #4]
2400a0d0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
2400a0d2:	4b13      	ldr	r3, [pc, #76]	; (2400a120 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
2400a0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2400a0d6:	0e1b      	lsrs	r3, r3, #24
2400a0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400a0dc:	ee07 3a90 	vmov	s15, r3
2400a0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a0e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400a0e8:	ee37 7a87 	vadd.f32	s14, s15, s14
2400a0ec:	edd7 6a07 	vldr	s13, [r7, #28]
2400a0f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400a0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400a0f8:	ee17 2a90 	vmov	r2, s15
2400a0fc:	687b      	ldr	r3, [r7, #4]
2400a0fe:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
2400a100:	e008      	b.n	2400a114 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
2400a102:	687b      	ldr	r3, [r7, #4]
2400a104:	2200      	movs	r2, #0
2400a106:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
2400a108:	687b      	ldr	r3, [r7, #4]
2400a10a:	2200      	movs	r2, #0
2400a10c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
2400a10e:	687b      	ldr	r3, [r7, #4]
2400a110:	2200      	movs	r2, #0
2400a112:	609a      	str	r2, [r3, #8]
}
2400a114:	bf00      	nop
2400a116:	3724      	adds	r7, #36	; 0x24
2400a118:	46bd      	mov	sp, r7
2400a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a11e:	4770      	bx	lr
2400a120:	58024400 	.word	0x58024400
2400a124:	03d09000 	.word	0x03d09000
2400a128:	46000000 	.word	0x46000000
2400a12c:	4c742400 	.word	0x4c742400
2400a130:	4a742400 	.word	0x4a742400
2400a134:	4bbebc20 	.word	0x4bbebc20

2400a138 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
2400a138:	b480      	push	{r7}
2400a13a:	b089      	sub	sp, #36	; 0x24
2400a13c:	af00      	add	r7, sp, #0
2400a13e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
2400a140:	4b9d      	ldr	r3, [pc, #628]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400a144:	f003 0303 	and.w	r3, r3, #3
2400a148:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
2400a14a:	4b9b      	ldr	r3, [pc, #620]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400a14e:	091b      	lsrs	r3, r3, #4
2400a150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
2400a154:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
2400a156:	4b98      	ldr	r3, [pc, #608]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400a15a:	f003 0301 	and.w	r3, r3, #1
2400a15e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
2400a160:	4b95      	ldr	r3, [pc, #596]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
2400a164:	08db      	lsrs	r3, r3, #3
2400a166:	f3c3 030c 	ubfx	r3, r3, #0, #13
2400a16a:	693a      	ldr	r2, [r7, #16]
2400a16c:	fb02 f303 	mul.w	r3, r2, r3
2400a170:	ee07 3a90 	vmov	s15, r3
2400a174:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a178:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
2400a17c:	697b      	ldr	r3, [r7, #20]
2400a17e:	2b00      	cmp	r3, #0
2400a180:	f000 810a 	beq.w	2400a398 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
2400a184:	69bb      	ldr	r3, [r7, #24]
2400a186:	2b01      	cmp	r3, #1
2400a188:	d05a      	beq.n	2400a240 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
2400a18a:	2b01      	cmp	r3, #1
2400a18c:	d302      	bcc.n	2400a194 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
2400a18e:	2b02      	cmp	r3, #2
2400a190:	d078      	beq.n	2400a284 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
2400a192:	e099      	b.n	2400a2c8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2400a194:	4b88      	ldr	r3, [pc, #544]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a196:	681b      	ldr	r3, [r3, #0]
2400a198:	f003 0320 	and.w	r3, r3, #32
2400a19c:	2b00      	cmp	r3, #0
2400a19e:	d02d      	beq.n	2400a1fc <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
2400a1a0:	4b85      	ldr	r3, [pc, #532]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a1a2:	681b      	ldr	r3, [r3, #0]
2400a1a4:	08db      	lsrs	r3, r3, #3
2400a1a6:	f003 0303 	and.w	r3, r3, #3
2400a1aa:	4a84      	ldr	r2, [pc, #528]	; (2400a3bc <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
2400a1ac:	fa22 f303 	lsr.w	r3, r2, r3
2400a1b0:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2400a1b2:	68bb      	ldr	r3, [r7, #8]
2400a1b4:	ee07 3a90 	vmov	s15, r3
2400a1b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
2400a1bc:	697b      	ldr	r3, [r7, #20]
2400a1be:	ee07 3a90 	vmov	s15, r3
2400a1c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a1c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400a1ca:	4b7b      	ldr	r3, [pc, #492]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400a1ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a1d2:	ee07 3a90 	vmov	s15, r3
2400a1d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
2400a1da:	ed97 6a03 	vldr	s12, [r7, #12]
2400a1de:	eddf 5a78 	vldr	s11, [pc, #480]	; 2400a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
2400a1e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
2400a1e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400a1ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400a1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
2400a1f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
2400a1fa:	e087      	b.n	2400a30c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2400a1fc:	697b      	ldr	r3, [r7, #20]
2400a1fe:	ee07 3a90 	vmov	s15, r3
2400a202:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a206:	eddf 6a6f 	vldr	s13, [pc, #444]	; 2400a3c4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
2400a20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400a20e:	4b6a      	ldr	r3, [pc, #424]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400a212:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a216:	ee07 3a90 	vmov	s15, r3
2400a21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
2400a21e:	ed97 6a03 	vldr	s12, [r7, #12]
2400a222:	eddf 5a67 	vldr	s11, [pc, #412]	; 2400a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
2400a226:	eec6 7a25 	vdiv.f32	s15, s12, s11
2400a22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400a22e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400a232:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a236:	ee67 7a27 	vmul.f32	s15, s14, s15
2400a23a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2400a23e:	e065      	b.n	2400a30c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2400a240:	697b      	ldr	r3, [r7, #20]
2400a242:	ee07 3a90 	vmov	s15, r3
2400a246:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a24a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 2400a3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
2400a24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400a252:	4b59      	ldr	r3, [pc, #356]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400a256:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a25a:	ee07 3a90 	vmov	s15, r3
2400a25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
2400a262:	ed97 6a03 	vldr	s12, [r7, #12]
2400a266:	eddf 5a56 	vldr	s11, [pc, #344]	; 2400a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
2400a26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
2400a26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400a272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400a276:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a27a:	ee67 7a27 	vmul.f32	s15, s14, s15
2400a27e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2400a282:	e043      	b.n	2400a30c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2400a284:	697b      	ldr	r3, [r7, #20]
2400a286:	ee07 3a90 	vmov	s15, r3
2400a28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a28e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 2400a3cc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
2400a292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400a296:	4b48      	ldr	r3, [pc, #288]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400a29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a29e:	ee07 3a90 	vmov	s15, r3
2400a2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
2400a2a6:	ed97 6a03 	vldr	s12, [r7, #12]
2400a2aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 2400a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
2400a2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
2400a2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400a2b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400a2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a2be:	ee67 7a27 	vmul.f32	s15, s14, s15
2400a2c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2400a2c6:	e021      	b.n	2400a30c <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
2400a2c8:	697b      	ldr	r3, [r7, #20]
2400a2ca:	ee07 3a90 	vmov	s15, r3
2400a2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a2d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 2400a3c8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
2400a2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
2400a2da:	4b37      	ldr	r3, [pc, #220]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400a2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
2400a2e2:	ee07 3a90 	vmov	s15, r3
2400a2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
2400a2ea:	ed97 6a03 	vldr	s12, [r7, #12]
2400a2ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 2400a3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
2400a2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
2400a2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
2400a2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
2400a2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
2400a302:	ee67 7a27 	vmul.f32	s15, s14, s15
2400a306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
2400a30a:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
2400a30c:	4b2a      	ldr	r3, [pc, #168]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a30e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400a310:	0a5b      	lsrs	r3, r3, #9
2400a312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400a316:	ee07 3a90 	vmov	s15, r3
2400a31a:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a31e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400a322:	ee37 7a87 	vadd.f32	s14, s15, s14
2400a326:	edd7 6a07 	vldr	s13, [r7, #28]
2400a32a:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400a32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400a332:	ee17 2a90 	vmov	r2, s15
2400a336:	687b      	ldr	r3, [r7, #4]
2400a338:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
2400a33a:	4b1f      	ldr	r3, [pc, #124]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400a33e:	0c1b      	lsrs	r3, r3, #16
2400a340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400a344:	ee07 3a90 	vmov	s15, r3
2400a348:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a34c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400a350:	ee37 7a87 	vadd.f32	s14, s15, s14
2400a354:	edd7 6a07 	vldr	s13, [r7, #28]
2400a358:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400a35c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400a360:	ee17 2a90 	vmov	r2, s15
2400a364:	687b      	ldr	r3, [r7, #4]
2400a366:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
2400a368:	4b13      	ldr	r3, [pc, #76]	; (2400a3b8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
2400a36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2400a36c:	0e1b      	lsrs	r3, r3, #24
2400a36e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
2400a372:	ee07 3a90 	vmov	s15, r3
2400a376:	eef8 7a67 	vcvt.f32.u32	s15, s15
2400a37a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2400a37e:	ee37 7a87 	vadd.f32	s14, s15, s14
2400a382:	edd7 6a07 	vldr	s13, [r7, #28]
2400a386:	eec6 7a87 	vdiv.f32	s15, s13, s14
2400a38a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2400a38e:	ee17 2a90 	vmov	r2, s15
2400a392:	687b      	ldr	r3, [r7, #4]
2400a394:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
2400a396:	e008      	b.n	2400a3aa <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
2400a398:	687b      	ldr	r3, [r7, #4]
2400a39a:	2200      	movs	r2, #0
2400a39c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
2400a39e:	687b      	ldr	r3, [r7, #4]
2400a3a0:	2200      	movs	r2, #0
2400a3a2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
2400a3a4:	687b      	ldr	r3, [r7, #4]
2400a3a6:	2200      	movs	r2, #0
2400a3a8:	609a      	str	r2, [r3, #8]
}
2400a3aa:	bf00      	nop
2400a3ac:	3724      	adds	r7, #36	; 0x24
2400a3ae:	46bd      	mov	sp, r7
2400a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a3b4:	4770      	bx	lr
2400a3b6:	bf00      	nop
2400a3b8:	58024400 	.word	0x58024400
2400a3bc:	03d09000 	.word	0x03d09000
2400a3c0:	46000000 	.word	0x46000000
2400a3c4:	4c742400 	.word	0x4c742400
2400a3c8:	4a742400 	.word	0x4a742400
2400a3cc:	4bbebc20 	.word	0x4bbebc20

2400a3d0 <HAL_RCCEx_GetD1SysClockFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System current Core Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCCEx_GetD1SysClockFreq(void)
{
2400a3d0:	b580      	push	{r7, lr}
2400a3d2:	b082      	sub	sp, #8
2400a3d4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
2400a3d6:	f7fd fdff 	bl	24007fd8 <HAL_RCC_GetSysClockFreq>
2400a3da:	4601      	mov	r1, r0
2400a3dc:	4b10      	ldr	r3, [pc, #64]	; (2400a420 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
2400a3de:	699b      	ldr	r3, [r3, #24]
2400a3e0:	0a1b      	lsrs	r3, r3, #8
2400a3e2:	f003 030f 	and.w	r3, r3, #15
2400a3e6:	4a0f      	ldr	r2, [pc, #60]	; (2400a424 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
2400a3e8:	5cd3      	ldrb	r3, [r2, r3]
2400a3ea:	f003 031f 	and.w	r3, r3, #31
2400a3ee:	fa21 f303 	lsr.w	r3, r1, r3
2400a3f2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
2400a3f4:	4b0a      	ldr	r3, [pc, #40]	; (2400a420 <HAL_RCCEx_GetD1SysClockFreq+0x50>)
2400a3f6:	699b      	ldr	r3, [r3, #24]
2400a3f8:	f003 030f 	and.w	r3, r3, #15
2400a3fc:	4a09      	ldr	r2, [pc, #36]	; (2400a424 <HAL_RCCEx_GetD1SysClockFreq+0x54>)
2400a3fe:	5cd3      	ldrb	r3, [r2, r3]
2400a400:	f003 031f 	and.w	r3, r3, #31
2400a404:	687a      	ldr	r2, [r7, #4]
2400a406:	fa22 f303 	lsr.w	r3, r2, r3
2400a40a:	4a07      	ldr	r2, [pc, #28]	; (2400a428 <HAL_RCCEx_GetD1SysClockFreq+0x58>)
2400a40c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
2400a40e:	4a07      	ldr	r2, [pc, #28]	; (2400a42c <HAL_RCCEx_GetD1SysClockFreq+0x5c>)
2400a410:	687b      	ldr	r3, [r7, #4]
2400a412:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return common_system_clock;
2400a414:	687b      	ldr	r3, [r7, #4]
}
2400a416:	4618      	mov	r0, r3
2400a418:	3708      	adds	r7, #8
2400a41a:	46bd      	mov	sp, r7
2400a41c:	bd80      	pop	{r7, pc}
2400a41e:	bf00      	nop
2400a420:	58024400 	.word	0x58024400
2400a424:	2400ace0 	.word	0x2400ace0
2400a428:	240004a8 	.word	0x240004a8
2400a42c:	240004a4 	.word	0x240004a4

2400a430 <HAL_RCCEx_EnableLSECSS>:
  *         with HAL_RCC_OscConfig() and the LSE oscillator clock is to be selected as RTC
  *         clock with HAL_RCCEx_PeriphCLKConfig().
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS(void)
{
2400a430:	b480      	push	{r7}
2400a432:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
2400a434:	4b05      	ldr	r3, [pc, #20]	; (2400a44c <HAL_RCCEx_EnableLSECSS+0x1c>)
2400a436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400a438:	4a04      	ldr	r2, [pc, #16]	; (2400a44c <HAL_RCCEx_EnableLSECSS+0x1c>)
2400a43a:	f043 0320 	orr.w	r3, r3, #32
2400a43e:	6713      	str	r3, [r2, #112]	; 0x70
}
2400a440:	bf00      	nop
2400a442:	46bd      	mov	sp, r7
2400a444:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a448:	4770      	bx	lr
2400a44a:	bf00      	nop
2400a44c:	58024400 	.word	0x58024400

2400a450 <HAL_RCCEx_DisableLSECSS>:
  * @brief  Disables the LSE Clock Security System.
  * @note   LSE Clock Security System can only be disabled after a LSE failure detection.
  * @retval None
  */
void HAL_RCCEx_DisableLSECSS(void)
{
2400a450:	b480      	push	{r7}
2400a452:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
2400a454:	4b08      	ldr	r3, [pc, #32]	; (2400a478 <HAL_RCCEx_DisableLSECSS+0x28>)
2400a456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400a458:	4a07      	ldr	r2, [pc, #28]	; (2400a478 <HAL_RCCEx_DisableLSECSS+0x28>)
2400a45a:	f023 0320 	bic.w	r3, r3, #32
2400a45e:	6713      	str	r3, [r2, #112]	; 0x70
  /* Disable LSE CSS IT if any */
  __HAL_RCC_DISABLE_IT(RCC_IT_LSECSS);
2400a460:	4b05      	ldr	r3, [pc, #20]	; (2400a478 <HAL_RCCEx_DisableLSECSS+0x28>)
2400a462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400a464:	4a04      	ldr	r2, [pc, #16]	; (2400a478 <HAL_RCCEx_DisableLSECSS+0x28>)
2400a466:	f423 7300 	bic.w	r3, r3, #512	; 0x200
2400a46a:	6613      	str	r3, [r2, #96]	; 0x60
}
2400a46c:	bf00      	nop
2400a46e:	46bd      	mov	sp, r7
2400a470:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a474:	4770      	bx	lr
2400a476:	bf00      	nop
2400a478:	58024400 	.word	0x58024400

2400a47c <HAL_RCCEx_EnableLSECSS_IT>:
  * @brief  Enable the LSE Clock Security System Interrupt & corresponding EXTI line.
  * @note   LSE Clock Security System Interrupt is mapped on EXTI line 18
  * @retval None
  */
void HAL_RCCEx_EnableLSECSS_IT(void)
{
2400a47c:	b480      	push	{r7}
2400a47e:	af00      	add	r7, sp, #0
  /* Enable LSE CSS */
  SET_BIT(RCC->BDCR, RCC_BDCR_LSECSSON) ;
2400a480:	4b11      	ldr	r3, [pc, #68]	; (2400a4c8 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
2400a482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
2400a484:	4a10      	ldr	r2, [pc, #64]	; (2400a4c8 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
2400a486:	f043 0320 	orr.w	r3, r3, #32
2400a48a:	6713      	str	r3, [r2, #112]	; 0x70

  /* Enable LSE CSS IT */
  __HAL_RCC_ENABLE_IT(RCC_IT_LSECSS);
2400a48c:	4b0e      	ldr	r3, [pc, #56]	; (2400a4c8 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
2400a48e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2400a490:	4a0d      	ldr	r2, [pc, #52]	; (2400a4c8 <HAL_RCCEx_EnableLSECSS_IT+0x4c>)
2400a492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
2400a496:	6613      	str	r3, [r2, #96]	; 0x60

  /* Enable IT on EXTI Line 18 */
#if defined(DUAL_CORE) && defined(CORE_CM4)
  __HAL_RCC_C2_LSECSS_EXTI_ENABLE_IT();
#else
  __HAL_RCC_LSECSS_EXTI_ENABLE_IT();
2400a498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400a49c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2400a4a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400a4a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400a4a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* DUAL_CORE && CORE_CM4 */
  __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();
2400a4ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
2400a4b0:	681b      	ldr	r3, [r3, #0]
2400a4b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
2400a4b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
2400a4ba:	6013      	str	r3, [r2, #0]
}
2400a4bc:	bf00      	nop
2400a4be:	46bd      	mov	sp, r7
2400a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a4c4:	4770      	bx	lr
2400a4c6:	bf00      	nop
2400a4c8:	58024400 	.word	0x58024400

2400a4cc <HAL_RCCEx_WakeUpStopCLKConfig>:
  * @note   This function shall not be called after the Clock Security System on HSE has been
  *         enabled.
  * @retval None
  */
void HAL_RCCEx_WakeUpStopCLKConfig(uint32_t WakeUpClk)
{
2400a4cc:	b480      	push	{r7}
2400a4ce:	b083      	sub	sp, #12
2400a4d0:	af00      	add	r7, sp, #0
2400a4d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_WAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(WakeUpClk);
2400a4d4:	4b06      	ldr	r3, [pc, #24]	; (2400a4f0 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
2400a4d6:	691b      	ldr	r3, [r3, #16]
2400a4d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
2400a4dc:	4904      	ldr	r1, [pc, #16]	; (2400a4f0 <HAL_RCCEx_WakeUpStopCLKConfig+0x24>)
2400a4de:	687b      	ldr	r3, [r7, #4]
2400a4e0:	4313      	orrs	r3, r2
2400a4e2:	610b      	str	r3, [r1, #16]
}
2400a4e4:	bf00      	nop
2400a4e6:	370c      	adds	r7, #12
2400a4e8:	46bd      	mov	sp, r7
2400a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a4ee:	4770      	bx	lr
2400a4f0:	58024400 	.word	0x58024400

2400a4f4 <HAL_RCCEx_KerWakeUpStopCLKConfig>:
  *            @arg RCC_STOP_KERWAKEUPCLOCK_CSI: CSI oscillator selection
  *            @arg RCC_STOP_KERWAKEUPCLOCK_HSI: HSI oscillator selection
  * @retval None
  */
void HAL_RCCEx_KerWakeUpStopCLKConfig(uint32_t WakeUpClk)
{
2400a4f4:	b480      	push	{r7}
2400a4f6:	b083      	sub	sp, #12
2400a4f8:	af00      	add	r7, sp, #0
2400a4fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_STOP_KERWAKEUPCLOCK(WakeUpClk));

  __HAL_RCC_KERWAKEUPSTOP_CLK_CONFIG(WakeUpClk);
2400a4fc:	4b06      	ldr	r3, [pc, #24]	; (2400a518 <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
2400a4fe:	691b      	ldr	r3, [r3, #16]
2400a500:	f023 0280 	bic.w	r2, r3, #128	; 0x80
2400a504:	4904      	ldr	r1, [pc, #16]	; (2400a518 <HAL_RCCEx_KerWakeUpStopCLKConfig+0x24>)
2400a506:	687b      	ldr	r3, [r7, #4]
2400a508:	4313      	orrs	r3, r2
2400a50a:	610b      	str	r3, [r1, #16]
}
2400a50c:	bf00      	nop
2400a50e:	370c      	adds	r7, #12
2400a510:	46bd      	mov	sp, r7
2400a512:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a516:	4770      	bx	lr
2400a518:	58024400 	.word	0x58024400

2400a51c <HAL_RCCEx_WWDGxSysResetConfig>:
  * @note   This bit can be set by software but is cleared by hardware during a system reset
  *
  * @retval None
  */
void HAL_RCCEx_WWDGxSysResetConfig(uint32_t RCC_WWDGx)
{
2400a51c:	b480      	push	{r7}
2400a51e:	b083      	sub	sp, #12
2400a520:	af00      	add	r7, sp, #0
2400a522:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_SCOPE_WWDG(RCC_WWDGx));
  SET_BIT(RCC->GCR, RCC_WWDGx) ;
2400a524:	4b06      	ldr	r3, [pc, #24]	; (2400a540 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
2400a526:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
2400a52a:	4905      	ldr	r1, [pc, #20]	; (2400a540 <HAL_RCCEx_WWDGxSysResetConfig+0x24>)
2400a52c:	687b      	ldr	r3, [r7, #4]
2400a52e:	4313      	orrs	r3, r2
2400a530:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
}
2400a534:	bf00      	nop
2400a536:	370c      	adds	r7, #12
2400a538:	46bd      	mov	sp, r7
2400a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a53e:	4770      	bx	lr
2400a540:	58024400 	.word	0x58024400

2400a544 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
2400a544:	b580      	push	{r7, lr}
2400a546:	b084      	sub	sp, #16
2400a548:	af00      	add	r7, sp, #0
2400a54a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
2400a54c:	4b26      	ldr	r3, [pc, #152]	; (2400a5e8 <HAL_RCCEx_CRSConfig+0xa4>)
2400a54e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2400a552:	4a25      	ldr	r2, [pc, #148]	; (2400a5e8 <HAL_RCCEx_CRSConfig+0xa4>)
2400a554:	f043 0302 	orr.w	r3, r3, #2
2400a558:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
2400a55c:	4b22      	ldr	r3, [pc, #136]	; (2400a5e8 <HAL_RCCEx_CRSConfig+0xa4>)
2400a55e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2400a562:	4a21      	ldr	r2, [pc, #132]	; (2400a5e8 <HAL_RCCEx_CRSConfig+0xa4>)
2400a564:	f023 0302 	bic.w	r3, r3, #2
2400a568:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
2400a56c:	f7f7 febe 	bl	240022ec <HAL_GetREVID>
2400a570:	4602      	mov	r2, r0
2400a572:	f241 0303 	movw	r3, #4099	; 0x1003
2400a576:	429a      	cmp	r2, r3
2400a578:	d80b      	bhi.n	2400a592 <HAL_RCCEx_CRSConfig+0x4e>
2400a57a:	687b      	ldr	r3, [r7, #4]
2400a57c:	685b      	ldr	r3, [r3, #4]
2400a57e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
2400a582:	d106      	bne.n	2400a592 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
2400a584:	687b      	ldr	r3, [r7, #4]
2400a586:	681a      	ldr	r2, [r3, #0]
2400a588:	687b      	ldr	r3, [r7, #4]
2400a58a:	689b      	ldr	r3, [r3, #8]
2400a58c:	4313      	orrs	r3, r2
2400a58e:	60fb      	str	r3, [r7, #12]
2400a590:	e008      	b.n	2400a5a4 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
2400a592:	687b      	ldr	r3, [r7, #4]
2400a594:	681a      	ldr	r2, [r3, #0]
2400a596:	687b      	ldr	r3, [r7, #4]
2400a598:	685b      	ldr	r3, [r3, #4]
2400a59a:	431a      	orrs	r2, r3
2400a59c:	687b      	ldr	r3, [r7, #4]
2400a59e:	689b      	ldr	r3, [r3, #8]
2400a5a0:	4313      	orrs	r3, r2
2400a5a2:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
2400a5a4:	687b      	ldr	r3, [r7, #4]
2400a5a6:	68db      	ldr	r3, [r3, #12]
2400a5a8:	68fa      	ldr	r2, [r7, #12]
2400a5aa:	4313      	orrs	r3, r2
2400a5ac:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
2400a5ae:	687b      	ldr	r3, [r7, #4]
2400a5b0:	691b      	ldr	r3, [r3, #16]
2400a5b2:	041b      	lsls	r3, r3, #16
2400a5b4:	68fa      	ldr	r2, [r7, #12]
2400a5b6:	4313      	orrs	r3, r2
2400a5b8:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
2400a5ba:	4a0c      	ldr	r2, [pc, #48]	; (2400a5ec <HAL_RCCEx_CRSConfig+0xa8>)
2400a5bc:	68fb      	ldr	r3, [r7, #12]
2400a5be:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
2400a5c0:	4b0a      	ldr	r3, [pc, #40]	; (2400a5ec <HAL_RCCEx_CRSConfig+0xa8>)
2400a5c2:	681b      	ldr	r3, [r3, #0]
2400a5c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
2400a5c8:	687b      	ldr	r3, [r7, #4]
2400a5ca:	695b      	ldr	r3, [r3, #20]
2400a5cc:	021b      	lsls	r3, r3, #8
2400a5ce:	4907      	ldr	r1, [pc, #28]	; (2400a5ec <HAL_RCCEx_CRSConfig+0xa8>)
2400a5d0:	4313      	orrs	r3, r2
2400a5d2:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
2400a5d4:	4b05      	ldr	r3, [pc, #20]	; (2400a5ec <HAL_RCCEx_CRSConfig+0xa8>)
2400a5d6:	681b      	ldr	r3, [r3, #0]
2400a5d8:	4a04      	ldr	r2, [pc, #16]	; (2400a5ec <HAL_RCCEx_CRSConfig+0xa8>)
2400a5da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
2400a5de:	6013      	str	r3, [r2, #0]
}
2400a5e0:	bf00      	nop
2400a5e2:	3710      	adds	r7, #16
2400a5e4:	46bd      	mov	sp, r7
2400a5e6:	bd80      	pop	{r7, pc}
2400a5e8:	58024400 	.word	0x58024400
2400a5ec:	40008400 	.word	0x40008400

2400a5f0 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
/**
  * @brief  Generate the software synchronization event
  * @retval None
  */
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)
{
2400a5f0:	b480      	push	{r7}
2400a5f2:	af00      	add	r7, sp, #0
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
2400a5f4:	4b05      	ldr	r3, [pc, #20]	; (2400a60c <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
2400a5f6:	681b      	ldr	r3, [r3, #0]
2400a5f8:	4a04      	ldr	r2, [pc, #16]	; (2400a60c <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x1c>)
2400a5fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
2400a5fe:	6013      	str	r3, [r2, #0]
}
2400a600:	bf00      	nop
2400a602:	46bd      	mov	sp, r7
2400a604:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a608:	4770      	bx	lr
2400a60a:	bf00      	nop
2400a60c:	40008400 	.word	0x40008400

2400a610 <HAL_RCCEx_CRSGetSynchronizationInfo>:
  * @brief  Return synchronization info
  * @param  pSynchroInfo Pointer on RCC_CRSSynchroInfoTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)
{
2400a610:	b480      	push	{r7}
2400a612:	b083      	sub	sp, #12
2400a614:	af00      	add	r7, sp, #0
2400a616:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(pSynchroInfo != (void *)NULL);

  /* Get the reload value */
  pSynchroInfo->ReloadValue = (uint32_t)(READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
2400a618:	4b0e      	ldr	r3, [pc, #56]	; (2400a654 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
2400a61a:	685b      	ldr	r3, [r3, #4]
2400a61c:	b29a      	uxth	r2, r3
2400a61e:	687b      	ldr	r3, [r7, #4]
2400a620:	601a      	str	r2, [r3, #0]

  /* Get HSI48 oscillator smooth trimming */
  pSynchroInfo->HSI48CalibrationValue = (uint32_t)(READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_Pos);
2400a622:	4b0c      	ldr	r3, [pc, #48]	; (2400a654 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
2400a624:	681b      	ldr	r3, [r3, #0]
2400a626:	0a1b      	lsrs	r3, r3, #8
2400a628:	f003 023f 	and.w	r2, r3, #63	; 0x3f
2400a62c:	687b      	ldr	r3, [r7, #4]
2400a62e:	605a      	str	r2, [r3, #4]

  /* Get Frequency error capture */
  pSynchroInfo->FreqErrorCapture = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_Pos);
2400a630:	4b08      	ldr	r3, [pc, #32]	; (2400a654 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
2400a632:	689b      	ldr	r3, [r3, #8]
2400a634:	0c1b      	lsrs	r3, r3, #16
2400a636:	b29a      	uxth	r2, r3
2400a638:	687b      	ldr	r3, [r7, #4]
2400a63a:	609a      	str	r2, [r3, #8]

  /* Get Frequency error direction */
  pSynchroInfo->FreqErrorDirection = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
2400a63c:	4b05      	ldr	r3, [pc, #20]	; (2400a654 <HAL_RCCEx_CRSGetSynchronizationInfo+0x44>)
2400a63e:	689b      	ldr	r3, [r3, #8]
2400a640:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
2400a644:	687b      	ldr	r3, [r7, #4]
2400a646:	60da      	str	r2, [r3, #12]
}
2400a648:	bf00      	nop
2400a64a:	370c      	adds	r7, #12
2400a64c:	46bd      	mov	sp, r7
2400a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a652:	4770      	bx	lr
2400a654:	40008400 	.word	0x40008400

2400a658 <HAL_RCCEx_CRSWaitSynchronization>:
*            @arg @ref RCC_CRS_SYNCERR
*            @arg @ref RCC_CRS_SYNCMISS
*            @arg @ref RCC_CRS_TRIMOVF
*/
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)
{
2400a658:	b580      	push	{r7, lr}
2400a65a:	b084      	sub	sp, #16
2400a65c:	af00      	add	r7, sp, #0
2400a65e:	6078      	str	r0, [r7, #4]
  uint32_t crsstatus = RCC_CRS_NONE;
2400a660:	2300      	movs	r3, #0
2400a662:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Get time-out */
  tickstart = HAL_GetTick();
2400a664:	f7f7 fdaa 	bl	240021bc <HAL_GetTick>
2400a668:	60b8      	str	r0, [r7, #8]

  /* Wait for CRS flag or time-out detection */
  do
  {
    if(Timeout != HAL_MAX_DELAY)
2400a66a:	687b      	ldr	r3, [r7, #4]
2400a66c:	f1b3 3fff 	cmp.w	r3, #4294967295
2400a670:	d00c      	beq.n	2400a68c <HAL_RCCEx_CRSWaitSynchronization+0x34>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
2400a672:	f7f7 fda3 	bl	240021bc <HAL_GetTick>
2400a676:	4602      	mov	r2, r0
2400a678:	68bb      	ldr	r3, [r7, #8]
2400a67a:	1ad3      	subs	r3, r2, r3
2400a67c:	687a      	ldr	r2, [r7, #4]
2400a67e:	429a      	cmp	r2, r3
2400a680:	d302      	bcc.n	2400a688 <HAL_RCCEx_CRSWaitSynchronization+0x30>
2400a682:	687b      	ldr	r3, [r7, #4]
2400a684:	2b00      	cmp	r3, #0
2400a686:	d101      	bne.n	2400a68c <HAL_RCCEx_CRSWaitSynchronization+0x34>
      {
        crsstatus = RCC_CRS_TIMEOUT;
2400a688:	2301      	movs	r3, #1
2400a68a:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Check CRS SYNCOK flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
2400a68c:	4b2a      	ldr	r3, [pc, #168]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a68e:	689b      	ldr	r3, [r3, #8]
2400a690:	f003 0301 	and.w	r3, r3, #1
2400a694:	2b01      	cmp	r3, #1
2400a696:	d106      	bne.n	2400a6a6 <HAL_RCCEx_CRSWaitSynchronization+0x4e>
    {
      /* CRS SYNC event OK */
      crsstatus |= RCC_CRS_SYNCOK;
2400a698:	68fb      	ldr	r3, [r7, #12]
2400a69a:	f043 0302 	orr.w	r3, r3, #2
2400a69e:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC event OK bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
2400a6a0:	4b25      	ldr	r3, [pc, #148]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a6a2:	2201      	movs	r2, #1
2400a6a4:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNCWARN flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
2400a6a6:	4b24      	ldr	r3, [pc, #144]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a6a8:	689b      	ldr	r3, [r3, #8]
2400a6aa:	f003 0302 	and.w	r3, r3, #2
2400a6ae:	2b02      	cmp	r3, #2
2400a6b0:	d106      	bne.n	2400a6c0 <HAL_RCCEx_CRSWaitSynchronization+0x68>
    {
      /* CRS SYNC warning */
      crsstatus |= RCC_CRS_SYNCWARN;
2400a6b2:	68fb      	ldr	r3, [r7, #12]
2400a6b4:	f043 0304 	orr.w	r3, r3, #4
2400a6b8:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNCWARN bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
2400a6ba:	4b1f      	ldr	r3, [pc, #124]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a6bc:	2202      	movs	r2, #2
2400a6be:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS TRIM overflow flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
2400a6c0:	4b1d      	ldr	r3, [pc, #116]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a6c2:	689b      	ldr	r3, [r3, #8]
2400a6c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2400a6c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2400a6cc:	d106      	bne.n	2400a6dc <HAL_RCCEx_CRSWaitSynchronization+0x84>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_TRIMOVF;
2400a6ce:	68fb      	ldr	r3, [r7, #12]
2400a6d0:	f043 0320 	orr.w	r3, r3, #32
2400a6d4:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
2400a6d6:	4b18      	ldr	r3, [pc, #96]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a6d8:	2204      	movs	r2, #4
2400a6da:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Error flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
2400a6dc:	4b16      	ldr	r3, [pc, #88]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a6de:	689b      	ldr	r3, [r3, #8]
2400a6e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400a6e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
2400a6e8:	d106      	bne.n	2400a6f8 <HAL_RCCEx_CRSWaitSynchronization+0xa0>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;
2400a6ea:	68fb      	ldr	r3, [r7, #12]
2400a6ec:	f043 0308 	orr.w	r3, r3, #8
2400a6f0:	60fb      	str	r3, [r7, #12]

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
2400a6f2:	4b11      	ldr	r3, [pc, #68]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a6f4:	2204      	movs	r2, #4
2400a6f6:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS SYNC Missed flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
2400a6f8:	4b0f      	ldr	r3, [pc, #60]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a6fa:	689b      	ldr	r3, [r3, #8]
2400a6fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
2400a700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400a704:	d106      	bne.n	2400a714 <HAL_RCCEx_CRSWaitSynchronization+0xbc>
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;
2400a706:	68fb      	ldr	r3, [r7, #12]
2400a708:	f043 0310 	orr.w	r3, r3, #16
2400a70c:	60fb      	str	r3, [r7, #12]

      /* Clear CRS SYNC Missed bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
2400a70e:	4b0a      	ldr	r3, [pc, #40]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a710:	2204      	movs	r2, #4
2400a712:	60da      	str	r2, [r3, #12]
    }

    /* Check CRS Expected SYNC flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
2400a714:	4b08      	ldr	r3, [pc, #32]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a716:	689b      	ldr	r3, [r3, #8]
2400a718:	f003 0308 	and.w	r3, r3, #8
2400a71c:	2b08      	cmp	r3, #8
2400a71e:	d102      	bne.n	2400a726 <HAL_RCCEx_CRSWaitSynchronization+0xce>
    {
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
2400a720:	4b05      	ldr	r3, [pc, #20]	; (2400a738 <HAL_RCCEx_CRSWaitSynchronization+0xe0>)
2400a722:	2208      	movs	r2, #8
2400a724:	60da      	str	r2, [r3, #12]
    }
  } while(RCC_CRS_NONE == crsstatus);
2400a726:	68fb      	ldr	r3, [r7, #12]
2400a728:	2b00      	cmp	r3, #0
2400a72a:	d09e      	beq.n	2400a66a <HAL_RCCEx_CRSWaitSynchronization+0x12>

  return crsstatus;
2400a72c:	68fb      	ldr	r3, [r7, #12]
}
2400a72e:	4618      	mov	r0, r3
2400a730:	3710      	adds	r7, #16
2400a732:	46bd      	mov	sp, r7
2400a734:	bd80      	pop	{r7, pc}
2400a736:	bf00      	nop
2400a738:	40008400 	.word	0x40008400

2400a73c <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
2400a73c:	b580      	push	{r7, lr}
2400a73e:	b084      	sub	sp, #16
2400a740:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
2400a742:	2300      	movs	r3, #0
2400a744:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
2400a746:	4b33      	ldr	r3, [pc, #204]	; (2400a814 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
2400a748:	689b      	ldr	r3, [r3, #8]
2400a74a:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
2400a74c:	4b31      	ldr	r3, [pc, #196]	; (2400a814 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
2400a74e:	681b      	ldr	r3, [r3, #0]
2400a750:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if(((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
2400a752:	68bb      	ldr	r3, [r7, #8]
2400a754:	f003 0301 	and.w	r3, r3, #1
2400a758:	2b00      	cmp	r3, #0
2400a75a:	d00a      	beq.n	2400a772 <HAL_RCCEx_CRS_IRQHandler+0x36>
2400a75c:	687b      	ldr	r3, [r7, #4]
2400a75e:	f003 0301 	and.w	r3, r3, #1
2400a762:	2b00      	cmp	r3, #0
2400a764:	d005      	beq.n	2400a772 <HAL_RCCEx_CRS_IRQHandler+0x36>
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
2400a766:	4b2b      	ldr	r3, [pc, #172]	; (2400a814 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
2400a768:	2201      	movs	r2, #1
2400a76a:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
2400a76c:	f000 f854 	bl	2400a818 <HAL_RCCEx_CRS_SyncOkCallback>
2400a770:	e04b      	b.n	2400a80a <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS SYNCWARN flag  */
  else if(((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
2400a772:	68bb      	ldr	r3, [r7, #8]
2400a774:	f003 0302 	and.w	r3, r3, #2
2400a778:	2b00      	cmp	r3, #0
2400a77a:	d00a      	beq.n	2400a792 <HAL_RCCEx_CRS_IRQHandler+0x56>
2400a77c:	687b      	ldr	r3, [r7, #4]
2400a77e:	f003 0302 	and.w	r3, r3, #2
2400a782:	2b00      	cmp	r3, #0
2400a784:	d005      	beq.n	2400a792 <HAL_RCCEx_CRS_IRQHandler+0x56>
  {
    /* Clear CRS SYNCWARN flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
2400a786:	4b23      	ldr	r3, [pc, #140]	; (2400a814 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
2400a788:	2202      	movs	r2, #2
2400a78a:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
2400a78c:	f000 f84b 	bl	2400a826 <HAL_RCCEx_CRS_SyncWarnCallback>
2400a790:	e03b      	b.n	2400a80a <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Expected SYNC flag  */
  else if(((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
2400a792:	68bb      	ldr	r3, [r7, #8]
2400a794:	f003 0308 	and.w	r3, r3, #8
2400a798:	2b00      	cmp	r3, #0
2400a79a:	d00a      	beq.n	2400a7b2 <HAL_RCCEx_CRS_IRQHandler+0x76>
2400a79c:	687b      	ldr	r3, [r7, #4]
2400a79e:	f003 0308 	and.w	r3, r3, #8
2400a7a2:	2b00      	cmp	r3, #0
2400a7a4:	d005      	beq.n	2400a7b2 <HAL_RCCEx_CRS_IRQHandler+0x76>
  {
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
2400a7a6:	4b1b      	ldr	r3, [pc, #108]	; (2400a814 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
2400a7a8:	2208      	movs	r2, #8
2400a7aa:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
2400a7ac:	f000 f842 	bl	2400a834 <HAL_RCCEx_CRS_ExpectedSyncCallback>
2400a7b0:	e02b      	b.n	2400a80a <HAL_RCCEx_CRS_IRQHandler+0xce>
  }
  /* Check CRS Error flags  */
  else
  {
    if(((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
2400a7b2:	68bb      	ldr	r3, [r7, #8]
2400a7b4:	f003 0304 	and.w	r3, r3, #4
2400a7b8:	2b00      	cmp	r3, #0
2400a7ba:	d026      	beq.n	2400a80a <HAL_RCCEx_CRS_IRQHandler+0xce>
2400a7bc:	687b      	ldr	r3, [r7, #4]
2400a7be:	f003 0304 	and.w	r3, r3, #4
2400a7c2:	2b00      	cmp	r3, #0
2400a7c4:	d021      	beq.n	2400a80a <HAL_RCCEx_CRS_IRQHandler+0xce>
    {
      if((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
2400a7c6:	68bb      	ldr	r3, [r7, #8]
2400a7c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
2400a7cc:	2b00      	cmp	r3, #0
2400a7ce:	d003      	beq.n	2400a7d8 <HAL_RCCEx_CRS_IRQHandler+0x9c>
      {
        crserror |= RCC_CRS_SYNCERR;
2400a7d0:	68fb      	ldr	r3, [r7, #12]
2400a7d2:	f043 0308 	orr.w	r3, r3, #8
2400a7d6:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
2400a7d8:	68bb      	ldr	r3, [r7, #8]
2400a7da:	f403 7300 	and.w	r3, r3, #512	; 0x200
2400a7de:	2b00      	cmp	r3, #0
2400a7e0:	d003      	beq.n	2400a7ea <HAL_RCCEx_CRS_IRQHandler+0xae>
      {
        crserror |= RCC_CRS_SYNCMISS;
2400a7e2:	68fb      	ldr	r3, [r7, #12]
2400a7e4:	f043 0310 	orr.w	r3, r3, #16
2400a7e8:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
2400a7ea:	68bb      	ldr	r3, [r7, #8]
2400a7ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2400a7f0:	2b00      	cmp	r3, #0
2400a7f2:	d003      	beq.n	2400a7fc <HAL_RCCEx_CRS_IRQHandler+0xc0>
      {
        crserror |= RCC_CRS_TRIMOVF;
2400a7f4:	68fb      	ldr	r3, [r7, #12]
2400a7f6:	f043 0320 	orr.w	r3, r3, #32
2400a7fa:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
2400a7fc:	4b05      	ldr	r3, [pc, #20]	; (2400a814 <HAL_RCCEx_CRS_IRQHandler+0xd8>)
2400a7fe:	2204      	movs	r2, #4
2400a800:	60da      	str	r2, [r3, #12]

      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
2400a802:	68f8      	ldr	r0, [r7, #12]
2400a804:	f000 f81d 	bl	2400a842 <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
2400a808:	e7ff      	b.n	2400a80a <HAL_RCCEx_CRS_IRQHandler+0xce>
2400a80a:	bf00      	nop
2400a80c:	3710      	adds	r7, #16
2400a80e:	46bd      	mov	sp, r7
2400a810:	bd80      	pop	{r7, pc}
2400a812:	bf00      	nop
2400a814:	40008400 	.word	0x40008400

2400a818 <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
2400a818:	b480      	push	{r7}
2400a81a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
2400a81c:	bf00      	nop
2400a81e:	46bd      	mov	sp, r7
2400a820:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a824:	4770      	bx	lr

2400a826 <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
2400a826:	b480      	push	{r7}
2400a828:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
2400a82a:	bf00      	nop
2400a82c:	46bd      	mov	sp, r7
2400a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a832:	4770      	bx	lr

2400a834 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
2400a834:	b480      	push	{r7}
2400a836:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
2400a838:	bf00      	nop
2400a83a:	46bd      	mov	sp, r7
2400a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a840:	4770      	bx	lr

2400a842 <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
2400a842:	b480      	push	{r7}
2400a844:	b083      	sub	sp, #12
2400a846:	af00      	add	r7, sp, #0
2400a848:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
2400a84a:	bf00      	nop
2400a84c:	370c      	adds	r7, #12
2400a84e:	46bd      	mov	sp, r7
2400a850:	f85d 7b04 	ldr.w	r7, [sp], #4
2400a854:	4770      	bx	lr

2400a856 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
2400a856:	b580      	push	{r7, lr}
2400a858:	b084      	sub	sp, #16
2400a85a:	af00      	add	r7, sp, #0
2400a85c:	6078      	str	r0, [r7, #4]
2400a85e:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2400a860:	2300      	movs	r3, #0
2400a862:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400a864:	4b52      	ldr	r3, [pc, #328]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400a868:	f003 0303 	and.w	r3, r3, #3
2400a86c:	2b03      	cmp	r3, #3
2400a86e:	d101      	bne.n	2400a874 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
2400a870:	2301      	movs	r3, #1
2400a872:	e099      	b.n	2400a9a8 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
2400a874:	4b4e      	ldr	r3, [pc, #312]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a876:	681b      	ldr	r3, [r3, #0]
2400a878:	4a4d      	ldr	r2, [pc, #308]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a87a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
2400a87e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400a880:	f7f7 fc9c 	bl	240021bc <HAL_GetTick>
2400a884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2400a886:	e008      	b.n	2400a89a <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
2400a888:	f7f7 fc98 	bl	240021bc <HAL_GetTick>
2400a88c:	4602      	mov	r2, r0
2400a88e:	68bb      	ldr	r3, [r7, #8]
2400a890:	1ad3      	subs	r3, r2, r3
2400a892:	2b02      	cmp	r3, #2
2400a894:	d901      	bls.n	2400a89a <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
2400a896:	2303      	movs	r3, #3
2400a898:	e086      	b.n	2400a9a8 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
2400a89a:	4b45      	ldr	r3, [pc, #276]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a89c:	681b      	ldr	r3, [r3, #0]
2400a89e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2400a8a2:	2b00      	cmp	r3, #0
2400a8a4:	d1f0      	bne.n	2400a888 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
2400a8a6:	4b42      	ldr	r3, [pc, #264]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400a8aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
2400a8ae:	687b      	ldr	r3, [r7, #4]
2400a8b0:	681b      	ldr	r3, [r3, #0]
2400a8b2:	031b      	lsls	r3, r3, #12
2400a8b4:	493e      	ldr	r1, [pc, #248]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a8b6:	4313      	orrs	r3, r2
2400a8b8:	628b      	str	r3, [r1, #40]	; 0x28
2400a8ba:	687b      	ldr	r3, [r7, #4]
2400a8bc:	685b      	ldr	r3, [r3, #4]
2400a8be:	3b01      	subs	r3, #1
2400a8c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400a8c4:	687b      	ldr	r3, [r7, #4]
2400a8c6:	689b      	ldr	r3, [r3, #8]
2400a8c8:	3b01      	subs	r3, #1
2400a8ca:	025b      	lsls	r3, r3, #9
2400a8cc:	b29b      	uxth	r3, r3
2400a8ce:	431a      	orrs	r2, r3
2400a8d0:	687b      	ldr	r3, [r7, #4]
2400a8d2:	68db      	ldr	r3, [r3, #12]
2400a8d4:	3b01      	subs	r3, #1
2400a8d6:	041b      	lsls	r3, r3, #16
2400a8d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2400a8dc:	431a      	orrs	r2, r3
2400a8de:	687b      	ldr	r3, [r7, #4]
2400a8e0:	691b      	ldr	r3, [r3, #16]
2400a8e2:	3b01      	subs	r3, #1
2400a8e4:	061b      	lsls	r3, r3, #24
2400a8e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2400a8ea:	4931      	ldr	r1, [pc, #196]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a8ec:	4313      	orrs	r3, r2
2400a8ee:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
2400a8f0:	4b2f      	ldr	r3, [pc, #188]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400a8f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
2400a8f8:	687b      	ldr	r3, [r7, #4]
2400a8fa:	695b      	ldr	r3, [r3, #20]
2400a8fc:	492c      	ldr	r1, [pc, #176]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a8fe:	4313      	orrs	r3, r2
2400a900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
2400a902:	4b2b      	ldr	r3, [pc, #172]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400a906:	f023 0220 	bic.w	r2, r3, #32
2400a90a:	687b      	ldr	r3, [r7, #4]
2400a90c:	699b      	ldr	r3, [r3, #24]
2400a90e:	4928      	ldr	r1, [pc, #160]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a910:	4313      	orrs	r3, r2
2400a912:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
2400a914:	4b26      	ldr	r3, [pc, #152]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400a918:	4a25      	ldr	r2, [pc, #148]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a91a:	f023 0310 	bic.w	r3, r3, #16
2400a91e:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
2400a920:	4b23      	ldr	r3, [pc, #140]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
2400a924:	4b23      	ldr	r3, [pc, #140]	; (2400a9b4 <RCCEx_PLL2_Config+0x15e>)
2400a926:	4013      	ands	r3, r2
2400a928:	687a      	ldr	r2, [r7, #4]
2400a92a:	69d2      	ldr	r2, [r2, #28]
2400a92c:	00d2      	lsls	r2, r2, #3
2400a92e:	4920      	ldr	r1, [pc, #128]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a930:	4313      	orrs	r3, r2
2400a932:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
2400a934:	4b1e      	ldr	r3, [pc, #120]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400a938:	4a1d      	ldr	r2, [pc, #116]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a93a:	f043 0310 	orr.w	r3, r3, #16
2400a93e:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
2400a940:	683b      	ldr	r3, [r7, #0]
2400a942:	2b00      	cmp	r3, #0
2400a944:	d106      	bne.n	2400a954 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
2400a946:	4b1a      	ldr	r3, [pc, #104]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400a94a:	4a19      	ldr	r2, [pc, #100]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a94c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
2400a950:	62d3      	str	r3, [r2, #44]	; 0x2c
2400a952:	e00f      	b.n	2400a974 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
2400a954:	683b      	ldr	r3, [r7, #0]
2400a956:	2b01      	cmp	r3, #1
2400a958:	d106      	bne.n	2400a968 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
2400a95a:	4b15      	ldr	r3, [pc, #84]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a95c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400a95e:	4a14      	ldr	r2, [pc, #80]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
2400a964:	62d3      	str	r3, [r2, #44]	; 0x2c
2400a966:	e005      	b.n	2400a974 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
2400a968:	4b11      	ldr	r3, [pc, #68]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400a96c:	4a10      	ldr	r2, [pc, #64]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a96e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
2400a972:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
2400a974:	4b0e      	ldr	r3, [pc, #56]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a976:	681b      	ldr	r3, [r3, #0]
2400a978:	4a0d      	ldr	r2, [pc, #52]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a97a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
2400a97e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400a980:	f7f7 fc1c 	bl	240021bc <HAL_GetTick>
2400a984:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2400a986:	e008      	b.n	2400a99a <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
2400a988:	f7f7 fc18 	bl	240021bc <HAL_GetTick>
2400a98c:	4602      	mov	r2, r0
2400a98e:	68bb      	ldr	r3, [r7, #8]
2400a990:	1ad3      	subs	r3, r2, r3
2400a992:	2b02      	cmp	r3, #2
2400a994:	d901      	bls.n	2400a99a <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
2400a996:	2303      	movs	r3, #3
2400a998:	e006      	b.n	2400a9a8 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
2400a99a:	4b05      	ldr	r3, [pc, #20]	; (2400a9b0 <RCCEx_PLL2_Config+0x15a>)
2400a99c:	681b      	ldr	r3, [r3, #0]
2400a99e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
2400a9a2:	2b00      	cmp	r3, #0
2400a9a4:	d0f0      	beq.n	2400a988 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
2400a9a6:	7bfb      	ldrb	r3, [r7, #15]
}
2400a9a8:	4618      	mov	r0, r3
2400a9aa:	3710      	adds	r7, #16
2400a9ac:	46bd      	mov	sp, r7
2400a9ae:	bd80      	pop	{r7, pc}
2400a9b0:	58024400 	.word	0x58024400
2400a9b4:	ffff0007 	.word	0xffff0007

2400a9b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
2400a9b8:	b580      	push	{r7, lr}
2400a9ba:	b084      	sub	sp, #16
2400a9bc:	af00      	add	r7, sp, #0
2400a9be:	6078      	str	r0, [r7, #4]
2400a9c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
2400a9c2:	2300      	movs	r3, #0
2400a9c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
2400a9c6:	4b53      	ldr	r3, [pc, #332]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400a9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400a9ca:	f003 0303 	and.w	r3, r3, #3
2400a9ce:	2b03      	cmp	r3, #3
2400a9d0:	d101      	bne.n	2400a9d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
2400a9d2:	2301      	movs	r3, #1
2400a9d4:	e099      	b.n	2400ab0a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
2400a9d6:	4b4f      	ldr	r3, [pc, #316]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400a9d8:	681b      	ldr	r3, [r3, #0]
2400a9da:	4a4e      	ldr	r2, [pc, #312]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400a9dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
2400a9e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400a9e2:	f7f7 fbeb 	bl	240021bc <HAL_GetTick>
2400a9e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2400a9e8:	e008      	b.n	2400a9fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
2400a9ea:	f7f7 fbe7 	bl	240021bc <HAL_GetTick>
2400a9ee:	4602      	mov	r2, r0
2400a9f0:	68bb      	ldr	r3, [r7, #8]
2400a9f2:	1ad3      	subs	r3, r2, r3
2400a9f4:	2b02      	cmp	r3, #2
2400a9f6:	d901      	bls.n	2400a9fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
2400a9f8:	2303      	movs	r3, #3
2400a9fa:	e086      	b.n	2400ab0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
2400a9fc:	4b45      	ldr	r3, [pc, #276]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400a9fe:	681b      	ldr	r3, [r3, #0]
2400aa00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2400aa04:	2b00      	cmp	r3, #0
2400aa06:	d1f0      	bne.n	2400a9ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
2400aa08:	4b42      	ldr	r3, [pc, #264]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2400aa0c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
2400aa10:	687b      	ldr	r3, [r7, #4]
2400aa12:	681b      	ldr	r3, [r3, #0]
2400aa14:	051b      	lsls	r3, r3, #20
2400aa16:	493f      	ldr	r1, [pc, #252]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa18:	4313      	orrs	r3, r2
2400aa1a:	628b      	str	r3, [r1, #40]	; 0x28
2400aa1c:	687b      	ldr	r3, [r7, #4]
2400aa1e:	685b      	ldr	r3, [r3, #4]
2400aa20:	3b01      	subs	r3, #1
2400aa22:	f3c3 0208 	ubfx	r2, r3, #0, #9
2400aa26:	687b      	ldr	r3, [r7, #4]
2400aa28:	689b      	ldr	r3, [r3, #8]
2400aa2a:	3b01      	subs	r3, #1
2400aa2c:	025b      	lsls	r3, r3, #9
2400aa2e:	b29b      	uxth	r3, r3
2400aa30:	431a      	orrs	r2, r3
2400aa32:	687b      	ldr	r3, [r7, #4]
2400aa34:	68db      	ldr	r3, [r3, #12]
2400aa36:	3b01      	subs	r3, #1
2400aa38:	041b      	lsls	r3, r3, #16
2400aa3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
2400aa3e:	431a      	orrs	r2, r3
2400aa40:	687b      	ldr	r3, [r7, #4]
2400aa42:	691b      	ldr	r3, [r3, #16]
2400aa44:	3b01      	subs	r3, #1
2400aa46:	061b      	lsls	r3, r3, #24
2400aa48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
2400aa4c:	4931      	ldr	r1, [pc, #196]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa4e:	4313      	orrs	r3, r2
2400aa50:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
2400aa52:	4b30      	ldr	r3, [pc, #192]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400aa56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
2400aa5a:	687b      	ldr	r3, [r7, #4]
2400aa5c:	695b      	ldr	r3, [r3, #20]
2400aa5e:	492d      	ldr	r1, [pc, #180]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa60:	4313      	orrs	r3, r2
2400aa62:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
2400aa64:	4b2b      	ldr	r3, [pc, #172]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400aa68:	f423 7200 	bic.w	r2, r3, #512	; 0x200
2400aa6c:	687b      	ldr	r3, [r7, #4]
2400aa6e:	699b      	ldr	r3, [r3, #24]
2400aa70:	4928      	ldr	r1, [pc, #160]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa72:	4313      	orrs	r3, r2
2400aa74:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
2400aa76:	4b27      	ldr	r3, [pc, #156]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400aa7a:	4a26      	ldr	r2, [pc, #152]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2400aa80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
2400aa82:	4b24      	ldr	r3, [pc, #144]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
2400aa86:	4b24      	ldr	r3, [pc, #144]	; (2400ab18 <RCCEx_PLL3_Config+0x160>)
2400aa88:	4013      	ands	r3, r2
2400aa8a:	687a      	ldr	r2, [r7, #4]
2400aa8c:	69d2      	ldr	r2, [r2, #28]
2400aa8e:	00d2      	lsls	r2, r2, #3
2400aa90:	4920      	ldr	r1, [pc, #128]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa92:	4313      	orrs	r3, r2
2400aa94:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
2400aa96:	4b1f      	ldr	r3, [pc, #124]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400aa9a:	4a1e      	ldr	r2, [pc, #120]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aa9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
2400aaa0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
2400aaa2:	683b      	ldr	r3, [r7, #0]
2400aaa4:	2b00      	cmp	r3, #0
2400aaa6:	d106      	bne.n	2400aab6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
2400aaa8:	4b1a      	ldr	r3, [pc, #104]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400aaac:	4a19      	ldr	r2, [pc, #100]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aaae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
2400aab2:	62d3      	str	r3, [r2, #44]	; 0x2c
2400aab4:	e00f      	b.n	2400aad6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
2400aab6:	683b      	ldr	r3, [r7, #0]
2400aab8:	2b01      	cmp	r3, #1
2400aaba:	d106      	bne.n	2400aaca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
2400aabc:	4b15      	ldr	r3, [pc, #84]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400aac0:	4a14      	ldr	r2, [pc, #80]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aac2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
2400aac6:	62d3      	str	r3, [r2, #44]	; 0x2c
2400aac8:	e005      	b.n	2400aad6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
2400aaca:	4b12      	ldr	r3, [pc, #72]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
2400aace:	4a11      	ldr	r2, [pc, #68]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aad0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
2400aad4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
2400aad6:	4b0f      	ldr	r3, [pc, #60]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aad8:	681b      	ldr	r3, [r3, #0]
2400aada:	4a0e      	ldr	r2, [pc, #56]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aadc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
2400aae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
2400aae2:	f7f7 fb6b 	bl	240021bc <HAL_GetTick>
2400aae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2400aae8:	e008      	b.n	2400aafc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
2400aaea:	f7f7 fb67 	bl	240021bc <HAL_GetTick>
2400aaee:	4602      	mov	r2, r0
2400aaf0:	68bb      	ldr	r3, [r7, #8]
2400aaf2:	1ad3      	subs	r3, r2, r3
2400aaf4:	2b02      	cmp	r3, #2
2400aaf6:	d901      	bls.n	2400aafc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
2400aaf8:	2303      	movs	r3, #3
2400aafa:	e006      	b.n	2400ab0a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
2400aafc:	4b05      	ldr	r3, [pc, #20]	; (2400ab14 <RCCEx_PLL3_Config+0x15c>)
2400aafe:	681b      	ldr	r3, [r3, #0]
2400ab00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
2400ab04:	2b00      	cmp	r3, #0
2400ab06:	d0f0      	beq.n	2400aaea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
2400ab08:	7bfb      	ldrb	r3, [r7, #15]
}
2400ab0a:	4618      	mov	r0, r3
2400ab0c:	3710      	adds	r7, #16
2400ab0e:	46bd      	mov	sp, r7
2400ab10:	bd80      	pop	{r7, pc}
2400ab12:	bf00      	nop
2400ab14:	58024400 	.word	0x58024400
2400ab18:	ffff0007 	.word	0xffff0007

2400ab1c <HAL_RCCEx_LSECSS_IRQHandler>:
/**
  * @brief Handle the RCC LSE Clock Security System interrupt request.
  * @retval None
  */
void HAL_RCCEx_LSECSS_IRQHandler(void)
{
2400ab1c:	b580      	push	{r7, lr}
2400ab1e:	af00      	add	r7, sp, #0
  /* Check RCC LSE CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_LSECSS))
2400ab20:	4b07      	ldr	r3, [pc, #28]	; (2400ab40 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
2400ab22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
2400ab24:	f403 7300 	and.w	r3, r3, #512	; 0x200
2400ab28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
2400ab2c:	d105      	bne.n	2400ab3a <HAL_RCCEx_LSECSS_IRQHandler+0x1e>
  {

    /* Clear RCC LSE CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_LSECSS);
2400ab2e:	4b04      	ldr	r3, [pc, #16]	; (2400ab40 <HAL_RCCEx_LSECSS_IRQHandler+0x24>)
2400ab30:	f44f 7200 	mov.w	r2, #512	; 0x200
2400ab34:	669a      	str	r2, [r3, #104]	; 0x68

    /* RCC LSE Clock Security System interrupt user callback */
    HAL_RCCEx_LSECSS_Callback();
2400ab36:	f000 f805 	bl	2400ab44 <HAL_RCCEx_LSECSS_Callback>

  }
}
2400ab3a:	bf00      	nop
2400ab3c:	bd80      	pop	{r7, pc}
2400ab3e:	bf00      	nop
2400ab40:	58024400 	.word	0x58024400

2400ab44 <HAL_RCCEx_LSECSS_Callback>:
/**
  * @brief  RCCEx LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_LSECSS_Callback(void)
{
2400ab44:	b480      	push	{r7}
2400ab46:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_LSECSS_Callback should be implemented in the user file
  */
}
2400ab48:	bf00      	nop
2400ab4a:	46bd      	mov	sp, r7
2400ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
2400ab50:	4770      	bx	lr
2400ab52:	bf00      	nop

2400ab54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
2400ab54:	f8df d034 	ldr.w	sp, [pc, #52]	; 2400ab8c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
2400ab58:	f7f7 f850 	bl	24001bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
2400ab5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
2400ab5e:	e003      	b.n	2400ab68 <LoopCopyDataInit>

2400ab60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
2400ab60:	4b0b      	ldr	r3, [pc, #44]	; (2400ab90 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
2400ab62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
2400ab64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
2400ab66:	3104      	adds	r1, #4

2400ab68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
2400ab68:	480a      	ldr	r0, [pc, #40]	; (2400ab94 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
2400ab6a:	4b0b      	ldr	r3, [pc, #44]	; (2400ab98 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
2400ab6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
2400ab6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
2400ab70:	d3f6      	bcc.n	2400ab60 <CopyDataInit>
  ldr  r2, =_sbss
2400ab72:	4a0a      	ldr	r2, [pc, #40]	; (2400ab9c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
2400ab74:	e002      	b.n	2400ab7c <LoopFillZerobss>

2400ab76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
2400ab76:	2300      	movs	r3, #0
  str  r3, [r2], #4
2400ab78:	f842 3b04 	str.w	r3, [r2], #4

2400ab7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
2400ab7c:	4b08      	ldr	r3, [pc, #32]	; (2400aba0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
2400ab7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
2400ab80:	d3f9      	bcc.n	2400ab76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
2400ab82:	f000 f811 	bl	2400aba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
2400ab86:	f7f5 ff8d 	bl	24000aa4 <main>
  bx  lr    
2400ab8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
2400ab8c:	24080004 	.word	0x24080004
  ldr  r3, =_sidata
2400ab90:	240004a0 	.word	0x240004a0
  ldr  r0, =_sdata
2400ab94:	240004a0 	.word	0x240004a0
  ldr  r3, =_edata
2400ab98:	240004b4 	.word	0x240004b4
  ldr  r2, =_sbss
2400ab9c:	240004b4 	.word	0x240004b4
  ldr  r3, = _ebss
2400aba0:	24000528 	.word	0x24000528

2400aba4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
2400aba4:	e7fe      	b.n	2400aba4 <ADC3_IRQHandler>
	...

2400aba8 <__libc_init_array>:
2400aba8:	b570      	push	{r4, r5, r6, lr}
2400abaa:	4e0d      	ldr	r6, [pc, #52]	; (2400abe0 <__libc_init_array+0x38>)
2400abac:	4c0d      	ldr	r4, [pc, #52]	; (2400abe4 <__libc_init_array+0x3c>)
2400abae:	1ba4      	subs	r4, r4, r6
2400abb0:	10a4      	asrs	r4, r4, #2
2400abb2:	2500      	movs	r5, #0
2400abb4:	42a5      	cmp	r5, r4
2400abb6:	d109      	bne.n	2400abcc <__libc_init_array+0x24>
2400abb8:	4e0b      	ldr	r6, [pc, #44]	; (2400abe8 <__libc_init_array+0x40>)
2400abba:	4c0c      	ldr	r4, [pc, #48]	; (2400abec <__libc_init_array+0x44>)
2400abbc:	f000 f820 	bl	2400ac00 <_init>
2400abc0:	1ba4      	subs	r4, r4, r6
2400abc2:	10a4      	asrs	r4, r4, #2
2400abc4:	2500      	movs	r5, #0
2400abc6:	42a5      	cmp	r5, r4
2400abc8:	d105      	bne.n	2400abd6 <__libc_init_array+0x2e>
2400abca:	bd70      	pop	{r4, r5, r6, pc}
2400abcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2400abd0:	4798      	blx	r3
2400abd2:	3501      	adds	r5, #1
2400abd4:	e7ee      	b.n	2400abb4 <__libc_init_array+0xc>
2400abd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2400abda:	4798      	blx	r3
2400abdc:	3501      	adds	r5, #1
2400abde:	e7f2      	b.n	2400abc6 <__libc_init_array+0x1e>
2400abe0:	24000498 	.word	0x24000498
2400abe4:	24000498 	.word	0x24000498
2400abe8:	24000498 	.word	0x24000498
2400abec:	2400049c 	.word	0x2400049c

2400abf0 <memset>:
2400abf0:	4402      	add	r2, r0
2400abf2:	4603      	mov	r3, r0
2400abf4:	4293      	cmp	r3, r2
2400abf6:	d100      	bne.n	2400abfa <memset+0xa>
2400abf8:	4770      	bx	lr
2400abfa:	f803 1b01 	strb.w	r1, [r3], #1
2400abfe:	e7f9      	b.n	2400abf4 <memset+0x4>

2400ac00 <_init>:
2400ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400ac02:	bf00      	nop
2400ac04:	bcf8      	pop	{r3, r4, r5, r6, r7}
2400ac06:	bc08      	pop	{r3}
2400ac08:	469e      	mov	lr, r3
2400ac0a:	4770      	bx	lr

2400ac0c <_fini>:
2400ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
2400ac0e:	bf00      	nop
2400ac10:	bcf8      	pop	{r3, r4, r5, r6, r7}
2400ac12:	bc08      	pop	{r3}
2400ac14:	469e      	mov	lr, r3
2400ac16:	4770      	bx	lr
